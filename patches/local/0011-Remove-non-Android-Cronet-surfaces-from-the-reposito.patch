From 296a3aabe10e9d0c80b019f4c3d493a76579c893 Mon Sep 17 00:00:00 2001
From: Dan Stahr <danstahr@google.com>
Date: Tue, 3 Jan 2023 16:42:11 +0000
Subject: [PATCH] Remove non-Android Cronet surfaces from the repository.

Test: m

Change-Id: Ieca20c790d077938976d836a87f93a9a783e68b5
---
 components/cronet/ios/BUILD.gn                |  363 ----
 components/cronet/ios/Cronet.h                |  215 --
 components/cronet/ios/Cronet.mm               |  571 -----
 components/cronet/ios/DEPS                    |    5 -
 components/cronet/ios/Info.plist              |   28 -
 .../cronet/ios/cronet_consumer/BUILD.gn       |   49 -
 .../cronet/ios/cronet_consumer/Default.png    |  Bin 6540 -> 0 bytes
 .../cronet-consumer-Info.plist                |   45 -
 .../cronet_consumer_app_delegate.h            |   20 -
 .../cronet_consumer_app_delegate.mm           |   53 -
 .../cronet_consumer_view_controller.h         |   14 -
 .../cronet_consumer_view_controller.m         |   48 -
 components/cronet/ios/cronet_consumer/main.mm |   15 -
 components/cronet/ios/cronet_environment.h    |  218 --
 components/cronet/ios/cronet_environment.mm   |  510 -----
 .../cronet/ios/cronet_global_state_ios.mm     |   94 -
 components/cronet/ios/cronet_metrics.h        |  112 -
 components/cronet/ios/cronet_metrics.mm       |  368 ----
 components/cronet/ios/docs/BUILD.md           |   73 -
 components/cronet/ios/empty.cc                |    6 -
 .../ios/ios_global_state_configuration.cc     |   14 -
 components/cronet/ios/test/BUILD.gn           |   47 -
 components/cronet/ios/test/DEPS               |    3 -
 .../cronet/ios/test/cronet_acceptlang_test.mm |   57 -
 .../cronet/ios/test/cronet_http_test.mm       |  768 -------
 .../cronet/ios/test/cronet_metrics_test.mm    |  433 ----
 .../cronet/ios/test/cronet_netlog_test.mm     |  135 --
 .../ios/test/cronet_performance_test.mm       |  275 ---
 components/cronet/ios/test/cronet_pkp_test.mm |  272 ---
 .../cronet/ios/test/cronet_prefs_test.mm      |  129 --
 .../cronet/ios/test/cronet_quic_test.mm       |  111 -
 components/cronet/ios/test/cronet_test_base.h |  121 --
 .../cronet/ios/test/cronet_test_base.mm       |  327 ---
 .../cronet/ios/test/get_stream_engine.mm      |   29 -
 components/cronet/ios/test/start_cronet.h     |   16 -
 components/cronet/ios/test/start_cronet.mm    |   32 -
 components/cronet/native/BUILD.gn             |   98 -
 components/cronet/native/buffer.cc            |   87 -
 components/cronet/native/cronet.idl           | 1501 --------------
 components/cronet/native/engine.cc            |  498 -----
 components/cronet/native/engine.h             |  115 --
 components/cronet/native/engine_unittest.cc   |  253 ---
 .../cronet/native/generated/cronet.idl_c.h    | 1284 ------------
 .../generated/cronet.idl_impl_interface.cc    |  997 ---------
 .../generated/cronet.idl_impl_interface.h     |  276 ---
 .../cronet.idl_impl_interface_unittest.cc     |  849 --------
 .../generated/cronet.idl_impl_struct.cc       | 1273 ------------
 .../native/generated/cronet.idl_impl_struct.h |  231 ---
 .../cronet.idl_impl_struct_unittest.cc        |  511 -----
 components/cronet/native/include/DEPS         |    8 -
 components/cronet/native/include/cronet_c.h   |   38 -
 .../cronet/native/include/cronet_export.h     |   14 -
 components/cronet/native/include/headers.gni  |    5 -
 .../native/io_buffer_with_cronet_buffer.cc    |   60 -
 .../native/io_buffer_with_cronet_buffer.h     |   69 -
 .../cronet/native/native_metrics_util.cc      |   28 -
 .../cronet/native/native_metrics_util.h       |   51 -
 .../cronet/native/native_metrics_util_test.cc |   76 -
 components/cronet/native/perftest/main.cc     |   16 -
 .../cronet/native/perftest/perf_test.cc       |  454 ----
 components/cronet/native/perftest/perf_test.h |   12 -
 components/cronet/native/perftest/run.py      |   71 -
 components/cronet/native/runnables.cc         |   20 -
 components/cronet/native/runnables.h          |   33 -
 .../cronet/native/runnables_unittest.cc       |  203 --
 components/cronet/native/sample/DEPS          |    8 -
 components/cronet/native/sample/main.cc       |   59 -
 .../cronet/native/sample/sample_executor.cc   |   93 -
 .../cronet/native/sample/sample_executor.h    |   56 -
 .../sample/sample_url_request_callback.cc     |  138 --
 .../sample/sample_url_request_callback.h      |  102 -
 .../cronet/native/sample/test/sample_test.cc  |   53 -
 components/cronet/native/test/BUILD.gn        |   60 -
 components/cronet/native/test/buffer_test.cc  |  148 --
 components/cronet/native/test/engine_test.cc  |  227 --
 .../cronet/native/test/executors_test.cc      |   81 -
 .../test_request_finished_info_listener.cc    |   54 -
 .../test_request_finished_info_listener.h     |   85 -
 .../cronet/native/test/test_stream_engine.cc  |   49 -
 .../native/test/test_upload_data_provider.cc  |  315 ---
 .../native/test/test_upload_data_provider.h   |  153 --
 .../native/test/test_url_request_callback.cc  |  351 ----
 .../native/test/test_url_request_callback.h   |  239 ---
 components/cronet/native/test/test_util.cc    |  102 -
 components/cronet/native/test/test_util.h     |   43 -
 .../cronet/native/test/url_request_test.cc    | 1836 -----------------
 components/cronet/native/test_instructions.md |   45 -
 components/cronet/native/upload_data_sink.cc  |  297 ---
 components/cronet/native/upload_data_sink.h   |   96 -
 components/cronet/native/url_request.cc       |  887 --------
 components/cronet/native/url_request.h        |  209 --
 92 files changed, 20594 deletions(-)
 delete mode 100644 components/cronet/ios/BUILD.gn
 delete mode 100644 components/cronet/ios/Cronet.h
 delete mode 100644 components/cronet/ios/Cronet.mm
 delete mode 100644 components/cronet/ios/DEPS
 delete mode 100644 components/cronet/ios/Info.plist
 delete mode 100644 components/cronet/ios/cronet_consumer/BUILD.gn
 delete mode 100644 components/cronet/ios/cronet_consumer/Default.png
 delete mode 100644 components/cronet/ios/cronet_consumer/cronet-consumer-Info.plist
 delete mode 100644 components/cronet/ios/cronet_consumer/cronet_consumer_app_delegate.h
 delete mode 100644 components/cronet/ios/cronet_consumer/cronet_consumer_app_delegate.mm
 delete mode 100644 components/cronet/ios/cronet_consumer/cronet_consumer_view_controller.h
 delete mode 100644 components/cronet/ios/cronet_consumer/cronet_consumer_view_controller.m
 delete mode 100644 components/cronet/ios/cronet_consumer/main.mm
 delete mode 100644 components/cronet/ios/cronet_environment.h
 delete mode 100644 components/cronet/ios/cronet_environment.mm
 delete mode 100644 components/cronet/ios/cronet_global_state_ios.mm
 delete mode 100644 components/cronet/ios/cronet_metrics.h
 delete mode 100644 components/cronet/ios/cronet_metrics.mm
 delete mode 100644 components/cronet/ios/docs/BUILD.md
 delete mode 100644 components/cronet/ios/empty.cc
 delete mode 100644 components/cronet/ios/ios_global_state_configuration.cc
 delete mode 100644 components/cronet/ios/test/BUILD.gn
 delete mode 100644 components/cronet/ios/test/DEPS
 delete mode 100644 components/cronet/ios/test/cronet_acceptlang_test.mm
 delete mode 100644 components/cronet/ios/test/cronet_http_test.mm
 delete mode 100644 components/cronet/ios/test/cronet_metrics_test.mm
 delete mode 100644 components/cronet/ios/test/cronet_netlog_test.mm
 delete mode 100644 components/cronet/ios/test/cronet_performance_test.mm
 delete mode 100644 components/cronet/ios/test/cronet_pkp_test.mm
 delete mode 100644 components/cronet/ios/test/cronet_prefs_test.mm
 delete mode 100644 components/cronet/ios/test/cronet_quic_test.mm
 delete mode 100644 components/cronet/ios/test/cronet_test_base.h
 delete mode 100644 components/cronet/ios/test/cronet_test_base.mm
 delete mode 100644 components/cronet/ios/test/get_stream_engine.mm
 delete mode 100644 components/cronet/ios/test/start_cronet.h
 delete mode 100644 components/cronet/ios/test/start_cronet.mm
 delete mode 100644 components/cronet/native/BUILD.gn
 delete mode 100644 components/cronet/native/buffer.cc
 delete mode 100644 components/cronet/native/cronet.idl
 delete mode 100644 components/cronet/native/engine.cc
 delete mode 100644 components/cronet/native/engine.h
 delete mode 100644 components/cronet/native/engine_unittest.cc
 delete mode 100644 components/cronet/native/generated/cronet.idl_c.h
 delete mode 100644 components/cronet/native/generated/cronet.idl_impl_interface.cc
 delete mode 100644 components/cronet/native/generated/cronet.idl_impl_interface.h
 delete mode 100644 components/cronet/native/generated/cronet.idl_impl_interface_unittest.cc
 delete mode 100644 components/cronet/native/generated/cronet.idl_impl_struct.cc
 delete mode 100644 components/cronet/native/generated/cronet.idl_impl_struct.h
 delete mode 100644 components/cronet/native/generated/cronet.idl_impl_struct_unittest.cc
 delete mode 100644 components/cronet/native/include/DEPS
 delete mode 100644 components/cronet/native/include/cronet_c.h
 delete mode 100644 components/cronet/native/include/cronet_export.h
 delete mode 100644 components/cronet/native/include/headers.gni
 delete mode 100644 components/cronet/native/io_buffer_with_cronet_buffer.cc
 delete mode 100644 components/cronet/native/io_buffer_with_cronet_buffer.h
 delete mode 100644 components/cronet/native/native_metrics_util.cc
 delete mode 100644 components/cronet/native/native_metrics_util.h
 delete mode 100644 components/cronet/native/native_metrics_util_test.cc
 delete mode 100644 components/cronet/native/perftest/main.cc
 delete mode 100644 components/cronet/native/perftest/perf_test.cc
 delete mode 100644 components/cronet/native/perftest/perf_test.h
 delete mode 100755 components/cronet/native/perftest/run.py
 delete mode 100644 components/cronet/native/runnables.cc
 delete mode 100644 components/cronet/native/runnables.h
 delete mode 100644 components/cronet/native/runnables_unittest.cc
 delete mode 100644 components/cronet/native/sample/DEPS
 delete mode 100644 components/cronet/native/sample/main.cc
 delete mode 100644 components/cronet/native/sample/sample_executor.cc
 delete mode 100644 components/cronet/native/sample/sample_executor.h
 delete mode 100644 components/cronet/native/sample/sample_url_request_callback.cc
 delete mode 100644 components/cronet/native/sample/sample_url_request_callback.h
 delete mode 100644 components/cronet/native/sample/test/sample_test.cc
 delete mode 100644 components/cronet/native/test/BUILD.gn
 delete mode 100644 components/cronet/native/test/buffer_test.cc
 delete mode 100644 components/cronet/native/test/engine_test.cc
 delete mode 100644 components/cronet/native/test/executors_test.cc
 delete mode 100644 components/cronet/native/test/test_request_finished_info_listener.cc
 delete mode 100644 components/cronet/native/test/test_request_finished_info_listener.h
 delete mode 100644 components/cronet/native/test/test_stream_engine.cc
 delete mode 100644 components/cronet/native/test/test_upload_data_provider.cc
 delete mode 100644 components/cronet/native/test/test_upload_data_provider.h
 delete mode 100644 components/cronet/native/test/test_url_request_callback.cc
 delete mode 100644 components/cronet/native/test/test_url_request_callback.h
 delete mode 100644 components/cronet/native/test/test_util.cc
 delete mode 100644 components/cronet/native/test/test_util.h
 delete mode 100644 components/cronet/native/test/url_request_test.cc
 delete mode 100644 components/cronet/native/test_instructions.md
 delete mode 100644 components/cronet/native/upload_data_sink.cc
 delete mode 100644 components/cronet/native/upload_data_sink.h
 delete mode 100644 components/cronet/native/url_request.cc
 delete mode 100644 components/cronet/native/url_request.h

diff --git a/components/cronet/ios/BUILD.gn b/components/cronet/ios/BUILD.gn
deleted file mode 100644
index dab5af8214820..0000000000000
--- a/components/cronet/ios/BUILD.gn
+++ /dev/null
@@ -1,363 +0,0 @@
-# Copyright 2015 The Chromium Authors
-# Use of this source code is governed by a BSD-style license that can be
-# found in the LICENSE file.
-
-import("//build/apple/tweak_info_plist.gni")
-import("//build/config/apple/symbols.gni")
-import("//build/config/c++/c++.gni")
-import("//build/config/ios/ios_sdk.gni")
-import("//build/config/ios/rules.gni")
-import("//build/util/lastchange.gni")
-import("//components/cronet/native/include/headers.gni")
-import("//components/grpc_support/include/headers.gni")
-import("//testing/test.gni")
-import("//url/features.gni")
-
-assert(!is_component_build, "Cronet requires static library build.")
-
-group("cronet_consumer_group") {
-  deps = [ "//components/cronet/ios/cronet_consumer" ]
-}
-
-# TODO(crbug.com/1238839): Remove this once deprecated APIs are unused.
-config("disable_deprecated_errors") {
-  cflags = [
-    "-Wno-deprecated",
-    "-Wno-deprecated-declarations",
-  ]
-}
-
-config("cronet_include_config") {
-  include_dirs = [ "//components/grpc_support/include" ]
-}
-
-config("cronet_static_config") {
-  frameworks = [
-    "Cronet.framework",
-    "CoreTelephony.framework",
-    "UIKit.framework",
-    "CFNetwork.framework",
-    "MobileCoreServices.framework",
-    "Security.framework",
-    "SystemConfiguration.framework",
-  ]
-  libs = [ "resolv" ]
-  configs = [ ":cronet_include_config" ]
-}
-
-_cronet_deps = [
-  ":generate_accept_languages",
-  "//base:base",
-  "//components/cronet:cronet_buildflags",
-  "//components/cronet:cronet_common",
-  "//components/cronet:cronet_version_header",
-  "//components/cronet/native:cronet_native_impl",
-  "//components/grpc_support",
-  "//components/prefs:prefs",
-  "//ios/net",
-  "//ios/net:network_protocol",
-  "//ios/web/common:user_agent",
-  "//ios/web/init:global_state",
-  "//ios/web/public/init:global_state",
-  "//net",
-  "//url",
-]
-
-_cronet_sources = [
-  "Cronet.h",
-  "Cronet.mm",
-  "cronet_environment.h",
-  "cronet_environment.mm",
-  "cronet_global_state_ios.mm",
-  "cronet_metrics.h",
-  "cronet_metrics.mm",
-]
-
-_cronet_public_headers = [ "Cronet.h" ]
-_cronet_public_headers += grpc_public_headers
-_cronet_public_headers += cronet_native_public_headers
-
-source_set("cronet_sources") {
-  deps = _cronet_deps
-
-  sources = _cronet_sources
-
-  include_dirs = [ "//components/grpc_support/include" ]
-
-  if (!use_platform_icu_alternatives) {
-    deps += [ "//base:i18n" ]
-  }
-
-  configs += [
-    ":disable_deprecated_errors",
-    "//build/config/compiler:enable_arc",
-  ]
-}
-
-source_set("cronet_sources_with_global_state") {
-  deps = [
-    "//base",
-    "//ios/web/init:global_state",
-    "//ios/web/public/init:global_state",
-  ]
-
-  public_deps = [ ":cronet_sources" ]
-
-  sources = [ "ios_global_state_configuration.cc" ]
-}
-
-# Tweak |info_plist| with current version and revision.
-tweak_info_plist("tweak_cronet_plist") {
-  info_plist = "Info.plist"
-}
-
-ios_framework_bundle("cronet_framework") {
-  output_name = "Cronet"
-  info_plist_target = ":tweak_cronet_plist"
-
-  deps = [
-    ":cronet_sources_with_global_state",
-    "//base",
-    "//net:net",
-  ]
-
-  frameworks = [ "UIKit.framework" ]
-
-  public_deps = [ "//components/grpc_support:headers" ]
-
-  public_headers = _cronet_public_headers
-
-  sources = [ "Cronet.h" ]
-
-  configs -= [ "//build/config/compiler:default_symbols" ]
-  configs += [ "//build/config/compiler:symbols" ]
-
-  public_configs = [ ":cronet_include_config" ]
-}
-
-test("cronet_unittests_ios") {
-  testonly = true
-
-  sources = [ "../run_all_unittests.cc" ]
-
-  deps = [
-    ":cronet_sources_with_global_state",
-    "//base",
-    "//base/test:test_support",
-    "//components/cronet:cronet_common_unittests",
-    "//components/cronet/native:cronet_native_unittests",
-    "//net",
-    "//testing/gtest",
-  ]
-
-  bundle_deps = [ "//components/cronet/ios/test:cronet_test" ]
-}
-
-action("generate_accept_languages") {
-  script = "//components/cronet/tools/generate_accept_languages.py"
-  args = [
-    rebase_path("$target_gen_dir"),
-    rebase_path("//"),
-  ]
-  outputs = [ "$target_gen_dir/accept_languages_table.h" ]
-}
-
-# A static library which contains just _cronet_sources.
-static_library("cronet_static") {
-  visibility = [ ":*" ]
-  deps = _cronet_deps
-  sources = _cronet_sources + [ "ios_global_state_configuration.cc" ]
-  public_configs = [ ":cronet_include_config" ]
-  public_deps = [ "//components/grpc_support" ]
-
-  configs += [ "//build/config/compiler:enable_arc" ]
-}
-
-# A static library which contains all dependencies of :cronet_static.
-static_library("cronet_deps_complete") {
-  visibility = [ ":*" ]
-  complete_static_lib = true
-  configs -= [ "//build/config/compiler:thin_archive" ]
-  deps = [ ":cronet_static" ]
-
-  if (use_custom_libcxx) {
-    deps += [
-      # Add shared_library_deps to include custom libc++ into dependencies.
-      # They are by default only added to executable(), loadable_module(), and
-      # shared_library() targets, but cronet_static_complete library needs it as well to
-      # avoid linking with different versions of libc++.
-      "//build/config:shared_library_deps",
-    ]
-  }
-}
-
-# A static library which contains cronet and all dependendencies hidden inside.
-action("cronet_static_complete") {
-  visibility = [ ":*" ]
-  script = "//components/cronet/tools/hide_symbols.py"
-  deps = [
-    ":cronet_deps_complete",
-    ":cronet_static",
-  ]
-  outputs = [ "$target_out_dir/$current_cpu/cronet_static_complete.a" ]
-  args = [
-    "--input_libs",
-    rebase_path("$target_out_dir/libcronet_static.a", root_build_dir),
-    "--deps_lib",
-    rebase_path("$target_out_dir/libcronet_deps_complete.a", root_build_dir),
-    "--output_obj",
-    rebase_path("$target_out_dir/$current_cpu/cronet_static_complete.o",
-                root_build_dir),
-    "--output_lib",
-    rebase_path("$target_out_dir/$current_cpu/cronet_static_complete.a",
-                root_build_dir),
-    "--current_cpu",
-    current_cpu,
-  ]
-  if (use_custom_libcxx) {
-    args += [ "--use_custom_libcxx" ]
-  }
-
-  public_configs = [ ":cronet_static_config" ]
-}
-
-# A fat static library which exports cronet public symbols and hides all
-# dependendencies.
-if (!is_fat_secondary_toolchain) {
-  lipo_binary("libcronet") {
-    arch_binary_target = ":cronet_static_complete"
-    arch_binary_output = "cronet_static_complete.a"
-    output_name = "libcronet.a"
-    enable_stripping = false
-    enable_dsyms = false
-  }
-
-  template("ios_static_framework") {
-    _target_name = target_name
-    _output_name = target_name
-    if (defined(invoker.output_name)) {
-      _output_name = invoker.output_name
-    }
-    _framework_name = target_name
-    if (defined(invoker.framework_name)) {
-      _framework_name = invoker.framework_name
-    }
-
-    _framework_headers_target = _target_name + "_framework_headers"
-    bundle_data(_framework_headers_target) {
-      visibility = [ ":$_target_name" ]
-      sources = invoker.public_headers
-      outputs = [ "{{bundle_contents_dir}}/Headers/{{source_file_part}}" ]
-    }
-
-    _framework_binary_target = _target_name + "_framework_binary"
-    _static_library_target = invoker.static_library_target
-
-    bundle_data(_framework_binary_target) {
-      visibility = [ ":$_target_name" ]
-      sources = get_target_outputs(_static_library_target)
-      outputs = [ "{{bundle_executable_dir}}/$_framework_name" ]
-      public_deps = [ _static_library_target ]
-    }
-
-    create_bundle(_target_name) {
-      product_type = "com.apple.product-type.framework"
-      bundle_root_dir = "$root_out_dir/Static/${_output_name}"
-      bundle_contents_dir = bundle_root_dir
-      bundle_executable_dir = bundle_contents_dir
-      bundle_resources_dir = bundle_contents_dir
-      deps = [
-        ":$_framework_binary_target",
-        ":$_framework_headers_target",
-      ]
-      public_configs = invoker.public_configs
-    }
-  }
-
-  ios_static_framework("cronet_static_framework") {
-    output_name = "Cronet.framework"
-    framework_name = "Cronet"
-    public_headers = _cronet_public_headers
-    static_library_target = ":libcronet"
-    public_configs = [ ":cronet_static_config" ]
-  }
-
-  _package_dir = "$root_out_dir/cronet"
-
-  action("generate_license") {
-    _license_path = "$_package_dir/LICENSE"
-
-    script = "//tools/licenses.py"
-    inputs = [ lastchange_file ]
-    outputs = [ _license_path ]
-    args = [
-      "license_file",
-      rebase_path(_license_path, root_build_dir),
-      "--gn-target",
-      "//components/cronet/ios:cronet_framework",
-      "--gn-out-dir",
-      ".",
-      "--target-os",
-      "ios",
-    ]
-  }
-
-  copy("cronet_static_copy") {
-    sources = [ "$root_out_dir/Static/Cronet.framework" ]
-    outputs = [ "$_package_dir/Static/Cronet.framework" ]
-
-    deps = [ ":cronet_static_framework" ]
-  }
-
-  copy("cronet_package_copy") {
-    sources = [
-      "$root_out_dir/Cronet.framework",
-      "//AUTHORS",
-      "//chrome/VERSION",
-    ]
-    outputs = [ "$_package_dir/{{source_file_part}}" ]
-
-    deps = [
-      ":cronet_framework",
-      ":cronet_static_copy",
-    ]
-  }
-
-  if (enable_dsyms) {
-    action("cronet_dsym_archive") {
-      script = "//chrome/tools/build/mac/archive_symbols.py"
-
-      # These are the dSYMs that will be archived. The sources list must be
-      # the target outputs that correspond to the dSYMs (since a dSYM is a
-      # directory it cannot be listed as a source file). The targets that
-      # generate both the dSYM and binary image are listed in deps.
-      _dsyms = [ "$root_out_dir/Cronet.dSYM" ]
-
-      sources = [ "$root_out_dir/Cronet.framework" ]
-
-      _output = "$_package_dir/Cronet.dSYM.tar.bz2"
-
-      outputs = [ _output ]
-
-      args = [ rebase_path(_output, root_out_dir) ] +
-             rebase_path(_dsyms, root_out_dir)
-
-      deps = [ ":cronet_framework" ]
-    }
-  } else {
-    group("cronet_dsym_archive") {
-    }
-  }
-
-  group("cronet_package_ios") {
-    deps = [
-      ":cronet_dsym_archive",
-      ":cronet_package_copy",
-      ":generate_license",
-    ]
-  }
-} else {
-  group("cronet_package_ios") {
-    public_deps = [ ":cronet_package_ios($primary_fat_toolchain_name)" ]
-  }
-}
diff --git a/components/cronet/ios/Cronet.h b/components/cronet/ios/Cronet.h
deleted file mode 100644
index b315badb7fd5a..0000000000000
--- a/components/cronet/ios/Cronet.h
+++ /dev/null
@@ -1,215 +0,0 @@
-// Copyright 2016 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_IOS_CRONET_H_
-#define COMPONENTS_CRONET_IOS_CRONET_H_
-
-#import <Foundation/Foundation.h>
-
-#include "bidirectional_stream_c.h"
-#include "cronet.idl_c.h"
-#include "cronet_c.h"
-#include "cronet_export.h"
-
-// Type of HTTP cache; public interface to private implementation defined in
-// URLRequestContextConfig class.
-typedef NS_ENUM(NSInteger, CRNHttpCacheType) {
-  // Disabled HTTP cache.  Some data may still be temporarily stored in memory.
-  CRNHttpCacheTypeDisabled,
-  // Enable on-disk HTTP cache, including HTTP data.
-  CRNHttpCacheTypeDisk,
-  // Enable in-memory cache, including HTTP data.
-  CRNHttpCacheTypeMemory,
-};
-
-/// Cronet error domain name.
-FOUNDATION_EXPORT GRPC_SUPPORT_EXPORT NSString* const CRNCronetErrorDomain;
-
-/// Enum of Cronet NSError codes.
-NS_ENUM(NSInteger){
-    CRNErrorInvalidArgument = 1001, CRNErrorUnsupportedConfig = 1002,
-};
-
-/// The corresponding value is a String object that contains the name of
-/// an invalid argument inside the NSError userInfo dictionary.
-FOUNDATION_EXPORT GRPC_SUPPORT_EXPORT NSString* const CRNInvalidArgumentKey;
-
-// A block, that takes a request, and returns YES if the request should
-// be handled.
-typedef BOOL (^RequestFilterBlock)(NSURLRequest* request);
-
-// Interface for installing Cronet.
-// TODO(gcasto): Should this macro be separate from the one defined in
-// bidirectional_stream_c.h?
-GRPC_SUPPORT_EXPORT
-@interface Cronet : NSObject
-
-// Sets the HTTP Accept-Language header.  This method only has any effect before
-// |start| is called.
-+ (void)setAcceptLanguages:(NSString*)acceptLanguages;
-
-// Sets whether HTTP/2 should be supported by CronetEngine. This method only has
-// any effect before |start| is called.
-+ (void)setHttp2Enabled:(BOOL)http2Enabled;
-
-// Sets whether QUIC should be supported by CronetEngine. This method only has
-// any effect before |start| is called.
-+ (void)setQuicEnabled:(BOOL)quicEnabled;
-
-// Sets whether Brotli should be supported by CronetEngine. This method only has
-// any effect before |start| is called.
-+ (void)setBrotliEnabled:(BOOL)brotliEnabled;
-
-// Sets whether Metrics should be collected by CronetEngine. This method only
-// has any effect before |start| is called.
-+ (void)setMetricsEnabled:(BOOL)metricsEnabled;
-
-// Set HTTP Cache type to be used by CronetEngine.  This method only has any
-// effect before |start| is called.  See HttpCacheType enum for available
-// options.
-+ (void)setHttpCacheType:(CRNHttpCacheType)httpCacheType;
-
-// Adds hint that host supports QUIC on altPort. This method only has any effect
-// before |start| is called.  Returns NO if it fails to add hint (because the
-// host is invalid).
-+ (BOOL)addQuicHint:(NSString*)host port:(int)port altPort:(int)altPort;
-
-// Set experimental Cronet options.  Argument is a JSON string; see
-// |URLRequestContextConfig| for more details.  This method only has
-// any effect before |start| is called.
-+ (void)setExperimentalOptions:(NSString*)experimentalOptions;
-
-// Sets the User-Agent request header string to be sent with all requests.
-// If |partial| is set to YES, then actual user agent value is based on device
-// model, OS version, and |userAgent| argument. For example "Foo/3.0.0.0" is
-// sent as "Mozilla/5.0 (iPhone; CPU iPhone OS 9_3 like Mac OS X)
-// AppleWebKit/601.1 (KHTML, like Gecko) Foo/3.0.0.0 Mobile/15G31
-// Safari/601.1.46".
-// If |partial| is set to NO, then |userAgent| value is complete value sent to
-// the remote. For Example: "Foo/3.0.0.0" is sent as "Foo/3.0.0.0".
-//
-// This method only has any effect before |start| is called.
-+ (void)setUserAgent:(NSString*)userAgent partial:(BOOL)partial;
-
-// Sets SSLKEYLogFileName to export SSL key for Wireshark decryption of packet
-// captures. This method only has any effect before |start| is called.
-+ (void)setSslKeyLogFileName:(NSString*)sslKeyLogFileName;
-
-/// Pins a set of public keys for a given host. This method only has any effect
-/// before |start| is called. By pinning a set of public keys, |pinHashes|,
-/// communication with |host| is required to authenticate with a certificate
-/// with a public key from the set of pinned ones.
-/// An app can pin the public key of the root certificate, any of the
-/// intermediate certificates or the end-entry certificate. Authentication will
-/// fail and secure communication will not be established if none of the public
-/// keys is present in the host's certificate chain, even if the host attempts
-/// to authenticate with a certificate allowed by the device's trusted store of
-/// certificates.
-///
-/// Calling this method multiple times with the same host name overrides the
-/// previously set pins for the host.
-///
-/// More information about the public key pinning can be found in
-/// [RFC 7469](https://tools.ietf.org/html/rfc7469).
-///
-/// @param host name of the host to which the public keys should be pinned.
-///             A host that consists only of digits and the dot character
-///             is treated as invalid.
-/// @param pinHashes a set of pins. Each pin is the SHA-256 cryptographic
-///                  hash of the DER-encoded ASN.1 representation of the
-///                  Subject Public Key Info (SPKI) of the host's X.509
-///                  certificate. Although, the method does not mandate the
-///                  presence of the backup pin that can be used if the control
-///                  of the primary private key has been lost, it is highly
-///                  recommended to supply one.
-/// @param includeSubdomains indicates whether the pinning policy should be
-///                          applied to subdomains of |host|.
-/// @param expirationDate specifies the expiration date for the pins.
-/// @param outError on return, if the pin cannot be added, a pointer to an
-///                 error object that encapsulates the reason for the error.
-/// @return returns |YES| if the pins were added successfully; |NO|, otherwise.
-+ (BOOL)addPublicKeyPinsForHost:(NSString*)host
-                      pinHashes:(NSSet<NSData*>*)pinHashes
-              includeSubdomains:(BOOL)includeSubdomains
-                 expirationDate:(NSDate*)expirationDate
-                          error:(NSError**)outError;
-
-// Sets the block used to determine whether or not Cronet should handle the
-// request. If the block is not set, Cronet will handle all requests. Cronet
-// retains strong reference to the block, which can be released by calling this
-// method with nil block.
-+ (void)setRequestFilterBlock:(RequestFilterBlock)block;
-
-// Starts CronetEngine. It is recommended to call this method on the application
-// main thread. If the method is called on any thread other than the main one,
-// the method will internally try to execute synchronously using the main GCD
-// queue. Please make sure that the main thread is not blocked by a job
-// that calls this method; otherwise, a deadlock can occur.
-+ (void)start;
-
-// Registers Cronet as HttpProtocol Handler. Once registered, Cronet intercepts
-// and handles all requests made through NSURLConnection and shared
-// NSURLSession.
-// This method must be called after |start|.
-+ (void)registerHttpProtocolHandler;
-
-// Unregister Cronet as HttpProtocol Handler. This means that Cronet will stop
-// intercepting requests, however, it won't tear down the Cronet environment.
-// This method must be called after |start|.
-+ (void)unregisterHttpProtocolHandler;
-
-// Installs Cronet into NSURLSessionConfiguration so that all
-// NSURLSessions created with this configuration will use the Cronet stack.
-// Note that all Cronet settings are global and are shared between
-// all NSURLSessions & NSURLConnections that use the Cronet stack.
-// This method must be called after |start|.
-+ (void)installIntoSessionConfiguration:(NSURLSessionConfiguration*)config;
-
-// Returns the absolute path that startNetLogToFile:fileName will actually
-// write to.
-+ (NSString*)getNetLogPathForFile:(NSString*)fileName;
-
-// Starts net-internals logging to a file named |fileName|. Where fileName is
-// relative to the application documents directory. |fileName| must not be
-// empty. Log level is determined by |logBytes| - if YES then LOG_ALL otherwise
-// LOG_ALL_BUT_BYTES. If the file exists it is truncated before starting. If
-// actively logging the call is ignored.
-+ (BOOL)startNetLogToFile:(NSString*)fileName logBytes:(BOOL)logBytes;
-
-// Stop net-internals logging and flush file to disk. If a logging session is
-// not in progress this call is ignored.
-+ (void)stopNetLog;
-
-// Returns the full user-agent that will be used unless it is overridden on the
-// NSURLRequest used.
-+ (NSString*)getUserAgent;
-
-// Sets priority of the network thread. The |priority| should be a
-// floating point number between 0.0 to 1.0, where 1.0 is highest priority.
-// This method can be called multiple times before or after |start| method.
-+ (void)setNetworkThreadPriority:(double)priority;
-
-// Get a pointer to global instance of cronet_engine for GRPC C API.
-+ (stream_engine*)getGlobalEngine;
-
-// Returns differences in metrics collected by Cronet since the last call to
-// getGlobalMetricsDeltas, serialized as a [protobuf]
-// (https://developers.google.com/protocol-buffers).
-//
-// Cronet starts collecting these metrics after the first call to
-// getGlobalMetricsDeltras, so the first call returns no
-// useful data as no metrics have yet been collected.
-+ (NSData*)getGlobalMetricsDeltas;
-
-// Sets Host Resolver Rules for testing.
-// This method must be called after |start| has been called.
-+ (void)setHostResolverRulesForTesting:(NSString*)hostResolverRulesForTesting;
-
-// Enables TestCertVerifier which accepts all certificates for testing.
-// This method only has any effect before |start| is called.
-+ (void)enableTestCertVerifierForTesting;
-
-@end
-
-#endif  // COMPONENTS_CRONET_IOS_CRONET_H_
diff --git a/components/cronet/ios/Cronet.mm b/components/cronet/ios/Cronet.mm
deleted file mode 100644
index 717f3520ddd41..0000000000000
--- a/components/cronet/ios/Cronet.mm
+++ /dev/null
@@ -1,571 +0,0 @@
-// Copyright 2016 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import "components/cronet/ios/Cronet.h"
-
-#include <memory>
-#include <vector>
-
-#include "base/lazy_instance.h"
-#include "base/logging.h"
-#include "base/mac/bundle_locations.h"
-#include "base/strings/sys_string_conversions.h"
-#include "base/synchronization/lock.h"
-#include "components/cronet/cronet_global_state.h"
-#include "components/cronet/ios/accept_languages_table.h"
-#include "components/cronet/ios/cronet_environment.h"
-#include "components/cronet/ios/cronet_metrics.h"
-#include "components/cronet/native/url_request.h"
-#include "components/cronet/url_request_context_config.h"
-#include "ios/net/crn_http_protocol_handler.h"
-#include "ios/net/empty_nsurlcache.h"
-#include "net/base/url_util.h"
-#include "net/cert/cert_verifier.h"
-#include "net/url_request/url_request_context_getter.h"
-
-#if !defined(__has_feature) || !__has_feature(objc_arc)
-#error "This file requires ARC support."
-#endif
-
-// Cronet NSError constants.
-NSString* const CRNCronetErrorDomain = @"CRNCronetErrorDomain";
-NSString* const CRNInvalidArgumentKey = @"CRNInvalidArgumentKey";
-
-namespace {
-
-class CronetHttpProtocolHandlerDelegate;
-
-using QuicHintVector =
-    std::vector<std::unique_ptr<cronet::URLRequestContextConfig::QuicHint>>;
-// Currently there is one and only one instance of CronetEnvironment,
-// which is leaked at the shutdown. We should consider allowing multiple
-// instances if that makes sense in the future.
-base::LazyInstance<std::unique_ptr<cronet::CronetEnvironment>>::Leaky
-    gChromeNet = LAZY_INSTANCE_INITIALIZER;
-
-base::LazyInstance<std::unique_ptr<CronetHttpProtocolHandlerDelegate>>::Leaky
-    gHttpProtocolHandlerDelegate = LAZY_INSTANCE_INITIALIZER;
-
-base::LazyInstance<std::unique_ptr<cronet::CronetMetricsDelegate>>::Leaky
-    gMetricsDelegate = LAZY_INSTANCE_INITIALIZER;
-
-// See [Cronet initialize] method to set the default values of the global
-// variables.
-BOOL gHttp2Enabled;
-BOOL gQuicEnabled;
-BOOL gBrotliEnabled;
-BOOL gMetricsEnabled;
-cronet::URLRequestContextConfig::HttpCacheType gHttpCache;
-QuicHintVector gQuicHints;
-NSString* gExperimentalOptions;
-NSString* gUserAgent;
-BOOL gUserAgentPartial;
-double gNetworkThreadPriority;
-NSString* gSslKeyLogFileName;
-std::vector<std::unique_ptr<cronet::URLRequestContextConfig::Pkp>> gPkpList;
-RequestFilterBlock gRequestFilterBlock;
-NSURLCache* gPreservedSharedURLCache;
-BOOL gEnableTestCertVerifierForTesting;
-std::unique_ptr<net::CertVerifier> gMockCertVerifier;
-NSString* gAcceptLanguages;
-BOOL gEnablePKPBypassForLocalTrustAnchors;
-dispatch_once_t gSwizzleOnceToken;
-
-// CertVerifier, which allows any certificates for testing.
-class TestCertVerifier : public net::CertVerifier {
-  int Verify(const RequestParams& params,
-             net::CertVerifyResult* verify_result,
-             net::CompletionOnceCallback callback,
-             std::unique_ptr<Request>* out_req,
-             const net::NetLogWithSource& net_log) override {
-    verify_result->Reset();
-    verify_result->verified_cert = params.certificate();
-    verify_result->is_issued_by_known_root = true;
-    return net::OK;
-  }
-  void SetConfig(const Config& config) override {}
-};
-
-// net::HTTPProtocolHandlerDelegate for Cronet.
-class CronetHttpProtocolHandlerDelegate
-    : public net::HTTPProtocolHandlerDelegate {
- public:
-  CronetHttpProtocolHandlerDelegate(net::URLRequestContextGetter* getter,
-                                    RequestFilterBlock filter)
-      : getter_(getter), filter_(filter) {}
-
-  void SetRequestFilterBlock(RequestFilterBlock filter) {
-    base::AutoLock auto_lock(lock_);
-    filter_ = filter;
-  }
-
- private:
-  // net::HTTPProtocolHandlerDelegate implementation:
-  bool CanHandleRequest(NSURLRequest* request) override {
-    base::AutoLock auto_lock(lock_);
-    if (!IsRequestSupported(request))
-      return false;
-    if (filter_)
-      return filter_(request);
-    return true;
-  }
-
-  bool IsRequestSupported(NSURLRequest* request) override {
-    NSString* scheme = [[request URL] scheme];
-    if (!scheme)
-      return false;
-    return [scheme caseInsensitiveCompare:@"http"] == NSOrderedSame ||
-           [scheme caseInsensitiveCompare:@"https"] == NSOrderedSame;
-  }
-
-  net::URLRequestContextGetter* GetDefaultURLRequestContext() override {
-    return getter_.get();
-  }
-
-  scoped_refptr<net::URLRequestContextGetter> getter_;
-  __strong RequestFilterBlock filter_;
-  base::Lock lock_;
-};
-
-}  // namespace
-
-@implementation Cronet
-
-+ (void)configureCronetEnvironmentForTesting:
-    (cronet::CronetEnvironment*)cronetEnvironment {
-  if (gEnableTestCertVerifierForTesting) {
-    std::unique_ptr<TestCertVerifier> test_cert_verifier =
-        std::make_unique<TestCertVerifier>();
-    cronetEnvironment->set_mock_cert_verifier(std::move(test_cert_verifier));
-  }
-  if (gMockCertVerifier) {
-    gChromeNet.Get()->set_mock_cert_verifier(std::move(gMockCertVerifier));
-  }
-}
-
-+ (NSString*)getAcceptLanguagesFromPreferredLanguages:
-    (NSArray<NSString*>*)languages {
-  NSMutableArray* acceptLanguages = [NSMutableArray new];
-  for (NSString* lang_region in languages) {
-    NSString* lang = [lang_region componentsSeparatedByString:@"-"][0];
-    NSString* localeAcceptLangs = acceptLangs[lang_region] ?: acceptLangs[lang];
-    if (localeAcceptLangs)
-      [acceptLanguages
-          addObjectsFromArray:[localeAcceptLangs
-                                  componentsSeparatedByString:@","]];
-  }
-
-  NSString* acceptLanguageString =
-      [[[NSOrderedSet orderedSetWithArray:acceptLanguages] array]
-          componentsJoinedByString:@","];
-
-  return [acceptLanguageString length] != 0 ? acceptLanguageString
-                                            : @"en-US,en";
-}
-
-+ (NSString*)getAcceptLanguages {
-  return [self
-      getAcceptLanguagesFromPreferredLanguages:[NSLocale preferredLanguages]];
-}
-
-+ (void)setAcceptLanguages:(NSString*)acceptLanguages {
-  [self checkNotStarted];
-  gAcceptLanguages = acceptLanguages;
-}
-
-// TODO(lilyhoughton) this should either be removed, or made more sophisticated
-+ (void)checkNotStarted {
-  CHECK(!gChromeNet.Get()) << "Cronet is already started.";
-}
-
-+ (void)setHttp2Enabled:(BOOL)http2Enabled {
-  [self checkNotStarted];
-  gHttp2Enabled = http2Enabled;
-}
-
-+ (void)setQuicEnabled:(BOOL)quicEnabled {
-  [self checkNotStarted];
-  gQuicEnabled = quicEnabled;
-}
-
-+ (void)setBrotliEnabled:(BOOL)brotliEnabled {
-  [self checkNotStarted];
-  gBrotliEnabled = brotliEnabled;
-}
-
-+ (void)setMetricsEnabled:(BOOL)metricsEnabled {
-  // https://crbug.com/878589
-  // Don't collect NSURLSessionTaskMetrics until iOS 10.2 to avoid crash in iOS.
-  if (@available(iOS 10.2, *)) {
-    [self checkNotStarted];
-    gMetricsEnabled = metricsEnabled;
-  }
-}
-
-+ (BOOL)addQuicHint:(NSString*)host port:(int)port altPort:(int)altPort {
-  [self checkNotStarted];
-
-  std::string quic_host = base::SysNSStringToUTF8(host);
-
-  url::CanonHostInfo host_info;
-  std::string canon_host(net::CanonicalizeHost(quic_host, &host_info));
-  if (!host_info.IsIPAddress() &&
-      !net::IsCanonicalizedHostCompliant(canon_host)) {
-    LOG(ERROR) << "Invalid QUIC hint host: " << quic_host;
-    return NO;
-  }
-
-  gQuicHints.push_back(
-      std::make_unique<cronet::URLRequestContextConfig::QuicHint>(
-          quic_host, port, altPort));
-
-  return YES;
-}
-
-+ (void)setExperimentalOptions:(NSString*)experimentalOptions {
-  [self checkNotStarted];
-  gExperimentalOptions = experimentalOptions;
-}
-
-+ (void)setUserAgent:(NSString*)userAgent partial:(BOOL)partial {
-  [self checkNotStarted];
-  gUserAgent = userAgent;
-  gUserAgentPartial = partial;
-}
-
-+ (void)setSslKeyLogFileName:(NSString*)sslKeyLogFileName {
-  [self checkNotStarted];
-  gSslKeyLogFileName = [self getNetLogPathForFile:sslKeyLogFileName];
-}
-
-+ (void)setHttpCacheType:(CRNHttpCacheType)httpCacheType {
-  [self checkNotStarted];
-  switch (httpCacheType) {
-    case CRNHttpCacheTypeDisabled:
-      gHttpCache = cronet::URLRequestContextConfig::HttpCacheType::DISABLED;
-      break;
-    case CRNHttpCacheTypeDisk:
-      gHttpCache = cronet::URLRequestContextConfig::HttpCacheType::DISK;
-      break;
-    case CRNHttpCacheTypeMemory:
-      gHttpCache = cronet::URLRequestContextConfig::HttpCacheType::MEMORY;
-      break;
-    default:
-      DCHECK(NO) << "Invalid HTTP cache type: " << httpCacheType;
-  }
-}
-
-+ (void)setRequestFilterBlock:(RequestFilterBlock)block {
-  if (gHttpProtocolHandlerDelegate.Get().get())
-    gHttpProtocolHandlerDelegate.Get().get()->SetRequestFilterBlock(block);
-  else
-    gRequestFilterBlock = block;
-}
-
-+ (BOOL)addPublicKeyPinsForHost:(NSString*)host
-                      pinHashes:(NSSet<NSData*>*)pinHashes
-              includeSubdomains:(BOOL)includeSubdomains
-                 expirationDate:(NSDate*)expirationDate
-                          error:(NSError**)outError {
-  [self checkNotStarted];
-
-  // Pinning a key only makes sense if pin bypassing has been disabled
-  if (gEnablePKPBypassForLocalTrustAnchors) {
-    if (outError != nil) {
-      *outError =
-          [self createUnsupportedConfigurationError:
-                    @"Cannot pin keys while public key pinning is bypassed"];
-    }
-    return NO;
-  }
-
-  auto pkp = std::make_unique<cronet::URLRequestContextConfig::Pkp>(
-      base::SysNSStringToUTF8(host), includeSubdomains,
-      base::Time::FromCFAbsoluteTime(
-          [expirationDate timeIntervalSinceReferenceDate]));
-
-  for (NSData* hash in pinHashes) {
-    net::SHA256HashValue hashValue = net::SHA256HashValue();
-    if (sizeof(hashValue.data) != hash.length) {
-      *outError =
-          [self createIllegalArgumentErrorWithArgument:@"pinHashes"
-                                                reason:
-                                                    @"The length of PKP SHA256 "
-                                                    @"hash should be 256 bits"];
-      return NO;
-    }
-    memcpy((void*)(hashValue.data), [hash bytes], sizeof(hashValue.data));
-    pkp->pin_hashes.push_back(net::HashValue(hashValue));
-  }
-  gPkpList.push_back(std::move(pkp));
-  if (outError) {
-    *outError = nil;
-  }
-  return YES;
-}
-
-+ (void)setEnablePublicKeyPinningBypassForLocalTrustAnchors:(BOOL)enable {
-  gEnablePKPBypassForLocalTrustAnchors = enable;
-}
-
-+ (base::SingleThreadTaskRunner*)getFileThreadRunnerForTesting {
-  return gChromeNet.Get()->GetFileThreadRunnerForTesting();
-}
-
-+ (base::SingleThreadTaskRunner*)getNetworkThreadRunnerForTesting {
-  return gChromeNet.Get()->GetNetworkThreadRunnerForTesting();
-}
-
-+ (void)startInternal {
-  std::string user_agent = base::SysNSStringToUTF8(gUserAgent);
-
-  gChromeNet.Get().reset(
-      new cronet::CronetEnvironment(user_agent, gUserAgentPartial));
-
-  gChromeNet.Get()->set_accept_language(
-      base::SysNSStringToUTF8(gAcceptLanguages ?: [self getAcceptLanguages]));
-
-  gChromeNet.Get()->set_http2_enabled(gHttp2Enabled);
-  gChromeNet.Get()->set_quic_enabled(gQuicEnabled);
-  gChromeNet.Get()->set_brotli_enabled(gBrotliEnabled);
-  gChromeNet.Get()->set_experimental_options(
-      base::SysNSStringToUTF8(gExperimentalOptions));
-  gChromeNet.Get()->set_http_cache(gHttpCache);
-  gChromeNet.Get()->set_ssl_key_log_file_name(
-      base::SysNSStringToUTF8(gSslKeyLogFileName));
-  gChromeNet.Get()->set_pkp_list(std::move(gPkpList));
-  gChromeNet.Get()
-      ->set_enable_public_key_pinning_bypass_for_local_trust_anchors(
-          gEnablePKPBypassForLocalTrustAnchors);
-  if (gNetworkThreadPriority !=
-      cronet::CronetEnvironment::kKeepDefaultThreadPriority) {
-    gChromeNet.Get()->SetNetworkThreadPriority(gNetworkThreadPriority);
-  }
-  for (const auto& quicHint : gQuicHints) {
-    gChromeNet.Get()->AddQuicHint(quicHint->host, quicHint->port,
-                                  quicHint->alternate_port);
-  }
-
-  [self configureCronetEnvironmentForTesting:gChromeNet.Get().get()];
-  gChromeNet.Get()->Start();
-  gHttpProtocolHandlerDelegate.Get().reset(
-      new CronetHttpProtocolHandlerDelegate(
-          gChromeNet.Get()->GetURLRequestContextGetter(), gRequestFilterBlock));
-  net::HTTPProtocolHandlerDelegate::SetInstance(
-      gHttpProtocolHandlerDelegate.Get().get());
-
-  if (gMetricsEnabled) {
-    gMetricsDelegate.Get().reset(new cronet::CronetMetricsDelegate());
-    net::MetricsDelegate::SetInstance(gMetricsDelegate.Get().get());
-
-    dispatch_once(&gSwizzleOnceToken, ^{
-      cronet::SwizzleSessionWithConfiguration();
-    });
-  } else {
-    net::MetricsDelegate::SetInstance(nullptr);
-  }
-
-  gRequestFilterBlock = nil;
-}
-
-+ (void)start {
-  cronet::EnsureInitialized();
-  [self startInternal];
-}
-
-+ (void)unswizzleForTesting {
-  if (gSwizzleOnceToken)
-    cronet::SwizzleSessionWithConfiguration();
-  gSwizzleOnceToken = 0;
-}
-
-+ (void)shutdownForTesting {
-  [Cronet unswizzleForTesting];
-  [Cronet initialize];
-}
-
-+ (void)registerHttpProtocolHandler {
-  if (gPreservedSharedURLCache == nil) {
-    gPreservedSharedURLCache = [NSURLCache sharedURLCache];
-  }
-  // Disable the default cache.
-  [NSURLCache setSharedURLCache:[EmptyNSURLCache emptyNSURLCache]];
-  // Register the chrome http protocol handler to replace the default one.
-  BOOL success =
-      [NSURLProtocol registerClass:[CRNHTTPProtocolHandler class]];
-  DCHECK(success);
-}
-
-+ (void)unregisterHttpProtocolHandler {
-  // Set up SharedURLCache preserved in registerHttpProtocolHandler.
-  if (gPreservedSharedURLCache != nil) {
-    [NSURLCache setSharedURLCache:gPreservedSharedURLCache];
-    gPreservedSharedURLCache = nil;
-  }
-  [NSURLProtocol unregisterClass:[CRNHTTPProtocolHandler class]];
-}
-
-+ (void)installIntoSessionConfiguration:(NSURLSessionConfiguration*)config {
-  config.protocolClasses = @[ [CRNHTTPProtocolHandler class] ];
-}
-
-+ (NSString*)getNetLogPathForFile:(NSString*)fileName {
-  return [[[[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory
-                                                   inDomains:NSUserDomainMask]
-      lastObject] URLByAppendingPathComponent:fileName] path];
-}
-
-+ (BOOL)startNetLogToFile:(NSString*)fileName logBytes:(BOOL)logBytes {
-  if (gChromeNet.Get().get() && [fileName length] &&
-      ![fileName isAbsolutePath]) {
-    return gChromeNet.Get()->StartNetLog(
-        base::SysNSStringToUTF8([self getNetLogPathForFile:fileName]),
-        logBytes);
-  }
-
-  return NO;
-}
-
-+ (void)stopNetLog {
-  if (gChromeNet.Get().get()) {
-    gChromeNet.Get()->StopNetLog();
-  }
-}
-
-+ (NSString*)getUserAgent {
-  if (!gChromeNet.Get().get()) {
-    return nil;
-  }
-
-  return [NSString stringWithCString:gChromeNet.Get()->user_agent().c_str()
-                            encoding:[NSString defaultCStringEncoding]];
-}
-
-+ (void)setNetworkThreadPriority:(double)priority {
-  gNetworkThreadPriority = priority;
-  if (gChromeNet.Get()) {
-    gChromeNet.Get()->SetNetworkThreadPriority(priority);
-  };
-}
-
-+ (stream_engine*)getGlobalEngine {
-  DCHECK(gChromeNet.Get().get());
-  if (gChromeNet.Get().get()) {
-    static stream_engine engine;
-    engine.obj = gChromeNet.Get()->GetURLRequestContextGetter();
-    return &engine;
-  }
-  return nil;
-}
-
-+ (NSData*)getGlobalMetricsDeltas {
-  if (!gChromeNet.Get().get()) {
-    return nil;
-  }
-  std::vector<uint8_t> deltas(gChromeNet.Get()->GetHistogramDeltas());
-  return [NSData dataWithBytes:deltas.data() length:deltas.size()];
-}
-
-+ (void)enableTestCertVerifierForTesting {
-  gEnableTestCertVerifierForTesting = YES;
-}
-
-+ (void)setMockCertVerifierForTesting:
-    (std::unique_ptr<net::CertVerifier>)certVerifier {
-  gMockCertVerifier = std::move(certVerifier);
-}
-
-+ (void)setHostResolverRulesForTesting:(NSString*)hostResolverRulesForTesting {
-  DCHECK(gChromeNet.Get().get());
-  gChromeNet.Get()->SetHostResolverRules(
-      base::SysNSStringToUTF8(hostResolverRulesForTesting));
-}
-
-// This is a private dummy method that prevents the linker from stripping out
-// the otherwise unreferenced methods from 'bidirectional_stream.cc'.
-+ (void)preventStrippingCronetBidirectionalStream {
-  bidirectional_stream_create(NULL, 0, 0);
-}
-
-// This is a private dummy method that prevents the linker from stripping out
-// the otherwise unreferenced modules from 'native'.
-+ (void)preventStrippingNativeCronetModules {
-  Cronet_Buffer_Create();
-  Cronet_Engine_Create();
-  Cronet_UrlRequest_Create();
-}
-
-+ (NSError*)createIllegalArgumentErrorWithArgument:(NSString*)argumentName
-                                            reason:(NSString*)reason {
-  NSMutableDictionary* errorDictionary =
-      [[NSMutableDictionary alloc] initWithDictionary:@{
-        NSLocalizedDescriptionKey :
-            [NSString stringWithFormat:@"Invalid argument: %@", argumentName],
-        CRNInvalidArgumentKey : argumentName
-      }];
-  if (reason) {
-    errorDictionary[NSLocalizedFailureReasonErrorKey] = reason;
-  }
-  return [self createCronetErrorWithCode:CRNErrorInvalidArgument
-                                userInfo:errorDictionary];
-}
-
-+ (NSError*)createUnsupportedConfigurationError:(NSString*)contradiction {
-  NSMutableDictionary* errorDictionary =
-      [[NSMutableDictionary alloc] initWithDictionary:@{
-        NSLocalizedDescriptionKey : @"Unsupported configuration",
-        NSLocalizedRecoverySuggestionErrorKey :
-            @"Try disabling Public Key Pinning Bypass before pinning keys.",
-        NSLocalizedFailureReasonErrorKey : @"Pinning public keys while local "
-                                           @"anchor bypass is enabled is "
-                                           @"currently not supported.",
-      }];
-  if (contradiction) {
-    errorDictionary[NSLocalizedFailureReasonErrorKey] = contradiction;
-  }
-
-  return [self createCronetErrorWithCode:CRNErrorUnsupportedConfig
-                                userInfo:errorDictionary];
-}
-
-+ (NSError*)createCronetErrorWithCode:(int)errorCode
-                             userInfo:(NSDictionary*)userInfo {
-  return [NSError errorWithDomain:CRNCronetErrorDomain
-                             code:errorCode
-                         userInfo:userInfo];
-}
-
-// Used by tests to query the size of the map that contains metrics for
-// individual NSURLSession tasks.
-+ (size_t)getMetricsMapSize {
-  return cronet::CronetMetricsDelegate::GetMetricsMapSize();
-}
-
-// Static class initializer.
-+ (void)initialize {
-  gChromeNet.Get().reset();
-  gHttp2Enabled = YES;
-  gQuicEnabled = NO;
-  gBrotliEnabled = NO;
-  gMetricsEnabled = NO;
-  gHttpCache = cronet::URLRequestContextConfig::HttpCacheType::DISK;
-  gQuicHints.clear();
-  gExperimentalOptions = @"{}";
-  gUserAgent = nil;
-  gUserAgentPartial = NO;
-  gNetworkThreadPriority =
-      cronet::CronetEnvironment::kKeepDefaultThreadPriority;
-  gSslKeyLogFileName = nil;
-  gPkpList.clear();
-  gRequestFilterBlock = nil;
-  gHttpProtocolHandlerDelegate.Get().reset(nullptr);
-  gMetricsDelegate.Get().reset(nullptr);
-  gPreservedSharedURLCache = nil;
-  gEnableTestCertVerifierForTesting = NO;
-  gMockCertVerifier.reset(nullptr);
-  gAcceptLanguages = nil;
-  gEnablePKPBypassForLocalTrustAnchors = YES;
-}
-
-@end
diff --git a/components/cronet/ios/DEPS b/components/cronet/ios/DEPS
deleted file mode 100644
index 07c67f3f15737..0000000000000
--- a/components/cronet/ios/DEPS
+++ /dev/null
@@ -1,5 +0,0 @@
-include_rules = [
-  "+ios/net",
-  "+ios/web/common",
-  "+ios/web/public",
-]
diff --git a/components/cronet/ios/Info.plist b/components/cronet/ios/Info.plist
deleted file mode 100644
index 3b48c36b967a9..0000000000000
--- a/components/cronet/ios/Info.plist
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
-<plist version="1.0">
-<dict>
-  <key>CFBundleDevelopmentRegion</key>
-  <string>en</string>
-  <key>CFBundleExecutable</key>
-  <string>Cronet</string>
-  <key>CFBundleIdentifier</key>
-  <string>org.chromium.net.Cronet</string>
-  <key>CFBundleInfoDictionaryVersion</key>
-  <string>6.0</string>
-  <key>CFBundleName</key>
-  <string>Cronet</string>
-  <key>CFBundlePackageType</key>
-  <string>FMWK</string>
-  <key>CFBundleShortVersionString</key>
-  <string>1.0</string>
-  <key>CFBundleSignature</key>
-  <string>????</string>
-  <key>CFBundleVersion</key>
-  <string>1.0</string>
-  <key>NSHumanReadableCopyright</key>
-  <string>Copyright 2016 The Chromium Authors. All rights reserved.</string>
-  <key>NSPrincipalClass</key>
-  <string></string>
-</dict>
-</plist>
\ No newline at end of file
diff --git a/components/cronet/ios/cronet_consumer/BUILD.gn b/components/cronet/ios/cronet_consumer/BUILD.gn
deleted file mode 100644
index 4027a3e42fd5d..0000000000000
--- a/components/cronet/ios/cronet_consumer/BUILD.gn
+++ /dev/null
@@ -1,49 +0,0 @@
-# Copyright 2016 The Chromium Authors
-# Use of this source code is governed by a BSD-style license that can be
-# found in the LICENSE file.
-
-import("//build/config/ios/rules.gni")
-import("//ios/features.gni")
-
-template("cronet_consumer_template") {
-  _target_name = target_name
-
-  ios_app_bundle(_target_name) {
-    info_plist = "cronet-consumer-Info.plist"
-
-    deps = [ "//base:base" ]
-
-    deps += invoker.deps
-
-    sources = [
-      "cronet_consumer_app_delegate.h",
-      "cronet_consumer_app_delegate.mm",
-      "cronet_consumer_view_controller.h",
-      "cronet_consumer_view_controller.m",
-      "main.mm",
-    ]
-
-    forward_variables_from(invoker,
-                           [
-                             "bundle_deps",
-                             "framework_dirs",
-                           ])
-
-    configs += [ "//build/config/compiler:enable_arc" ]
-  }
-}
-
-cronet_consumer_template("cronet_consumer") {
-  deps = [ "//components/cronet/ios:cronet_framework+link" ]
-  bundle_deps = [ "//components/cronet/ios:cronet_framework+bundle" ]
-}
-
-# TODO(mef): Building "cronet_consumer_static" app with additional_target_cpus
-# causes "cronet_static_framework" to build lipo_binary("libcronet") for
-# duplicate architecture (e.g. arm64+arm64) and breaks the build.
-if (!defined(additional_target_cpus) || additional_target_cpus == []) {
-  cronet_consumer_template("cronet_consumer_static") {
-    deps = [ "//components/cronet/ios:cronet_static_framework" ]
-    framework_dirs = [ "$root_out_dir/Static" ]
-  }
-}
diff --git a/components/cronet/ios/cronet_consumer/Default.png b/components/cronet/ios/cronet_consumer/Default.png
deleted file mode 100644
index 4c8ca6f693f96d511e9113c0eb59eec552354e42..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6540
zcmeAS@N?(olHy`uVBq!ia0y~yU~~ZD2OMlbkt;o0To@QwR5G2N13aCb6#|O#(=u~X
z85k@CTSM>X-wqM6>&y>YB4)1;;ojbLbbV-W^iFB1wa3^zCog^LCAReC4K0-?R_2{6
zrP*)4+_uWUy3w5N52M3PW_}MFMP9a~>YLvVZ1D_k*IMQ2QT^fwzoOb(*3gH$%aYWC
zkHmcab=va2<#X%jakpJ;<1@F;k__#bwtC&%^D0v(FBh9K&$sK+<}2RJS609D)17$w
ztdQP8(eLM8Ka}m_IQ@3wyMKP)l=oM4-?`YS<bNPfRJK;~2T$OcE7{w;MfS7*{*k$z
z?apVJ50}kYm{v1Qubm@Qaq+mit)HSjXWs>_*P?4V_ORLPxsj&7Ju#kH;>6^Kp?T7~
zl+q?{UOOqV==?+d{=)5s|M~T1mwtH@+Z^$G&eEO9JNP^AX@3jZ*J*!!>lc|1-W%fA
z@AOQpXZ_Lt>rxF<g?!+bm6K{q?mc&pk6$ZtkL@07^~Hka+`hlFN)4-JBsO0Bs``4y
z31y4xrRhSOmxwpK5Bss@M)He^D^3JwK1h6U(5rUU%=lS_Vb5Cbp57ca^9+-6f6D&l
zXP-2%H`s4kyJrRK*-KXD#*4&0d534`ty}4MYu&8KK<>XrGp*zLPiW@uo_c7C{As>j
zWeX)wi+LTp_)@KYZCX{j;H?|1yXT4DnlS(Fr8gyP5|uaX_gLvaW0ScZdnG7o+u{T6
zFI-%d{ls*WuCDa5UJ@|RXv&ejZe}*BMkiWY51&pnRPw(hlykSzvj6e%mYz-GdvzBD
zF10?szF_~!jS=?2HyQuPCvARXAe}C}WP|yQ*>5<!4_Y1MW92H!wG!33T&wZ*^B(`w
z5HTyifKPuMYBf3n&)s}4_3Lc^zqVN$ytTh5`(H3LiGC}rz%HCoYJSOXd3Lt_8$O#;
zY`cG)d%G_?yW~&d=ia;BxyQ{m<Q>~~=*Nxq8+HHW1~FMDRCP^Tc<MvhA<hbAS=$)K
z%c{Ju^B+WBxD|A3<Km^Sel}iERy$~a!tTtaoewXp`nTxc%DffvE5xtdx6W#jv|grC
zt5vK0SEE+FR{yV0S4re9rN1h%Q}<2OW3}A<e(!wM8`bOM6NT?~#b#X1o^Pri?02gA
ziTKkgfA;*@WFx&nWM{nG<mFHHet5(A?JUn<*}W1aT${6ew^r+ZWRWo8S7n>acKuk$
z(U#REVv)D!PhJ*ecH-ELFUrfyV&*)Z)>UCOuS?yd^L@Afk>ihynYPc{^CRwu+J<G!
zU;j-OHn6gKkgMaPdcye8T&uz`*DqWpvoD;Dtz)~-x5#sK*)_9MqTx5!uUfCkS#xTK
zQS4RscG0sYqUWD#n3eC?d#HP{%D!f$z88-7e(!TFyUUaNF50F2{~_zwVHwdYglpdl
zeBCc~tL=kd%`@Xg-Rxg??S1rovBwj(iNRJI?*Ep3>HX+#$@YsC4c|l0tGigsn@jy)
zXD($Ouk>H+V(Mr6NQT0S9BFM~V6nkj;1OBOz`zY;a|<&v%$g$sEJPk;hD4M^`1)8S
z=jZArrsOB3>Q&?x097+E*i={nnYpPYi3%0DIeEoa6}C!X6;?ntNLXJ<0j#7X+g2&U
zH$cHTzbI9~RL@Y)NXd>%K|#T$C?(A*$i)q+9mum)$|xx*u+rBrFE7_CH`dE9O4m2E
zw6xSWFw!?N(gmu}Ew0QfNvzP#D^`XW0yD=YwK%ybv!En1KTiQ<Zemh?X^E|p638Mr
zfVi_HGYw%=UNO{LKo9DJWb_U74D{h<1GU<KM6H5Si}Q0zLB@yXWtP|(+JF_K3nOfU
z=yJ}_EhtJYE(U6|GlgnF7DHDbfw0ET+z6@xSrA==e^F*CFhD@=g1ZS>3|)OBHVcpi
zp&D%TL4k-AsNfg_g$9~9p}<b9$ixxYAQ{ZS28mh)WLBi+M7U(;rsjcz&e+JnMjxvT
zlK;T+&iOg{MZpD$$*G{=Ko>$+4Ynr|VULLgiakg&)DD)EWO!OHC@snXr}UI${nVUP
zpr1>Mf#G6^ng~;pt%^&NvQm>vU@-wn)!_JWN=(;B61LIDR86%A1?G9U(@`={MPdPF
zbOKdd`R1o&rd7HmmZaJl85kPr8kp-EnTHsfS{ayIfdU*&4N@e5WSomq6HD@oLh|!-
z?7;Dr3*ssm=^5w&a}>G?yzvAH17L|`#|6|0E4}QvA~xC{V_*<a@^o<wsbGA2?V_i1
zpoq&w7w-)$2cNO*_AFc`x%a)k4|g?d-iIgo*A6`RTekb}obR>wu2<Tza0qB{*!Z6~
z{<r4uy!1a@Q%`#|99Vtev($n8*W>^AHZU}H9f($4F$btFf{}TLQXUhF5fht1@YV$^
z9BUdFV+73^nIsvRXRM40U}6b7z_6}kHbY}i1LK(xT@6Mi?F5GKBfbp|ZU-3BR*6kv
zXcRSQ(0-)mprD+<U>wTr)o_4I;(%zOu)+jEgNB)_SXCVoSa}|F?cfwR!69+L=W3IX
z!UiU`0@ph%94Rb33Cpq^IY*r_8XBW%V>G9XmK&p`=xCiXTEmXEH%41uqixaAmicH0
zVYIt6!aI*K%s=kP-v##6IXG<Y`=7{Wu|NNtgGFp210&P)17G{^Kb9}|<w@YOzOe~3
O{^{xJ=d#Wzp$P!gaCuMw

diff --git a/components/cronet/ios/cronet_consumer/cronet-consumer-Info.plist b/components/cronet/ios/cronet_consumer/cronet-consumer-Info.plist
deleted file mode 100644
index 57ee6ae8a46cd..0000000000000
--- a/components/cronet/ios/cronet_consumer/cronet-consumer-Info.plist
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
-<plist version="1.0">
-<dict>
-	<key>CFBundleDevelopmentRegion</key>
-	<string>en</string>
-	<key>CFBundleDisplayName</key>
-	<string>${PRODUCT_NAME}</string>
-	<key>CFBundleExecutable</key>
-	<string>${EXECUTABLE_NAME}</string>
-	<key>CFBundleIdentifier</key>
-	<string>chromium.${PRODUCT_NAME:rfc1034identifier}</string>
-	<key>CFBundleInfoDictionaryVersion</key>
-	<string>6.0</string>
-	<key>CFBundleName</key>
-	<string>${PRODUCT_NAME}</string>
-	<key>CFBundlePackageType</key>
-	<string>APPL</string>
-	<key>CFBundleShortVersionString</key>
-	<string>1.0</string>
-	<key>CFBundleSignature</key>
-	<string>????</string>
-	<key>CFBundleVersion</key>
-	<string>1.0</string>
-	<key>LSRequiresIPhoneOS</key>
-	<true/>
-	<key>UIRequiredDeviceCapabilities</key>
-	<array>
-		<string>armv7</string>
-	</array>
-	<key>UISupportedInterfaceOrientations</key>
-	<array>
-		<string>UIInterfaceOrientationPortrait</string>
-		<string>UIInterfaceOrientationLandscapeLeft</string>
-		<string>UIInterfaceOrientationLandscapeRight</string>
-	</array>
-	<key>UISupportedInterfaceOrientations~ipad</key>
-	<array>
-		<string>UIInterfaceOrientationPortrait</string>
-		<string>UIInterfaceOrientationPortraitUpsideDown</string>
-		<string>UIInterfaceOrientationLandscapeLeft</string>
-		<string>UIInterfaceOrientationLandscapeRight</string>
-	</array>
-</dict>
-</plist>
diff --git a/components/cronet/ios/cronet_consumer/cronet_consumer_app_delegate.h b/components/cronet/ios/cronet_consumer/cronet_consumer_app_delegate.h
deleted file mode 100644
index 4abd3d4adf1d9..0000000000000
--- a/components/cronet/ios/cronet_consumer/cronet_consumer_app_delegate.h
+++ /dev/null
@@ -1,20 +0,0 @@
-// Copyright 2014 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_IOS_CRONET_CONSUMER_CRONET_CONSUMER_APP_DELEGATE_H_
-#define COMPONENTS_CRONET_IOS_CRONET_CONSUMER_CRONET_CONSUMER_APP_DELEGATE_H_
-
-#import <UIKit/UIKit.h>
-
-@class CronetConsumerViewController;
-
-// The main app controller and UIApplicationDelegate.
-@interface CronetConsumerAppDelegate : UIResponder<UIApplicationDelegate>
-
-@property(strong, nonatomic) UIWindow* window;
-@property(strong, nonatomic) CronetConsumerViewController* viewController;
-
-@end
-
-#endif  // COMPONENTS_CRONET_IOS_CRONET_CONSUMER_CRONET_CONSUMER_APP_DELEGATE_H_
diff --git a/components/cronet/ios/cronet_consumer/cronet_consumer_app_delegate.mm b/components/cronet/ios/cronet_consumer/cronet_consumer_app_delegate.mm
deleted file mode 100644
index 26a60793a7737..0000000000000
--- a/components/cronet/ios/cronet_consumer/cronet_consumer_app_delegate.mm
+++ /dev/null
@@ -1,53 +0,0 @@
-// Copyright 2014 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import "cronet_consumer_app_delegate.h"
-
-#import <Cronet/Cronet.h>
-
-#include "base/format_macros.h"
-#import "cronet_consumer_view_controller.h"
-
-@implementation CronetConsumerAppDelegate {
-  NSUInteger _counter;
-}
-
-@synthesize window;
-@synthesize viewController;
-
-// Returns a file name to save net internals logging. This method suffixes
-// the ivar |_counter| to the file name so a new name can be obtained by
-// modifying that.
-- (NSString*)currentNetLogFileName {
-  return [NSString
-      stringWithFormat:@"cronet-consumer-net-log%" PRIuNS ".json", _counter];
-}
-
-- (BOOL)application:(UIApplication*)application
-    didFinishLaunchingWithOptions:(NSDictionary*)launchOptions {
-  [Cronet setUserAgent:@"Dummy/1.0" partial:YES];
-  [Cronet setQuicEnabled:YES];
-  [Cronet start];
-  [Cronet startNetLogToFile:[self currentNetLogFileName] logBytes:NO];
-
-  [Cronet registerHttpProtocolHandler];
-  self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
-  self.viewController =
-      [[CronetConsumerViewController alloc] initWithNibName:nil bundle:nil];
-  self.window.rootViewController = self.viewController;
-  [self.window makeKeyAndVisible];
-
-  return YES;
-}
-
-- (void)applicationDidEnterBackground:(UIApplication*)application {
-  [Cronet stopNetLog];
-}
-
-- (void)applicationWillEnterForeground:(UIApplication*)application {
-  _counter++;
-  [Cronet startNetLogToFile:[self currentNetLogFileName] logBytes:NO];
-}
-
-@end
diff --git a/components/cronet/ios/cronet_consumer/cronet_consumer_view_controller.h b/components/cronet/ios/cronet_consumer/cronet_consumer_view_controller.h
deleted file mode 100644
index 0665bd6adfb24..0000000000000
--- a/components/cronet/ios/cronet_consumer/cronet_consumer_view_controller.h
+++ /dev/null
@@ -1,14 +0,0 @@
-// Copyright 2014 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_IOS_CRONET_CONSUMER_CRONET_CONSUMER_VIEW_CONTROLLER_H_
-#define COMPONENTS_CRONET_IOS_CRONET_CONSUMER_CRONET_CONSUMER_VIEW_CONTROLLER_H_
-
-#import <Foundation/Foundation.h>
-#import <UIKit/UIKit.h>
-
-@interface CronetConsumerViewController : UIViewController
-@end
-
-#endif  // COMPONENTS_CRONET_IOS_CRONET_CONSUMER_CRONET_CONSUMER_VIEW_CONTROLLER_H_
diff --git a/components/cronet/ios/cronet_consumer/cronet_consumer_view_controller.m b/components/cronet/ios/cronet_consumer/cronet_consumer_view_controller.m
deleted file mode 100644
index 1e4659c248aa2..0000000000000
--- a/components/cronet/ios/cronet_consumer/cronet_consumer_view_controller.m
+++ /dev/null
@@ -1,48 +0,0 @@
-// Copyright 2014 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import "cronet_consumer_view_controller.h"
-
-#import <Cronet/Cronet.h>
-
-@implementation CronetConsumerViewController
-#if !defined(__IPHONE_12_0) || __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_12_0
-{
-  UIWebView* _webView;
-}
-
-- (void)viewDidLoad {
-  self.view.backgroundColor = [UIColor whiteColor];
-
-  UIButton* button = [UIButton buttonWithType:UIButtonTypeSystem];
-  [button setTitle:@"chromium.org" forState:UIControlStateNormal];
-  [button setFrame:CGRectMake(5, 0, 95, 50)];
-  [button addTarget:self
-                action:@selector(loadChromium)
-      forControlEvents:UIControlEventTouchUpInside];
-  [self.view addSubview:button];
-
-  _webView = [[UIWebView alloc]
-      initWithFrame:CGRectMake(0, 52, self.view.bounds.size.width,
-                               self.view.bounds.size.height - 52)];
-  [self.view addSubview:_webView];
-  _webView.autoresizingMask =
-      UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
-
-  [self loadChromium];
-}
-
-// Disable the status bar to sidestep all the iOS7 status bar issues.
-- (BOOL)prefersStatusBarHidden {
-  return YES;
-}
-
-- (void)loadChromium {
-  [_webView
-      loadRequest:[NSURLRequest
-                      requestWithURL:
-                          [NSURL URLWithString:@"https://www.chromium.org"]]];
-}
-#endif
-@end
diff --git a/components/cronet/ios/cronet_consumer/main.mm b/components/cronet/ios/cronet_consumer/main.mm
deleted file mode 100644
index fd72207ad47d4..0000000000000
--- a/components/cronet/ios/cronet_consumer/main.mm
+++ /dev/null
@@ -1,15 +0,0 @@
-// Copyright 2014 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import <Foundation/Foundation.h>
-#import <UIKit/UIKit.h>
-
-#import "cronet_consumer_app_delegate.h"
-
-int main(int argc, char* argv[]) {
-  @autoreleasepool {
-    return UIApplicationMain(
-        argc, argv, nil, NSStringFromClass([CronetConsumerAppDelegate class]));
-  }
-}
diff --git a/components/cronet/ios/cronet_environment.h b/components/cronet/ios/cronet_environment.h
deleted file mode 100644
index 4351dc5f2c541..0000000000000
--- a/components/cronet/ios/cronet_environment.h
+++ /dev/null
@@ -1,218 +0,0 @@
-// Copyright 2016 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_IOS_CRONET_ENVIRONMENT_H_
-#define COMPONENTS_CRONET_IOS_CRONET_ENVIRONMENT_H_
-
-#include <list>
-#include <memory>
-#include <string>
-#include <utility>
-#include <vector>
-
-#include "base/files/file_path.h"
-#include "base/files/scoped_file.h"
-#include "base/strings/sys_string_conversions.h"
-#include "base/synchronization/waitable_event.h"
-#include "base/threading/thread.h"
-#include "base/values.h"
-#include "components/cronet/url_request_context_config.h"
-#include "components/cronet/version.h"
-#include "net/cert/cert_verifier.h"
-#include "net/url_request/url_request_context.h"
-#include "net/url_request/url_request_context_getter.h"
-
-namespace base {
-class WaitableEvent;
-}  // namespace base
-
-namespace net {
-class CookieStore;
-class HttpNetworkSession;
-class NetLog;
-class FileNetLogObserver;
-}  // namespace net
-
-namespace cronet {
-class CronetPrefsManager;
-
-// CronetEnvironment contains all the network stack configuration
-// and initialization.
-class CronetEnvironment {
- public:
-  using PkpVector = std::vector<std::unique_ptr<URLRequestContextConfig::Pkp>>;
-
-  // A special thread priority value that indicates that the thread priority
-  // should not be altered when a thread is created.
-  static const double kKeepDefaultThreadPriority;
-
-  // |user_agent| will be used to generate the user-agent if
-  // |user_agent_partial| is true, or will be used as the complete user-agent
-  // otherwise.
-  CronetEnvironment(const std::string& user_agent, bool user_agent_partial);
-
-  CronetEnvironment(const CronetEnvironment&) = delete;
-  CronetEnvironment& operator=(const CronetEnvironment&) = delete;
-
-  ~CronetEnvironment();
-
-  // Starts this instance of Cronet environment.
-  void Start();
-
-  // The full user-agent.
-  std::string user_agent();
-
-  // Get global UMA histogram deltas.
-  std::vector<uint8_t> GetHistogramDeltas();
-
-  // Creates a new net log (overwrites existing file with this name). If
-  // actively logging, this call is ignored.
-  bool StartNetLog(base::FilePath::StringType file_name, bool log_bytes);
-  // Stops logging and flushes file. If not currently logging this call is
-  // ignored.
-  void StopNetLog();
-
-  void AddQuicHint(const std::string& host, int port, int alternate_port);
-
-  // Setters and getters for |http2_enabled_|, |quic_enabled_|, and
-  // |brotli_enabled| These only have any effect
-  // before Start() is called.
-  void set_http2_enabled(bool enabled) { http2_enabled_ = enabled; }
-  void set_quic_enabled(bool enabled) { quic_enabled_ = enabled; }
-  void set_brotli_enabled(bool enabled) { brotli_enabled_ = enabled; }
-
-  bool http2_enabled() const { return http2_enabled_; }
-  bool quic_enabled() const { return quic_enabled_; }
-  bool brotli_enabled() const { return brotli_enabled_; }
-
-  void set_accept_language(const std::string& accept_language) {
-    accept_language_ = accept_language;
-  }
-
-  void set_mock_cert_verifier(
-      std::unique_ptr<net::CertVerifier> mock_cert_verifier) {
-    mock_cert_verifier_ = std::move(mock_cert_verifier);
-  }
-
-  void set_http_cache(URLRequestContextConfig::HttpCacheType http_cache) {
-    http_cache_ = http_cache;
-  }
-
-  void set_experimental_options(const std::string& experimental_options) {
-    experimental_options_ = experimental_options;
-  }
-
-  void SetHostResolverRules(const std::string& host_resolver_rules);
-
-  void set_ssl_key_log_file_name(const std::string& ssl_key_log_file_name) {
-    ssl_key_log_file_name_ = ssl_key_log_file_name;
-  }
-
-  void set_pkp_list(PkpVector pkp_list) { pkp_list_ = std::move(pkp_list); }
-
-  void set_enable_public_key_pinning_bypass_for_local_trust_anchors(
-      bool enable) {
-    enable_pkp_bypass_for_local_trust_anchors_ = enable;
-  }
-
-  // Sets priority of the network thread. The |priority| should be a
-  // floating point number between 0.0 to 1.0, where 1.0 is highest priority.
-  void SetNetworkThreadPriority(double priority);
-
-  // Returns the URLRequestContext associated with this object.
-  net::URLRequestContext* GetURLRequestContext() const;
-
-  // Return the URLRequestContextGetter associated with this object.
-  net::URLRequestContextGetter* GetURLRequestContextGetter() const;
-
-  // The methods below are used for testing.
-  base::SingleThreadTaskRunner* GetFileThreadRunnerForTesting() const;
-  base::SingleThreadTaskRunner* GetNetworkThreadRunnerForTesting() const;
-
- private:
-  // Extends the base thread class to add the Cronet specific cleanup logic.
-  class CronetNetworkThread : public base::Thread {
-   public:
-    CronetNetworkThread(const std::string& name,
-                        cronet::CronetEnvironment* cronet_environment);
-
-    CronetNetworkThread(const CronetNetworkThread&) = delete;
-    CronetNetworkThread& operator=(const CronetNetworkThread&) = delete;
-
-   protected:
-    ~CronetNetworkThread() override;
-    void CleanUp() override;
-
-   private:
-    cronet::CronetEnvironment* const cronet_environment_;
-  };
-
-  // Performs initialization tasks that must happen on the network thread.
-  void InitializeOnNetworkThread();
-
-  // Returns the task runner for the network thread.
-  base::SingleThreadTaskRunner* GetNetworkThreadTaskRunner() const;
-
-  // Runs a closure on the network thread.
-  void PostToNetworkThread(const base::Location& from_here,
-                           base::OnceClosure task);
-
-  // Helper methods that start/stop net logging on the network thread.
-  void StartNetLogOnNetworkThread(const base::FilePath&, bool log_bytes);
-  void StopNetLogOnNetworkThread(base::WaitableEvent* log_stopped_event);
-
-  base::Value GetNetLogInfo() const;
-
-  // Returns the HttpNetworkSession object from the passed in
-  // URLRequestContext or NULL if none exists.
-  net::HttpNetworkSession* GetHttpNetworkSession(
-      net::URLRequestContext* context);
-
-  // Sets host resolver rules on the network_io_thread_.
-  void SetHostResolverRulesOnNetworkThread(const std::string& rules,
-                                           base::WaitableEvent* event);
-
-  // Sets priority of the network thread. This method should only be called
-  // on the network thread.
-  void SetNetworkThreadPriorityOnNetworkThread(double priority);
-
-  std::string getDefaultQuicUserAgentId() const;
-
-  // Prepares the Cronet environment to be destroyed. The method must be
-  // executed on the network thread. No other tasks should be posted to the
-  // network thread after calling this method.
-  void CleanUpOnNetworkThread();
-
-  bool http2_enabled_;
-  bool quic_enabled_;
-  bool brotli_enabled_;
-  std::string accept_language_;
-  std::string experimental_options_;
-  // Effective experimental options. Kept for NetLog.
-  base::Value::Dict effective_experimental_options_;
-  std::string ssl_key_log_file_name_;
-  URLRequestContextConfig::HttpCacheType http_cache_;
-  PkpVector pkp_list_;
-
-  std::list<net::HostPortPair> quic_hints_;
-
-  std::unique_ptr<base::Thread> network_io_thread_;
-  std::unique_ptr<base::Thread> file_thread_;
-  scoped_refptr<base::SequencedTaskRunner> pref_store_worker_pool_;
-  std::unique_ptr<net::CertVerifier> mock_cert_verifier_;
-  std::unique_ptr<net::CookieStore> cookie_store_;
-  std::unique_ptr<net::URLRequestContext> main_context_;
-  scoped_refptr<net::URLRequestContextGetter> main_context_getter_;
-  std::string user_agent_;
-  bool user_agent_partial_;
-  net::NetLog* net_log_;
-  std::unique_ptr<net::FileNetLogObserver> file_net_log_observer_;
-  bool enable_pkp_bypass_for_local_trust_anchors_;
-  double network_thread_priority_;
-  std::unique_ptr<CronetPrefsManager> cronet_prefs_manager_;
-};
-
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_IOS_CRONET_ENVIRONMENT_H_
diff --git a/components/cronet/ios/cronet_environment.mm b/components/cronet/ios/cronet_environment.mm
deleted file mode 100644
index a0c595a7213d5..0000000000000
--- a/components/cronet/ios/cronet_environment.mm
+++ /dev/null
@@ -1,510 +0,0 @@
-// Copyright 2016 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/ios/cronet_environment.h"
-
-#include <atomic>
-#include <utility>
-
-#include "base/bind.h"
-#include "base/command_line.h"
-#include "base/feature_list.h"
-#include "base/files/file_path.h"
-#include "base/files/file_util.h"
-#include "base/files/scoped_file.h"
-#include "base/mac/foundation_util.h"
-#include "base/message_loop/message_pump_type.h"
-#include "base/path_service.h"
-#include "base/synchronization/waitable_event.h"
-#include "base/task/single_thread_task_runner.h"
-#include "base/threading/thread_restrictions.h"
-#include "components/cronet/cronet_buildflags.h"
-#include "components/cronet/cronet_global_state.h"
-#include "components/cronet/cronet_prefs_manager.h"
-#include "components/metrics/library_support/histogram_manager.h"
-#include "components/prefs/pref_filter.h"
-#include "ios/net/cookies/cookie_store_ios.h"
-#include "ios/net/cookies/cookie_store_ios_client.h"
-#include "ios/web/common/user_agent.h"
-#include "ios/web/public/init/ios_global_state.h"
-#include "ios/web/public/init/ios_global_state_configuration.h"
-#include "net/base/http_user_agent_settings.h"
-#include "net/base/network_change_notifier.h"
-#include "net/base/network_isolation_key.h"
-#include "net/base/url_util.h"
-#include "net/cert/cert_verifier.h"
-#include "net/dns/host_resolver.h"
-#include "net/dns/mapped_host_resolver.h"
-#include "net/http/http_network_session.h"
-#include "net/http/http_server_properties.h"
-#include "net/http/http_transaction_factory.h"
-#include "net/http/http_util.h"
-#include "net/http/transport_security_state.h"
-#include "net/log/file_net_log_observer.h"
-#include "net/log/net_log.h"
-#include "net/log/net_log_capture_mode.h"
-#include "net/log/net_log_util.h"
-#include "net/proxy_resolution/proxy_resolution_service.h"
-#include "net/socket/ssl_client_socket.h"
-#include "net/ssl/ssl_key_logger_impl.h"
-#include "net/third_party/quiche/src/quiche/quic/core/quic_versions.h"
-#include "net/url_request/url_request_context.h"
-#include "net/url_request/url_request_context_builder.h"
-#include "url/scheme_host_port.h"
-#include "url/url_util.h"
-
-#if !defined(__has_feature) || !__has_feature(objc_arc)
-#error "This file requires ARC support."
-#endif
-
-namespace {
-
-// Request context getter for Cronet.
-class CronetURLRequestContextGetter : public net::URLRequestContextGetter {
- public:
-  CronetURLRequestContextGetter(
-      cronet::CronetEnvironment* environment,
-      const scoped_refptr<base::SingleThreadTaskRunner>& task_runner)
-      : environment_(environment), task_runner_(task_runner) {}
-
-  CronetURLRequestContextGetter(const CronetURLRequestContextGetter&) = delete;
-  CronetURLRequestContextGetter& operator=(
-      const CronetURLRequestContextGetter&) = delete;
-
-  net::URLRequestContext* GetURLRequestContext() override {
-    DCHECK(environment_);
-    return environment_->GetURLRequestContext();
-  }
-
-  scoped_refptr<base::SingleThreadTaskRunner> GetNetworkTaskRunner()
-      const override {
-    return task_runner_;
-  }
-
- private:
-  // Must be called on the IO thread.
-  ~CronetURLRequestContextGetter() override {}
-
-  cronet::CronetEnvironment* environment_;
-  scoped_refptr<base::SingleThreadTaskRunner> task_runner_;
-};
-
-// Cronet implementation of net::CookieStoreIOSClient.
-// Used to provide Cronet Network IO TaskRunner.
-class CronetCookieStoreIOSClient : public net::CookieStoreIOSClient {
- public:
-  CronetCookieStoreIOSClient(
-      const scoped_refptr<base::SequencedTaskRunner>& task_runner)
-      : task_runner_(task_runner) {}
-
-  CronetCookieStoreIOSClient(const CronetCookieStoreIOSClient&) = delete;
-  CronetCookieStoreIOSClient& operator=(const CronetCookieStoreIOSClient&) =
-      delete;
-
-  scoped_refptr<base::SequencedTaskRunner> GetTaskRunner() const override {
-    return task_runner_;
-  }
-
- private:
-  ~CronetCookieStoreIOSClient() override {}
-
-  scoped_refptr<base::SequencedTaskRunner> task_runner_;
-};
-
-void SignalEvent(base::WaitableEvent* event) {
-  event->Signal();
-}
-
-// TODO(eroman): Creating the file(s) for a netlog is an internal detail for
-// FileNetLogObsever. This code assumes that the unbounded format is being used,
-// which writes a single file at |path| (creating or overwriting it).
-bool IsNetLogPathValid(const base::FilePath& path) {
-  base::ScopedFILE file(base::OpenFile(path, "w"));
-  return !!file;
-}
-
-}  // namespace
-
-namespace cronet {
-
-const double CronetEnvironment::kKeepDefaultThreadPriority = -1;
-
-base::SingleThreadTaskRunner* CronetEnvironment::GetNetworkThreadTaskRunner()
-    const {
-  if (network_io_thread_) {
-    return network_io_thread_->task_runner().get();
-  }
-  return ios_global_state::GetSharedNetworkIOThreadTaskRunner().get();
-}
-
-void CronetEnvironment::PostToNetworkThread(const base::Location& from_here,
-                                            base::OnceClosure task) {
-  GetNetworkThreadTaskRunner()->PostTask(from_here, std::move(task));
-}
-
-net::URLRequestContext* CronetEnvironment::GetURLRequestContext() const {
-  return main_context_.get();
-}
-
-net::URLRequestContextGetter* CronetEnvironment::GetURLRequestContextGetter()
-    const {
-  return main_context_getter_.get();
-}
-
-bool CronetEnvironment::StartNetLog(base::FilePath::StringType file_name,
-                                    bool log_bytes) {
-  if (file_name.empty())
-    return false;
-
-  base::FilePath path(file_name);
-  if (!IsNetLogPathValid(path)) {
-    LOG(ERROR) << "Can not start NetLog to " << path.value() << ": "
-               << strerror(errno);
-    return false;
-  }
-
-  LOG(WARNING) << "Starting NetLog to " << path.value();
-  PostToNetworkThread(
-      FROM_HERE, base::BindOnce(&CronetEnvironment::StartNetLogOnNetworkThread,
-                                base::Unretained(this), path, log_bytes));
-
-  return true;
-}
-
-void CronetEnvironment::StartNetLogOnNetworkThread(const base::FilePath& path,
-                                                   bool log_bytes) {
-  DCHECK(net_log_);
-
-  if (file_net_log_observer_)
-    return;
-
-  net::NetLogCaptureMode capture_mode =
-      log_bytes ? net::NetLogCaptureMode::kEverything
-                : net::NetLogCaptureMode::kDefault;
-
-  file_net_log_observer_ =
-      net::FileNetLogObserver::CreateUnbounded(path, capture_mode, nullptr);
-  file_net_log_observer_->StartObserving(main_context_->net_log());
-  LOG(WARNING) << "Started NetLog";
-}
-
-void CronetEnvironment::StopNetLog() {
-  base::WaitableEvent log_stopped_event(
-      base::WaitableEvent::ResetPolicy::MANUAL,
-      base::WaitableEvent::InitialState::NOT_SIGNALED);
-  PostToNetworkThread(
-      FROM_HERE, base::BindOnce(&CronetEnvironment::StopNetLogOnNetworkThread,
-                                base::Unretained(this), &log_stopped_event));
-  log_stopped_event.Wait();
-}
-
-void CronetEnvironment::StopNetLogOnNetworkThread(
-    base::WaitableEvent* log_stopped_event) {
-  if (file_net_log_observer_) {
-    DLOG(WARNING) << "Stopped NetLog.";
-    file_net_log_observer_->StopObserving(
-        base::Value::ToUniquePtrValue(GetNetLogInfo()),
-        base::BindOnce(&SignalEvent, log_stopped_event));
-    file_net_log_observer_.reset();
-  } else {
-    log_stopped_event->Signal();
-  }
-}
-
-base::Value CronetEnvironment::GetNetLogInfo() const {
-  base::Value::Dict net_info = net::GetNetInfo(main_context_.get());
-  if (!effective_experimental_options_.empty()) {
-    net_info.Set("cronetExperimentalParams",
-                 effective_experimental_options_.Clone());
-  }
-  return base::Value(std::move(net_info));
-}
-
-net::HttpNetworkSession* CronetEnvironment::GetHttpNetworkSession(
-    net::URLRequestContext* context) {
-  DCHECK(context);
-  if (!context->http_transaction_factory())
-    return nullptr;
-
-  return context->http_transaction_factory()->GetSession();
-}
-
-void CronetEnvironment::AddQuicHint(const std::string& host,
-                                    int port,
-                                    int alternate_port) {
-  DCHECK(port == alternate_port);
-  quic_hints_.push_back(net::HostPortPair(host, port));
-}
-
-CronetEnvironment::CronetEnvironment(const std::string& user_agent,
-                                     bool user_agent_partial)
-    : http2_enabled_(false),
-      quic_enabled_(true),
-      brotli_enabled_(false),
-      http_cache_(URLRequestContextConfig::HttpCacheType::DISK),
-      user_agent_(user_agent),
-      user_agent_partial_(user_agent_partial),
-      net_log_(net::NetLog::Get()),
-      enable_pkp_bypass_for_local_trust_anchors_(true),
-      network_thread_priority_(kKeepDefaultThreadPriority) {}
-
-void CronetEnvironment::Start() {
-  // Threads setup.
-  file_thread_.reset(new base::Thread("Chrome File Thread"));
-  file_thread_->StartWithOptions(
-      base::Thread::Options(base::MessagePumpType::IO, 0));
-  // Fetching the task_runner will create the shared thread if necessary.
-  scoped_refptr<base::SingleThreadTaskRunner> task_runner =
-      ios_global_state::GetSharedNetworkIOThreadTaskRunner();
-  if (!task_runner) {
-    network_io_thread_.reset(
-        new CronetNetworkThread("Chrome Network IO Thread", this));
-    network_io_thread_->StartWithOptions(
-        base::Thread::Options(base::MessagePumpType::IO, 0));
-  }
-
-  net::SetCookieStoreIOSClient(new CronetCookieStoreIOSClient(
-      CronetEnvironment::GetNetworkThreadTaskRunner()));
-
-  main_context_getter_ = new CronetURLRequestContextGetter(
-      this, CronetEnvironment::GetNetworkThreadTaskRunner());
-  std::atomic_thread_fence(std::memory_order_seq_cst);
-  PostToNetworkThread(
-      FROM_HERE, base::BindOnce(&CronetEnvironment::InitializeOnNetworkThread,
-                                base::Unretained(this)));
-}
-
-void CronetEnvironment::CleanUpOnNetworkThread() {
-  // TODO(lilyhoughton) make unregistering of this work.
-  // net::HTTPProtocolHandlerDelegate::SetInstance(nullptr);
-
-  // TODO(lilyhoughton) this can only be run once, so right now leaking it.
-  // Should be be called when the _last_ CronetEnvironment is destroyed.
-  // base::ThreadPoolInstance* ts = base::ThreadPoolInstance::Get();
-  // if (ts)
-  //  ts->Shutdown();
-
-  if (cronet_prefs_manager_) {
-    cronet_prefs_manager_->PrepareForShutdown();
-  }
-
-  // TODO(lilyhoughton) this should be smarter about making sure there are no
-  // pending requests, etc.
-  main_context_.reset();
-
-  // cronet_prefs_manager_ should be deleted on the network thread.
-  cronet_prefs_manager_.reset();
-}
-
-CronetEnvironment::~CronetEnvironment() {
-  // Deleting a thread blocks the current thread and waits until all pending
-  // tasks are completed.
-  network_io_thread_.reset();
-  file_thread_.reset();
-}
-
-void CronetEnvironment::InitializeOnNetworkThread() {
-  DCHECK(GetNetworkThreadTaskRunner()->BelongsToCurrentThread());
-  base::DisallowBlocking();
-
-  static bool ssl_key_log_file_set = false;
-  if (!ssl_key_log_file_set && !ssl_key_log_file_name_.empty()) {
-    ssl_key_log_file_set = true;
-    base::FilePath ssl_key_log_file(ssl_key_log_file_name_);
-    net::SSLClientSocket::SetSSLKeyLogger(
-        std::make_unique<net::SSLKeyLoggerImpl>(ssl_key_log_file));
-  }
-
-  if (user_agent_partial_)
-    user_agent_ = web::BuildMobileUserAgent(user_agent_);
-
-  // Cache
-  base::FilePath storage_path;
-  if (!base::PathService::Get(base::DIR_CACHE, &storage_path))
-    return;
-  storage_path = storage_path.Append(FILE_PATH_LITERAL("cronet"));
-
-  URLRequestContextConfigBuilder context_config_builder;
-  context_config_builder.enable_quic = quic_enabled_;   // Enable QUIC.
-  context_config_builder.quic_user_agent_id =
-      getDefaultQuicUserAgentId();                      // QUIC User Agent ID.
-  context_config_builder.enable_spdy = http2_enabled_;  // Enable HTTP/2.
-  context_config_builder.http_cache = http_cache_;      // Set HTTP cache.
-  context_config_builder.storage_path =
-      storage_path.value();  // Storage path for http cache and prefs storage.
-  context_config_builder.accept_language =
-      accept_language_;  // Accept-Language request header field.
-  context_config_builder.user_agent =
-      user_agent_;  // User-Agent request header field.
-  context_config_builder.experimental_options =
-      experimental_options_;  // Set experimental Cronet options.
-  context_config_builder.mock_cert_verifier = std::move(
-      mock_cert_verifier_);  // MockCertVerifier to use for testing purposes.
-  if (network_thread_priority_ != kKeepDefaultThreadPriority)
-    context_config_builder.network_thread_priority = network_thread_priority_;
-  std::unique_ptr<URLRequestContextConfig> config =
-      context_config_builder.Build();
-
-  config->pkp_list = std::move(pkp_list_);
-
-  net::URLRequestContextBuilder context_builder;
-
-  // Explicitly disable the persister for Cronet to avoid persistence of dynamic
-  // HPKP.  This is a safety measure ensuring that nobody enables the
-  // persistence of HPKP by specifying transport_security_persister_file_path in
-  // the future.
-  context_builder.set_transport_security_persister_file_path(base::FilePath());
-
-  config->ConfigureURLRequestContextBuilder(&context_builder);
-
-  effective_experimental_options_ =
-      config->effective_experimental_options.Clone();
-
-  // TODO(crbug.com/934402): Use a shared HostResolverManager instead of a
-  // global HostResolver.
-  std::unique_ptr<net::MappedHostResolver> mapped_host_resolver(
-      new net::MappedHostResolver(
-          net::HostResolver::CreateStandaloneResolver(nullptr)));
-
-  if (!config->storage_path.empty()) {
-    cronet_prefs_manager_ = std::make_unique<CronetPrefsManager>(
-        config->storage_path, GetNetworkThreadTaskRunner(),
-        file_thread_->task_runner(), false /* nqe */, false /* host_cache */,
-        net_log_, &context_builder);
-  }
-
-  context_builder.set_host_resolver(std::move(mapped_host_resolver));
-
-  // TODO(690969): This behavior matches previous behavior of CookieStoreIOS in
-  // CrNet, but should change to adhere to App's Cookie Accept Policy instead
-  // of changing it.
-  [[NSHTTPCookieStorage sharedHTTPCookieStorage]
-      setCookieAcceptPolicy:NSHTTPCookieAcceptPolicyAlways];
-  auto cookie_store = std::make_unique<net::CookieStoreIOS>(
-      [NSHTTPCookieStorage sharedHTTPCookieStorage], nullptr /* net_log */);
-  context_builder.SetCookieStore(std::move(cookie_store));
-
-  context_builder.set_enable_brotli(brotli_enabled_);
-  main_context_ = context_builder.Build();
-
-  for (const auto& quic_hint : quic_hints_) {
-    url::CanonHostInfo host_info;
-    std::string canon_host(net::CanonicalizeHost(quic_hint.host(), &host_info));
-    if (!host_info.IsIPAddress() &&
-        !net::IsCanonicalizedHostCompliant(canon_host)) {
-      LOG(ERROR) << "Invalid QUIC hint host: " << quic_hint.host();
-      continue;
-    }
-
-    net::AlternativeService alternative_service(net::kProtoQUIC, "",
-                                                quic_hint.port());
-
-    url::SchemeHostPort quic_hint_server("https", quic_hint.host(),
-                                         quic_hint.port());
-    main_context_->http_server_properties()->SetQuicAlternativeService(
-        quic_hint_server, net::NetworkAnonymizationKey(), alternative_service,
-        base::Time::Max(), quic::ParsedQuicVersionVector());
-  }
-
-  main_context_->transport_security_state()
-      ->SetEnablePublicKeyPinningBypassForLocalTrustAnchors(
-          enable_pkp_bypass_for_local_trust_anchors_);
-
-  // Iterate trhough PKP configuration for every host.
-  for (const auto& pkp : config->pkp_list) {
-    // Add the host pinning.
-    main_context_->transport_security_state()->AddHPKP(
-        pkp->host, pkp->expiration_date, pkp->include_subdomains,
-        pkp->pin_hashes, GURL::EmptyGURL());
-  }
-}
-
-void CronetEnvironment::SetNetworkThreadPriority(double priority) {
-  DCHECK_LE(priority, 1.0);
-  DCHECK_GE(priority, 0.0);
-  network_thread_priority_ = priority;
-  if (network_io_thread_) {
-    PostToNetworkThread(
-        FROM_HERE,
-        base::BindRepeating(
-            &CronetEnvironment::SetNetworkThreadPriorityOnNetworkThread,
-            base::Unretained(this), priority));
-  }
-}
-
-std::string CronetEnvironment::user_agent() {
-  const net::HttpUserAgentSettings* user_agent_settings =
-      main_context_->http_user_agent_settings();
-  if (!user_agent_settings) {
-    return nullptr;
-  }
-
-  return user_agent_settings->GetUserAgent();
-}
-
-std::vector<uint8_t> CronetEnvironment::GetHistogramDeltas() {
-  std::vector<uint8_t> data;
-#if BUILDFLAG(DISABLE_HISTOGRAM_SUPPORT)
-  NOTREACHED() << "Histogram support is disabled";
-#else   // BUILDFLAG(DISABLE_HISTOGRAM_SUPPORT)
-  if (!metrics::HistogramManager::GetInstance()->GetDeltas(&data))
-    return std::vector<uint8_t>();
-#endif  // BUILDFLAG(DISABLE_HISTOGRAM_SUPPORT)
-  return data;
-}
-
-void CronetEnvironment::SetHostResolverRules(const std::string& rules) {
-  base::WaitableEvent event(base::WaitableEvent::ResetPolicy::AUTOMATIC,
-                            base::WaitableEvent::InitialState::NOT_SIGNALED);
-  PostToNetworkThread(
-      FROM_HERE,
-      base::BindOnce(&CronetEnvironment::SetHostResolverRulesOnNetworkThread,
-                     base::Unretained(this), rules, &event));
-  event.Wait();
-}
-
-void CronetEnvironment::SetHostResolverRulesOnNetworkThread(
-    const std::string& rules,
-    base::WaitableEvent* event) {
-  static_cast<net::MappedHostResolver*>(main_context_->host_resolver())
-      ->SetRulesFromString(rules);
-  event->Signal();
-}
-
-void CronetEnvironment::SetNetworkThreadPriorityOnNetworkThread(
-    double priority) {
-  DCHECK(GetNetworkThreadTaskRunner()->BelongsToCurrentThread());
-  cronet::SetNetworkThreadPriorityOnNetworkThread(priority);
-}
-
-std::string CronetEnvironment::getDefaultQuicUserAgentId() const {
-  return base::SysNSStringToUTF8([[NSBundle mainBundle]
-             objectForInfoDictionaryKey:@"CFBundleDisplayName"]) +
-         " Cronet/" + CRONET_VERSION;
-}
-
-base::SingleThreadTaskRunner* CronetEnvironment::GetFileThreadRunnerForTesting()
-    const {
-  return file_thread_->task_runner().get();
-}
-
-base::SingleThreadTaskRunner*
-CronetEnvironment::GetNetworkThreadRunnerForTesting() const {
-  return GetNetworkThreadTaskRunner();
-}
-
-CronetEnvironment::CronetNetworkThread::CronetNetworkThread(
-    const std::string& name,
-    cronet::CronetEnvironment* cronet_environment)
-    : base::Thread(name), cronet_environment_(cronet_environment) {}
-
-CronetEnvironment::CronetNetworkThread::~CronetNetworkThread() {
-  Stop();
-}
-
-void CronetEnvironment::CronetNetworkThread::CleanUp() {
-  cronet_environment_->CleanUpOnNetworkThread();
-}
-
-}  // namespace cronet
diff --git a/components/cronet/ios/cronet_global_state_ios.mm b/components/cronet/ios/cronet_global_state_ios.mm
deleted file mode 100644
index 3e215097596d4..0000000000000
--- a/components/cronet/ios/cronet_global_state_ios.mm
+++ /dev/null
@@ -1,94 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/cronet_global_state.h"
-
-#import <Foundation/Foundation.h>
-
-#include <utility>
-
-#include "base/callback.h"
-#include "ios/web/common/user_agent.h"
-#include "ios/web/public/init/ios_global_state.h"
-#include "ios/web/public/init/ios_global_state_configuration.h"
-#include "net/proxy_resolution/proxy_config_service.h"
-#include "net/proxy_resolution/proxy_resolution_service.h"
-
-#if !defined(__has_feature) || !__has_feature(objc_arc)
-#error "This file requires ARC support."
-#endif
-
-namespace {
-
-void InitializeOnMainThread() {
-  // This method must be called once from the main thread.
-  DCHECK_EQ([NSThread currentThread], [NSThread mainThread]);
-
-  ios_global_state::CreateParams create_params;
-  create_params.install_at_exit_manager = true;
-  ios_global_state::Create(create_params);
-  ios_global_state::StartThreadPool();
-
-  ios_global_state::BuildSingleThreadTaskExecutor();
-  ios_global_state::CreateNetworkChangeNotifier();
-}
-
-}  // namespace
-
-namespace cronet {
-
-bool OnInitThread() {
-  return [NSThread isMainThread] == YES;
-}
-
-void PostTaskToInitThread(const base::Location& posted_from,
-                          base::OnceClosure task) {
-  __block base::OnceClosure block_task(std::move(task));
-  if (!OnInitThread()) {
-    dispatch_async(dispatch_get_main_queue(), ^(void) {
-      std::move(block_task).Run();
-    });
-  } else {
-    std::move(block_task).Run();
-  }
-}
-
-void EnsureInitialized() {
-  static dispatch_once_t onceToken;
-  dispatch_once(&onceToken, ^{
-    if (!OnInitThread()) {
-      dispatch_sync(dispatch_get_main_queue(), ^(void) {
-        InitializeOnMainThread();
-      });
-    } else {
-      InitializeOnMainThread();
-    }
-  });
-}
-
-std::unique_ptr<net::ProxyConfigService> CreateProxyConfigService(
-    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner) {
-  return nullptr;
-}
-
-std::unique_ptr<net::ProxyResolutionService> CreateProxyResolutionService(
-    std::unique_ptr<net::ProxyConfigService> proxy_config_service,
-    net::NetLog* net_log) {
-  return nullptr;
-}
-
-// Creates default User-Agent request value, combining optional
-// |partial_user_agent| with system-dependent values.
-std::string CreateDefaultUserAgent(const std::string& partial_user_agent) {
-  return web::BuildMobileUserAgent(partial_user_agent);
-}
-
-void SetNetworkThreadPriorityOnNetworkThread(double priority) {
-  DCHECK_LE(priority, 1.0);
-  DCHECK_GE(priority, 0.0);
-  if (priority >= 0.0 && priority <= 1.0)
-    [NSThread setThreadPriority:priority];
-}
-
-}  // namespace cronet
diff --git a/components/cronet/ios/cronet_metrics.h b/components/cronet/ios/cronet_metrics.h
deleted file mode 100644
index 19f7b2604c051..0000000000000
--- a/components/cronet/ios/cronet_metrics.h
+++ /dev/null
@@ -1,112 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_IOS_CRONET_METRICS_H_
-#define COMPONENTS_CRONET_IOS_CRONET_METRICS_H_
-
-#import <Foundation/Foundation.h>
-
-#include "components/grpc_support/include/bidirectional_stream_c.h"
-#import "ios/net/crn_http_protocol_handler.h"
-#include "net/http/http_network_session.h"
-
-// These are internal versions of NSURLSessionTaskTransactionMetrics and
-// NSURLSessionTaskMetrics, defined primarily so that Cronet can
-// initialize them and set their properties (the iOS classes are readonly).
-
-// The correspondences are
-//   CronetTransactionMetrics -> NSURLSessionTaskTransactionMetrics
-//   CronetMetrics -> NSURLSessionTaskMetrics
-
-FOUNDATION_EXPORT GRPC_SUPPORT_EXPORT NS_AVAILABLE_IOS(10.0)
-@interface CronetTransactionMetrics : NSURLSessionTaskTransactionMetrics
-
-// All of the below redefined as readwrite.
-
-// This is set to [task currentRequest].
-@property(copy, readwrite) NSURLRequest* request;
-// This is set to [task response].
-@property(copy, readwrite) NSURLResponse* response;
-
-// This is set to net::LoadTimingInfo::request_start_time.
-@property(copy, readwrite) NSDate* fetchStartDate;
-// This is set to net::LoadTimingInfo::ConnectTiming::dns_start.
-@property(copy, readwrite) NSDate* domainLookupStartDate;
-// This is set to net::LoadTimingInfo::ConnectTiming::dns_end.
-@property(copy, readwrite) NSDate* domainLookupEndDate;
-// This is set to net::LoadTimingInfo::ConnectTiming::connect_start.
-@property(copy, readwrite) NSDate* connectStartDate;
-// This is set to net::LoadTimingInfo::ConnectTiming::ssl_start.
-@property(copy, readwrite) NSDate* secureConnectionStartDate;
-// This is set to net::LoadTimingInfo::ConnectTiming::ssl_end.
-@property(copy, readwrite) NSDate* secureConnectionEndDate;
-// This is set to net::LoadTimingInfo::ConnectTiming::connect_end.
-@property(copy, readwrite) NSDate* connectEndDate;
-// This is set to net::LoadTimingInfo::sent_start.
-@property(copy, readwrite) NSDate* requestStartDate;
-// This is set to net::LoadTimingInfo::send_end.
-@property(copy, readwrite) NSDate* requestEndDate;
-// This is set to net::LoadTimingInfo::receive_headers_end.
-@property(copy, readwrite) NSDate* responseStartDate;
-// This is set to net::MetricsDelegate::Metrics::response_end_time.
-@property(copy, readwrite) NSDate* responseEndDate;
-
-// This is set to net::HttpResponseInfo::connection_info.
-@property(copy, readwrite) NSString* networkProtocolName;
-// This is set to YES if net::HttpResponseInfo::proxy_server.is_direct()
-// returns false.
-@property(assign, readwrite, getter=isProxyConnection) BOOL proxyConnection;
-// This is set to YES if net::LoadTimingInfo::ConnectTiming::conect_start is
-// null.
-@property(assign, readwrite, getter=isReusedConnection) BOOL reusedConnection;
-// This is set to LocalCache if net::HttpResponseInfo::was_cached is true, set
-// to ServerPush if net::LoadTimingInfo::push_start is non-null, and set to
-// NetworkLoad otherwise.
-@property(assign, readwrite)
-    NSURLSessionTaskMetricsResourceFetchType resourceFetchType;
-
-- (NSString*)description;
-
-@end
-
-// This is an internal version of NSURLSessionTaskMetrics - see comment above
-// CronetTransactionMetrics.
-NS_AVAILABLE_IOS(10.0) @interface CronetMetrics : NSURLSessionTaskMetrics
-// Redefined as readwrite.
-@property(copy, readwrite)
-    NSArray<NSURLSessionTaskTransactionMetrics*>* transactionMetrics;
-@end
-
-namespace cronet {
-
-// net::MetricsDelegate for Cronet.
-class CronetMetricsDelegate : public net::MetricsDelegate {
- public:
-  using Metrics = net::MetricsDelegate::Metrics;
-
-  CronetMetricsDelegate() {}
-  void OnStartNetRequest(NSURLSessionTask* task) override;
-  void OnStopNetRequest(std::unique_ptr<Metrics> metrics) override;
-
-  // Returns the metrics collected for a specific task (removing that task's
-  // entry from the map in the process).
-  // It is called exactly once by the swizzled delegate proxy (see below),
-  // uses it to retrieve metrics data collected by net/ and pass them on to
-  // the client. If there is no metrics data for the passed task, this returns
-  // nullptr.
-  static std::unique_ptr<Metrics> MetricsForTask(NSURLSessionTask* task);
-
-  // Used by tests to query the size of the |gTaskMetricsMap| map.
-  static size_t GetMetricsMapSize();
-};
-
-// This is the swizzling function that Cronet (in its startInternal
-// method) calls to inject the proxy delegate into iOS networking API and
-// intercept didFinishCollectingMetrics to replace the (empty) iOS metrics data
-// with metrics data from net.
-void SwizzleSessionWithConfiguration();
-
-}  // namespace cronet
-
-#endif // COMPONENTS_CRONET_IOS_CRONET_METRICS_H_
diff --git a/components/cronet/ios/cronet_metrics.mm b/components/cronet/ios/cronet_metrics.mm
deleted file mode 100644
index 3546bc8c42373..0000000000000
--- a/components/cronet/ios/cronet_metrics.mm
+++ /dev/null
@@ -1,368 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import "components/cronet/ios/cronet_metrics.h"
-
-#include <objc/runtime.h>
-
-#include "base/lazy_instance.h"
-#include "base/strings/sys_string_conversions.h"
-
-@implementation CronetTransactionMetrics
-
-@synthesize request = _request;
-@synthesize response = _response;
-
-@synthesize fetchStartDate = _fetchStartDate;
-@synthesize domainLookupStartDate = _domainLookupStartDate;
-@synthesize domainLookupEndDate = _domainLookupEndDate;
-@synthesize connectStartDate = _connectStartDate;
-@synthesize secureConnectionStartDate = _secureConnectionStartDate;
-@synthesize secureConnectionEndDate = _secureConnectionEndDate;
-@synthesize connectEndDate = _connectEndDate;
-@synthesize requestStartDate = _requestStartDate;
-@synthesize requestEndDate = _requestEndDate;
-@synthesize responseStartDate = _responseStartDate;
-@synthesize responseEndDate = _responseEndDate;
-
-@synthesize networkProtocolName = _networkProtocolName;
-@synthesize proxyConnection = _proxyConnection;
-@synthesize reusedConnection = _reusedConnection;
-@synthesize resourceFetchType = _resourceFetchType;
-
-// The NSURLSessionTaskTransactionMetrics and NSURLSessionTaskMetrics classes
-// are not supposed to be extended.  Its default init method initialized an
-// internal class, and therefore needs to be overridden to explicitly
-// initialize (and return) an instance of this class.
-// The |self = old_self| swap is necessary because [super init] must be
-// assigned to self (or returned immediately), but in this case is returning
-// a value of the wrong type.
-
-- (instancetype)init {
-  id old_self = self;
-  self = [super init];
-  self = old_self;
-  return old_self;
-}
-
-- (NSString*)description {
-  return [NSString
-      stringWithFormat:
-          @""
-           "fetchStartDate: %@\n"
-           "domainLookupStartDate: %@\n"
-           "domainLookupEndDate: %@\n"
-           "connectStartDate: %@\n"
-           "secureConnectionStartDate: %@\n"
-           "secureConnectionEndDate: %@\n"
-           "connectEndDate: %@\n"
-           "requestStartDate: %@\n"
-           "requestEndDate: %@\n"
-           "responseStartDate: %@\n"
-           "responseEndDate: %@\n"
-           "networkProtocolName: %@\n"
-           "proxyConnection: %i\n"
-           "reusedConnection: %i\n"
-           "resourceFetchType: %lu\n",
-          [self fetchStartDate], [self domainLookupStartDate],
-          [self domainLookupEndDate], [self connectStartDate],
-          [self secureConnectionStartDate], [self secureConnectionEndDate],
-          [self connectEndDate], [self requestStartDate], [self requestEndDate],
-          [self responseStartDate], [self responseEndDate],
-          [self networkProtocolName], [self isProxyConnection],
-          [self isReusedConnection], (long)[self resourceFetchType]];
-}
-
-@end
-
-@implementation CronetMetrics
-
-@synthesize transactionMetrics = _transactionMetrics;
-
-- (instancetype)init {
-  id old_self = self;
-  self = [super init];
-  self = old_self;
-  return old_self;
-}
-
-@end
-
-namespace {
-
-using Metrics = net::MetricsDelegate::Metrics;
-
-// Synchronizes access to |gTaskMetricsMap|.
-base::LazyInstance<base::Lock>::Leaky gTaskMetricsMapLock =
-    LAZY_INSTANCE_INITIALIZER;
-
-// A global map that contains metrics information for pending URLSessionTasks.
-// The map has to be "leaky"; otherwise, it will be destroyed on the main thread
-// when the client app terminates. When the client app terminates, the network
-// thread may still be finishing some work that requires access to the map.
-base::LazyInstance<std::map<NSURLSessionTask*, std::unique_ptr<Metrics>>>::Leaky
-    gTaskMetricsMap = LAZY_INSTANCE_INITIALIZER;
-
-// Helper method that converts the ticks data found in LoadTimingInfo to an
-// NSDate value to be used in client-side data.
-NSDate* TicksToDate(const net::LoadTimingInfo& reference,
-                    const base::TimeTicks& ticks) {
-  if (ticks.is_null())
-    return nil;
-  base::Time ticks_since_1970 =
-      (reference.request_start_time + (ticks - reference.request_start));
-  return [NSDate dateWithTimeIntervalSince1970:ticks_since_1970.ToDoubleT()];
-}
-
-// Converts Metrics metrics data into CronetTransactionMetrics (which
-// importantly implements the NSURLSessionTaskTransactionMetrics API)
-CronetTransactionMetrics* NativeToIOSMetrics(Metrics& metrics)
-    NS_AVAILABLE_IOS(10.0) {
-  NSURLSessionTask* task = metrics.task;
-  const net::LoadTimingInfo& load_timing_info = metrics.load_timing_info;
-  const net::HttpResponseInfo& response_info = metrics.response_info;
-
-  CronetTransactionMetrics* transaction_metrics =
-      [[CronetTransactionMetrics alloc] init];
-
-  [transaction_metrics setRequest:[task currentRequest]];
-  [transaction_metrics setResponse:[task response]];
-
-  transaction_metrics.fetchStartDate =
-      [NSDate dateWithTimeIntervalSince1970:load_timing_info.request_start_time
-                                                .ToDoubleT()];
-
-  transaction_metrics.domainLookupStartDate = TicksToDate(
-      load_timing_info, load_timing_info.connect_timing.domain_lookup_start);
-  transaction_metrics.domainLookupEndDate = TicksToDate(
-      load_timing_info, load_timing_info.connect_timing.domain_lookup_end);
-
-  transaction_metrics.connectStartDate = TicksToDate(
-      load_timing_info, load_timing_info.connect_timing.connect_start);
-  transaction_metrics.secureConnectionStartDate =
-      TicksToDate(load_timing_info, load_timing_info.connect_timing.ssl_start);
-  transaction_metrics.secureConnectionEndDate =
-      TicksToDate(load_timing_info, load_timing_info.connect_timing.ssl_end);
-  transaction_metrics.connectEndDate = TicksToDate(
-      load_timing_info, load_timing_info.connect_timing.connect_end);
-
-  transaction_metrics.requestStartDate =
-      TicksToDate(load_timing_info, load_timing_info.send_start);
-  transaction_metrics.requestEndDate =
-      TicksToDate(load_timing_info, load_timing_info.send_end);
-  transaction_metrics.responseStartDate =
-      TicksToDate(load_timing_info, load_timing_info.receive_headers_end);
-  transaction_metrics.responseEndDate = [NSDate
-      dateWithTimeIntervalSince1970:metrics.response_end_time.ToDoubleT()];
-
-  transaction_metrics.networkProtocolName =
-      base::SysUTF8ToNSString(net::HttpResponseInfo::ConnectionInfoToString(
-          response_info.connection_info));
-  transaction_metrics.proxyConnection = !response_info.proxy_server.is_direct();
-
-  // If the connect timing information is null, then there was no connection
-  // establish - i.e., one was reused.
-  // The corrolary to this is that, if reusedConnection is YES, then
-  // domainLookupStartDate, domainLookupEndDate, connectStartDate,
-  // connectEndDate, secureConnectionStartDate, and secureConnectionEndDate are
-  // all meaningless.
-  transaction_metrics.reusedConnection =
-      load_timing_info.connect_timing.connect_start.is_null();
-
-  // Guess the resource fetch type based on some heuristics about what data is
-  // present.
-  if (response_info.was_cached) {
-    transaction_metrics.resourceFetchType =
-        NSURLSessionTaskMetricsResourceFetchTypeLocalCache;
-  } else if (!load_timing_info.push_start.is_null()) {
-    transaction_metrics.resourceFetchType =
-        NSURLSessionTaskMetricsResourceFetchTypeServerPush;
-  } else {
-    transaction_metrics.resourceFetchType =
-        NSURLSessionTaskMetricsResourceFetchTypeNetworkLoad;
-  }
-
-  return transaction_metrics;
-}
-
-}  // namespace
-
-// A blank implementation of NSURLSessionDelegate that contains no methods.
-// It is used as a substitution for a session delegate when the client
-// either creates a session without a delegate or passes 'nil' as its value.
-@interface BlankNSURLSessionDelegate : NSObject<NSURLSessionDelegate>
-@end
-
-@implementation BlankNSURLSessionDelegate : NSObject
-@end
-
-// In order for Cronet to use the iOS metrics collection API, it needs to
-// replace the normal NSURLSession mechanism for calling into the delegate
-// (so it can provide metrics from net/, instead of the empty metrics that iOS
-// would provide otherwise.
-// To this end, Cronet's startInternal method replaces the NSURLSession's
-// sessionWithConfiguration method to inject a delegateProxy in between the
-// client delegate and iOS code.
-// This class represrents that delegateProxy. The important function is the
-// didFinishCollectingMetrics callback, which when a request is being handled
-// by Cronet, replaces the metrics collected by iOS with those connected by
-// Cronet.
-@interface URLSessionTaskDelegateProxy : NSProxy<NSURLSessionTaskDelegate>
-- (instancetype)initWithDelegate:(id<NSURLSessionDelegate>)delegate;
-@end
-
-@implementation URLSessionTaskDelegateProxy {
-  id<NSURLSessionDelegate> _delegate;
-  BOOL _respondsToDidFinishCollectingMetrics;
-}
-
-// As this is a proxy delegate, it needs to be initialized with a real client
-// delegate, to whom all of the method invocations will eventually get passed.
-- (instancetype)initWithDelegate:(id<NSURLSessionDelegate>)delegate {
-  // If the client passed a real delegate, use it. Otherwise, create a blank
-  // delegate that will handle method invocations that are forwarded by this
-  // proxy implementation. It is incorrect to forward calls to a 'nil' object.
-  if (delegate) {
-    _delegate = delegate;
-  } else {
-    _delegate = [[BlankNSURLSessionDelegate alloc] init];
-  }
-
-  _respondsToDidFinishCollectingMetrics =
-      [_delegate respondsToSelector:@selector
-                 (URLSession:task:didFinishCollectingMetrics:)];
-  return self;
-}
-
-// Any methods other than didFinishCollectingMetrics should be forwarded
-// directly to the client delegate.
-- (void)forwardInvocation:(NSInvocation*)invocation {
-  [invocation setTarget:_delegate];
-  [invocation invoke];
-}
-
-// And for that reason, URLSessionTaskDelegateProxy should act like it responds
-// to any of the selectors that the client delegate does.
-- (nullable NSMethodSignature*)methodSignatureForSelector:(SEL)sel {
-  return [(id)_delegate methodSignatureForSelector:sel];
-}
-
-// didFinishCollectionMetrics ultimately calls into the corresponding method on
-// the client delegate (if it exists), but first replaces the iOS-supplied
-// metrics with metrics collected by Cronet (if they exist).
-- (void)URLSession:(NSURLSession*)session
-                          task:(NSURLSessionTask*)task
-    didFinishCollectingMetrics:(NSURLSessionTaskMetrics*)metrics
-    NS_AVAILABLE_IOS(10.0) {
-  std::unique_ptr<Metrics> netMetrics =
-      cronet::CronetMetricsDelegate::MetricsForTask(task);
-
-  if (_respondsToDidFinishCollectingMetrics) {
-    if (netMetrics) {
-      CronetTransactionMetrics* cronetTransactionMetrics =
-          NativeToIOSMetrics(*netMetrics);
-
-      CronetMetrics* cronetMetrics = [[CronetMetrics alloc] init];
-      [cronetMetrics setTransactionMetrics:@[ cronetTransactionMetrics ]];
-
-      [(id<NSURLSessionTaskDelegate>)_delegate URLSession:session
-                                                     task:task
-                               didFinishCollectingMetrics:cronetMetrics];
-    } else {
-      // If there are no metrics is Cronet's task->metrics map, then Cronet is
-      // not handling this request, so just transparently pass iOS's collected
-      // metrics.
-      [(id<NSURLSessionTaskDelegate>)_delegate URLSession:session
-                                                     task:task
-                               didFinishCollectingMetrics:metrics];
-    }
-  }
-}
-
-- (BOOL)respondsToSelector:(SEL)aSelector {
-  // Regardless whether the underlying session delegate handles
-  // URLSession:task:didFinishCollectingMetrics: or not, always
-  // return 'YES' for that selector. Otherwise, the method may
-  // not be called, causing unbounded growth of |gTaskMetricsMap|.
-  if (aSelector == @selector(URLSession:task:didFinishCollectingMetrics:)) {
-    return YES;
-  }
-  return [_delegate respondsToSelector:aSelector];
-}
-
-@end
-
-@implementation NSURLSession (Cronet)
-
-+ (NSURLSession*)
-hookSessionWithConfiguration:(NSURLSessionConfiguration*)configuration
-                    delegate:(nullable id<NSURLSessionDelegate>)delegate
-               delegateQueue:(nullable NSOperationQueue*)queue {
-  URLSessionTaskDelegateProxy* delegate_proxy =
-      [[URLSessionTaskDelegateProxy alloc] initWithDelegate:delegate];
-  // Because the the method implementations are swapped, this is not a
-  // recursive call, and instead just forwards the call to the original
-  // sessionWithConfiguration method.
-  return [self hookSessionWithConfiguration:configuration
-                                   delegate:delegate_proxy
-                              delegateQueue:queue];
-}
-
-@end
-
-namespace cronet {
-
-std::unique_ptr<Metrics> CronetMetricsDelegate::MetricsForTask(
-    NSURLSessionTask* task) {
-  base::AutoLock auto_lock(gTaskMetricsMapLock.Get());
-  auto metrics_search = gTaskMetricsMap.Get().find(task);
-  if (metrics_search == gTaskMetricsMap.Get().end()) {
-    return nullptr;
-  }
-
-  std::unique_ptr<Metrics> metrics = std::move(metrics_search->second);
-  // Remove the entry to free memory.
-  gTaskMetricsMap.Get().erase(metrics_search);
-
-  return metrics;
-}
-
-void CronetMetricsDelegate::OnStartNetRequest(NSURLSessionTask* task) {
-  base::AutoLock auto_lock(gTaskMetricsMapLock.Get());
-  if ([task state] == NSURLSessionTaskStateRunning) {
-    gTaskMetricsMap.Get()[task] = nullptr;
-  }
-}
-
-void CronetMetricsDelegate::OnStopNetRequest(std::unique_ptr<Metrics> metrics) {
-  base::AutoLock auto_lock(gTaskMetricsMapLock.Get());
-  auto metrics_search = gTaskMetricsMap.Get().find(metrics->task);
-  if (metrics_search != gTaskMetricsMap.Get().end())
-    metrics_search->second = std::move(metrics);
-}
-
-size_t CronetMetricsDelegate::GetMetricsMapSize() {
-  base::AutoLock auto_lock(gTaskMetricsMapLock.Get());
-  return gTaskMetricsMap.Get().size();
-}
-
-#pragma mark - Swizzle
-
-void SwizzleSessionWithConfiguration() {
-  Class nsurlsession_class = object_getClass([NSURLSession class]);
-
-  SEL original_selector =
-      @selector(sessionWithConfiguration:delegate:delegateQueue:);
-  SEL swizzled_selector =
-      @selector(hookSessionWithConfiguration:delegate:delegateQueue:);
-
-  Method original_method =
-      class_getInstanceMethod(nsurlsession_class, original_selector);
-  Method swizzled_method =
-      class_getInstanceMethod(nsurlsession_class, swizzled_selector);
-
-  method_exchangeImplementations(original_method, swizzled_method);
-}
-
-}  // namespace cronet
diff --git a/components/cronet/ios/docs/BUILD.md b/components/cronet/ios/docs/BUILD.md
deleted file mode 100644
index 90f95a0f59a91..0000000000000
--- a/components/cronet/ios/docs/BUILD.md
+++ /dev/null
@@ -1,73 +0,0 @@
-# Building Cronet (on iOS)
-
-## Get source and dependencies
-### source
-- Install depot_tools per https://chromium.googlesource.com/chromium/src/+/main/docs/ios/build_instructions.md
-- Make directory for the chromium source, and then fetch:
-```
-    ~ $ mkdir chromium && cd chromium
-    ~/chromium $ fetch --nohooks ios
-```
-
-- Enter the ./src directory:
-```
-    ~/chromium $ cd src
-```
-### deps
-- Download the depenedencies
-```
-    ~/chromium/src $ gclient sync
-```
-
-## Build it!
-
-- We'll be using it a bunch, so you may want to put cr_cronet.py in your path.  Of course, you can just use its full name every time if you want...
-```
-    ~/chromium/src $ ln -s /path/to/components/cronet/tools/cr_cronet.py /somewhere/in/your/path
-```
-
-    or however else you want to do this
-
-This sets up the build directory...
-```
-    ~/chromium/src $ cr_cronet.py gn
-```
-...and this builds it!
-```
-    ~/chromium/src $ cr_cronet.py build -d out/Debug-iphonesimulator
-```
-
-- You can also use build-test to run tests on the simulator
-```
-    ~/chromium/src $ cr_cronet.py build-test -d out/Debug-iphonesimulator
-```
-
-- If you want to deploy to hardware, you will have to set up XCode for deploying to hardware, and then use cr_cronet.py gn with the -i flag (for iphoneos build), and cr_cronet.py build with either the -i flag, or using the out/Debug-iphoneos directory.
-```
-    ~/chromium/src $ cr_cronet.py gn -i
-```
-and then
-```
-    ~/chromium/src $ cr_cronet.py build -i
-```
-or
-```
-    ~/chromium/src $ cr_cronet.py build -d out/Debug-iphoneos
-```
-
-## Updating
-
-- Acquire the most recent version of the source with:
-```
-    ~/chromium/src $ cr_cronet.py sync
-```
-and then rebuild:
-```
-    ~/chromium/src $ cr_cronet.py build -d out/Debug-iphoneos
-    ~/chromium/src $ cr_cronet.py build -d out/Debug-iphonesimulator
-```
-
-For more information, you can run
-```
-    ~ $ cr_cronet.py -h
-```
diff --git a/components/cronet/ios/empty.cc b/components/cronet/ios/empty.cc
deleted file mode 100644
index df059601f8677..0000000000000
--- a/components/cronet/ios/empty.cc
+++ /dev/null
@@ -1,6 +0,0 @@
-// Copyright 2016 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// An empty C++ file that is needed to trigger the usage of clang++ instead of
-// clang.
diff --git a/components/cronet/ios/ios_global_state_configuration.cc b/components/cronet/ios/ios_global_state_configuration.cc
deleted file mode 100644
index 279e3229ffa72..0000000000000
--- a/components/cronet/ios/ios_global_state_configuration.cc
+++ /dev/null
@@ -1,14 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "ios/web/public/init/ios_global_state_configuration.h"
-
-namespace ios_global_state {
-
-scoped_refptr<base::SingleThreadTaskRunner>
-GetSharedNetworkIOThreadTaskRunner() {
-  return nullptr;
-}
-
-}  // namespace ios_global_state
diff --git a/components/cronet/ios/test/BUILD.gn b/components/cronet/ios/test/BUILD.gn
deleted file mode 100644
index 6d5c30f333605..0000000000000
--- a/components/cronet/ios/test/BUILD.gn
+++ /dev/null
@@ -1,47 +0,0 @@
-# Copyright 2016 The Chromium Authors
-# Use of this source code is governed by a BSD-style license that can be
-# found in the LICENSE file.
-
-import("//build/config/ios/rules.gni")
-import("//testing/test.gni")
-
-test("cronet_test") {
-  testonly = true
-  sources = [
-    "../../run_all_unittests.cc",
-    "cronet_acceptlang_test.mm",
-    "cronet_http_test.mm",
-    "cronet_metrics_test.mm",
-    "cronet_netlog_test.mm",
-    "cronet_performance_test.mm",
-    "cronet_pkp_test.mm",
-    "cronet_prefs_test.mm",
-    "cronet_quic_test.mm",
-    "cronet_test_base.h",
-    "cronet_test_base.mm",
-
-    # Use native stream engine instead (https://crbug.com/874542)
-    # "get_stream_engine.mm",
-    "start_cronet.h",
-    "start_cronet.mm",
-  ]
-
-  deps = [
-    "//base",
-    "//base:i18n",
-    "//components/cronet:cronet_buildflags",
-    "//components/cronet/ios:cronet_framework+link",
-    "//components/cronet/native/test:cronet_native_tests",
-    "//components/cronet/testing:test_support",
-    "//components/grpc_support:bidirectional_stream_test",
-    "//net",
-    "//net:simple_quic_tools",
-    "//net:test_support",
-    "//third_party/icu",
-  ]
-
-  defines = [ "CRONET_TESTS_IMPLEMENTATION" ]
-
-  bundle_deps = [ "//components/cronet/ios:cronet_framework+bundle" ]
-  configs += [ "//build/config/compiler:enable_arc" ]
-}
diff --git a/components/cronet/ios/test/DEPS b/components/cronet/ios/test/DEPS
deleted file mode 100644
index a740940b4da57..0000000000000
--- a/components/cronet/ios/test/DEPS
+++ /dev/null
@@ -1,3 +0,0 @@
-include_rules = [
-  "+crypto",
-]
\ No newline at end of file
diff --git a/components/cronet/ios/test/cronet_acceptlang_test.mm b/components/cronet/ios/test/cronet_acceptlang_test.mm
deleted file mode 100644
index 1c6d290df877d..0000000000000
--- a/components/cronet/ios/test/cronet_acceptlang_test.mm
+++ /dev/null
@@ -1,57 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// These tests are somewhat dependent on the exact contents of the
-// accept languages table generated at build-time.
-
-#import <Cronet/Cronet.h>
-#import <Foundation/Foundation.h>
-
-#include "testing/gtest/include/gtest/gtest.h"
-
-@interface Cronet (ExposedForTesting)
-+ (NSString*)getAcceptLanguagesFromPreferredLanguages:
-    (NSArray<NSString*>*)languages;
-@end
-
-namespace cronet {
-
-#define EXPECT_NSEQ(a, b) EXPECT_TRUE([(a) isEqual:(b)])
-
-TEST(AcceptLangTest, Region) {
-  NSString* acceptLangs =
-      [Cronet getAcceptLanguagesFromPreferredLanguages:@[ @"en-GB" ]];
-
-  EXPECT_NSEQ(acceptLangs, @"en-GB,en-US,en");
-}
-
-TEST(AcceptLangTest, Lang) {
-  NSString* acceptLangs =
-      [Cronet getAcceptLanguagesFromPreferredLanguages:@[ @"ja-JP" ]];
-
-  EXPECT_NSEQ(acceptLangs, @"ja,en-US,en");
-}
-
-TEST(AcceptLangTest, Default) {
-  NSString* acceptLangs =
-      [Cronet getAcceptLanguagesFromPreferredLanguages:@[ @"lol-LOL" ]];
-
-  EXPECT_NSEQ(acceptLangs, @"en-US,en");
-}
-
-TEST(AcceptLangTest, Append) {
-  NSString* acceptLangs =
-      [Cronet getAcceptLanguagesFromPreferredLanguages:@[ @"ja-JP", @"en-GB" ]];
-
-  EXPECT_NSEQ(acceptLangs, @"ja,en-US,en,en-GB");
-}
-
-TEST(AcceptLangTest, NoDefaultAppend) {
-  NSString* acceptLangs = [Cronet
-      getAcceptLanguagesFromPreferredLanguages:@[ @"en-GB", @"lol-LOL" ]];
-
-  NSLog(@"%@", acceptLangs);
-  EXPECT_NSEQ(acceptLangs, @"en-GB,en-US,en");
-}
-}
diff --git a/components/cronet/ios/test/cronet_http_test.mm b/components/cronet/ios/test/cronet_http_test.mm
deleted file mode 100644
index a01c4ab0a25eb..0000000000000
--- a/components/cronet/ios/test/cronet_http_test.mm
+++ /dev/null
@@ -1,768 +0,0 @@
-// Copyright 2015 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import <Cronet/Cronet.h>
-#import <Foundation/Foundation.h>
-
-#include <stdint.h>
-
-#include "TargetConditionals.h"
-
-#include "base/location.h"
-#include "base/logging.h"
-#include "base/strings/sys_string_conversions.h"
-#include "components/cronet/cronet_buildflags.h"
-#include "components/cronet/ios/test/cronet_test_base.h"
-#include "components/cronet/ios/test/start_cronet.h"
-#include "components/cronet/testing/test_server/test_server.h"
-#include "net/base/mac/url_conversions.h"
-#include "net/base/net_errors.h"
-#include "net/cert/mock_cert_verifier.h"
-#include "net/test/quic_simple_test_server.h"
-#include "testing/gtest/include/gtest/gtest.h"
-#include "testing/gtest_mac.h"
-
-#include "url/gurl.h"
-
-#if !defined(__has_feature) || !__has_feature(objc_arc)
-#error "This file requires ARC support."
-#endif
-
-namespace {
-
-// The buffer size of the stream for HTTPBodyStream post test.
-const NSUInteger kRequestBodyBufferLength = 1024;
-
-// The buffer size of the stream for HTTPBodyStream post test when
-// testing the stream buffered data size larger than the net stack internal
-// buffer size.
-const NSUInteger kLargeRequestBodyBufferLength = 100 * kRequestBodyBufferLength;
-
-// The body data write times for HTTPBodyStream post test.
-const NSInteger kRequestBodyWriteTimes = 16;
-}
-
-@interface StreamBodyRequestDelegate : NSObject<NSStreamDelegate>
-- (void)setOutputStream:(NSOutputStream*)outputStream;
-- (NSMutableString*)requestBody;
-@end
-@implementation StreamBodyRequestDelegate {
-  NSOutputStream* _stream;
-  NSInteger _count;
-
-  NSMutableString* _requestBody;
-}
-
-- (instancetype)init {
-  _requestBody = [NSMutableString string];
-  return self;
-}
-
-- (void)setOutputStream:(NSOutputStream*)outputStream {
-  _stream = outputStream;
-}
-
-- (NSMutableString*)requestBody {
-  return _requestBody;
-}
-
-- (void)stream:(NSStream*)stream handleEvent:(NSStreamEvent)event {
-  ASSERT_EQ(stream, _stream);
-  switch (event) {
-    case NSStreamEventHasSpaceAvailable: {
-      if (_count < kRequestBodyWriteTimes) {
-        uint8_t buffer[kRequestBodyBufferLength];
-        memset(buffer, 'a' + _count, kRequestBodyBufferLength);
-        NSUInteger bytes_write =
-            [_stream write:buffer maxLength:kRequestBodyBufferLength];
-        ASSERT_EQ(kRequestBodyBufferLength, bytes_write);
-        [_requestBody appendString:[[NSString alloc]
-                                       initWithBytes:buffer
-                                              length:kRequestBodyBufferLength
-                                            encoding:NSUTF8StringEncoding]];
-        ++_count;
-      } else {
-        [_stream close];
-      }
-      break;
-    }
-    case NSStreamEventErrorOccurred:
-    case NSStreamEventEndEncountered: {
-      [_stream close];
-      [_stream setDelegate:nil];
-      [_stream removeFromRunLoop:[NSRunLoop currentRunLoop]
-                         forMode:NSDefaultRunLoopMode];
-      break;
-    }
-    default:
-      break;
-  }
-}
-@end
-
-namespace cronet {
-const char kUserAgent[] = "CronetTest/1.0.0.0";
-
-class HttpTest : public CronetTestBase {
- protected:
-  HttpTest() {}
-  ~HttpTest() override {}
-
-  void SetUp() override {
-    CronetTestBase::SetUp();
-    TestServer::Start();
-
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      return YES;
-    }];
-    StartCronet(net::QuicSimpleTestServer::GetPort());
-    [Cronet registerHttpProtocolHandler];
-    NSURLSessionConfiguration* config =
-        [NSURLSessionConfiguration ephemeralSessionConfiguration];
-    config.requestCachePolicy = NSURLRequestReloadIgnoringLocalCacheData;
-    [Cronet installIntoSessionConfiguration:config];
-    session_ = [NSURLSession sessionWithConfiguration:config
-                                             delegate:delegate_
-                                        delegateQueue:nil];
-  }
-
-  void TearDown() override {
-    TestServer::Shutdown();
-
-    [Cronet stopNetLog];
-    [Cronet shutdownForTesting];
-    CronetTestBase::TearDown();
-  }
-
-  NSURLSession* session_;
-};
-
-TEST_F(HttpTest, CreateSslKeyLogFile) {
-  // Shutdown Cronet so that it can be restarted with specific configuration
-  // (SSL key log file specified in experimental options) for this one test.
-  // This is necessary because SslKeyLogFile can only be set once, before any
-  // SSL Client Sockets are created.
-
-  [Cronet shutdownForTesting];
-
-  NSString* ssl_key_log_file = [Cronet getNetLogPathForFile:@"SSLKEYLOGFILE"];
-
-  // Ensure that the keylog file doesn't exist.
-  [[NSFileManager defaultManager] removeItemAtPath:ssl_key_log_file error:nil];
-
-  [Cronet setExperimentalOptions:
-              [NSString stringWithFormat:@"{\"ssl_key_log_file\":\"%@\"}",
-                                         ssl_key_log_file]];
-
-  StartCronet(net::QuicSimpleTestServer::GetPort());
-
-  bool ssl_file_created =
-      [[NSFileManager defaultManager] fileExistsAtPath:ssl_key_log_file];
-
-  [[NSFileManager defaultManager] removeItemAtPath:ssl_key_log_file error:nil];
-
-  [Cronet shutdownForTesting];
-  [Cronet setExperimentalOptions:@""];
-
-  EXPECT_TRUE(ssl_file_created);
-}
-
-TEST_F(HttpTest, NSURLSessionReceivesData) {
-  NSURL* url = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-  __block BOOL block_used = NO;
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-    block_used = YES;
-    EXPECT_EQ([request URL], url);
-    return YES;
-  }];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_TRUE(block_used);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_EQ(net::QuicSimpleTestServer::GetSimpleBodyValue(),
-            base::SysNSStringToUTF8([delegate_ responseBody]));
-}
-
-// https://crbug.com/830005 Disable histogram support to reduce binary size.
-#if BUILDFLAG(DISABLE_HISTOGRAM_SUPPORT)
-#define MAYBE_GetGlobalMetricsDeltas DISABLED_GetGlobalMetricsDeltas
-#else  // BUILDFLAG(DISABLE_HISTOGRAM_SUPPORT)
-#define MAYBE_GetGlobalMetricsDeltas GetGlobalMetricsDeltas
-#endif  // BUILDFLAG(DISABLE_HISTOGRAM_SUPPORT)
-TEST_F(HttpTest, MAYBE_GetGlobalMetricsDeltas) {
-  NSData* delta1 = [Cronet getGlobalMetricsDeltas];
-  NSURL* url = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_EQ(net::QuicSimpleTestServer::GetSimpleBodyValue(),
-            base::SysNSStringToUTF8([delegate_ responseBody]));
-
-  NSData* delta2 = [Cronet getGlobalMetricsDeltas];
-  EXPECT_FALSE([delta2 isEqualToData:delta1]);
-}
-
-TEST_F(HttpTest, SdchDisabledByDefault) {
-  NSURL* url =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL("Accept-Encoding")));
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_FALSE([[delegate_ responseBody] containsString:@"sdch"]);
-}
-
-// Verify that explictly setting Accept-Encoding request header to 'gzip,sdch"
-// is passed to the server and does not trigger any failures. This behavior may
-// In the future Cronet may not allow caller to set Accept-Encoding header and
-// could limit it to set of internally suported and enabled encodings, matching
-// behavior of Cronet on Android.
-TEST_F(HttpTest, AcceptEncodingSdchIsAllowed) {
-  NSURL* url =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL("Accept-Encoding")));
-  NSMutableURLRequest* mutableRequest =
-      [[NSURLRequest requestWithURL:url] mutableCopy];
-  [mutableRequest addValue:@"gzip,sdch" forHTTPHeaderField:@"Accept-Encoding"];
-  NSURLSessionDataTask* task = [session_ dataTaskWithRequest:mutableRequest];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:@"gzip,sdch"]);
-}
-
-// Verify that explictly setting Accept-Encoding request header to 'foo,bar"
-// is passed to the server and does not trigger any failures. This behavior may
-// In the future Cronet may not allow caller to set Accept-Encoding header and
-// could limit it to set of internally suported and enabled encodings, matching
-// behavior of Cronet on Android.
-TEST_F(HttpTest, AcceptEncodingFooBarIsAllowed) {
-  NSURL* url =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL("Accept-Encoding")));
-  NSMutableURLRequest* mutableRequest =
-      [[NSURLRequest requestWithURL:url] mutableCopy];
-  [mutableRequest addValue:@"foo,bar" forHTTPHeaderField:@"Accept-Encoding"];
-  NSURLSessionDataTask* task = [session_ dataTaskWithRequest:mutableRequest];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:@"foo,bar"]);
-}
-
-TEST_F(HttpTest, NSURLSessionAcceptLanguage) {
-  NSURL* url =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL("Accept-Language")));
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  ASSERT_STREQ("en-US,en",
-               base::SysNSStringToUTF8([delegate_ responseBody]).c_str());
-}
-
-TEST_F(HttpTest, SetUserAgentIsExact) {
-  NSURL* url =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL("User-Agent")));
-  [Cronet setRequestFilterBlock:nil];
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_STREQ(kUserAgent,
-               base::SysNSStringToUTF8([delegate_ responseBody]).c_str());
-}
-
-TEST_F(HttpTest, SetUserAgentIsAllowed) {
-  NSURL* url =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL("User-Agent")));
-  NSMutableURLRequest* mutableRequest =
-      [[NSURLRequest requestWithURL:url] mutableCopy];
-  [mutableRequest addValue:@"foo,bar" forHTTPHeaderField:@"User-Agent"];
-  NSURLSessionDataTask* task = [session_ dataTaskWithRequest:mutableRequest];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:@"foo,bar"]);
-
-  // Now check to see if the User-Agent string is restored to default when
-  // creating a new task from a request.
-  mutableRequest = [[NSURLRequest requestWithURL:url] mutableCopy];
-  task = [session_ dataTaskWithRequest:mutableRequest];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_STREQ(kUserAgent,
-               base::SysNSStringToUTF8([delegate_ responseBody]).c_str());
-}
-
-TEST_F(HttpTest, SetCookie) {
-  const char kCookieHeader[] = "Cookie";
-  NSString* cookieName =
-      [NSString stringWithFormat:@"SetCookie-%@", [[NSUUID UUID] UUIDString]];
-  NSString* cookieValue = [[NSUUID UUID] UUIDString];
-  NSString* cookieLine =
-      [NSString stringWithFormat:@"%@=%@", cookieName, cookieValue];
-  NSHTTPCookieStorage* systemCookieStorage =
-      [NSHTTPCookieStorage sharedHTTPCookieStorage];
-  NSURL* cookieUrl =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL(kCookieHeader)));
-  // Verify that cookie is not set in system storage.
-  for (NSHTTPCookie* cookie in [systemCookieStorage cookiesForURL:cookieUrl]) {
-    EXPECT_FALSE([[cookie name] isEqualToString:cookieName]);
-  }
-
-  StartDataTaskAndWaitForCompletion([session_ dataTaskWithURL:cookieUrl]);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_STREQ("Header not found. :(",
-               base::SysNSStringToUTF8([delegate_ responseBody]).c_str());
-
-  NSURL* setCookieUrl = net::NSURLWithGURL(
-      GURL(TestServer::GetSetCookieURL(base::SysNSStringToUTF8(cookieLine))));
-  StartDataTaskAndWaitForCompletion([session_ dataTaskWithURL:setCookieUrl]);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:cookieLine]);
-
-  StartDataTaskAndWaitForCompletion([session_ dataTaskWithURL:cookieUrl]);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:cookieLine]);
-
-  // Verify that cookie is set in system storage.
-  NSHTTPCookie* systemCookie = nil;
-  for (NSHTTPCookie* cookie in [systemCookieStorage cookiesForURL:cookieUrl]) {
-    if ([cookie.name isEqualToString:cookieName]) {
-      systemCookie = cookie;
-      break;
-    }
-  }
-  EXPECT_TRUE([[systemCookie value] isEqualToString:cookieValue]);
-  [systemCookieStorage deleteCookie:systemCookie];
-}
-
-TEST_F(HttpTest, SetSystemCookie) {
-  const char kCookieHeader[] = "Cookie";
-  NSString* cookieName = [NSString
-      stringWithFormat:@"SetSystemCookie-%@", [[NSUUID UUID] UUIDString]];
-  NSString* cookieValue = [[NSUUID UUID] UUIDString];
-  NSHTTPCookieStorage* systemCookieStorage =
-      [NSHTTPCookieStorage sharedHTTPCookieStorage];
-  NSURL* echoCookieUrl =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL(kCookieHeader)));
-  NSHTTPCookie* systemCookie = [NSHTTPCookie cookieWithProperties:@{
-    NSHTTPCookiePath : [echoCookieUrl path],
-    NSHTTPCookieName : cookieName,
-    NSHTTPCookieValue : cookieValue,
-    NSHTTPCookieDomain : [echoCookieUrl host],
-  }];
-  [systemCookieStorage setCookie:systemCookie];
-
-  StartDataTaskAndWaitForCompletion([session_ dataTaskWithURL:echoCookieUrl]);
-  [systemCookieStorage deleteCookie:systemCookie];
-  EXPECT_EQ(nil, [delegate_ error]);
-  // Verify that cookie set in system store was sent to the serever.
-  EXPECT_TRUE([[delegate_ responseBody] containsString:cookieName]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:cookieValue]);
-}
-
-TEST_F(HttpTest, SystemCookieWithNullCreationTime) {
-  const char kCookieHeader[] = "Cookie";
-  NSString* cookieName = [NSString
-      stringWithFormat:@"SetSystemCookie-%@", [[NSUUID UUID] UUIDString]];
-  NSString* cookieValue = [[NSUUID UUID] UUIDString];
-  NSHTTPCookieStorage* systemCookieStorage =
-      [NSHTTPCookieStorage sharedHTTPCookieStorage];
-  NSURL* echoCookieUrl =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL(kCookieHeader)));
-  NSHTTPCookie* nullCreationTimeCookie = [NSHTTPCookie cookieWithProperties:@{
-    NSHTTPCookiePath : [echoCookieUrl path],
-    NSHTTPCookieName : cookieName,
-    NSHTTPCookieValue : cookieValue,
-    NSHTTPCookieDomain : [echoCookieUrl host],
-    @"Created" : [NSNumber numberWithDouble:0.0],
-  }];
-  [systemCookieStorage setCookie:nullCreationTimeCookie];
-  NSHTTPCookie* normalCookie = [NSHTTPCookie cookieWithProperties:@{
-    NSHTTPCookiePath : [echoCookieUrl path],
-    NSHTTPCookieName : [cookieName stringByAppendingString:@"-normal"],
-    NSHTTPCookieValue : cookieValue,
-    NSHTTPCookieDomain : [echoCookieUrl host],
-  }];
-  [systemCookieStorage setCookie:normalCookie];
-  StartDataTaskAndWaitForCompletion([session_ dataTaskWithURL:echoCookieUrl]);
-  [systemCookieStorage deleteCookie:nullCreationTimeCookie];
-  [systemCookieStorage deleteCookie:normalCookie];
-  EXPECT_EQ(nil, [delegate_ error]);
-  // Verify that cookie set in system store was sent to the serever.
-  EXPECT_TRUE([[delegate_ responseBody] containsString:cookieName]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:cookieValue]);
-}
-
-TEST_F(HttpTest, FilterOutRequest) {
-  NSURL* url =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL("User-Agent")));
-  __block BOOL block_used = NO;
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-    block_used = YES;
-    EXPECT_EQ([request URL], url);
-    return NO;
-  }];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_TRUE(block_used);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_FALSE([[delegate_ responseBody]
-      containsString:base::SysUTF8ToNSString(kUserAgent)]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:@"CFNetwork"]);
-}
-
-TEST_F(HttpTest, FileSchemeNotSupported) {
-  NSString* fileData = @"Hello, World!";
-  NSString* documentsDirectory = [NSSearchPathForDirectoriesInDomains(
-      NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
-  NSString* filePath = [documentsDirectory
-      stringByAppendingPathComponent:[[NSProcessInfo processInfo]
-                                         globallyUniqueString]];
-  [fileData writeToFile:filePath
-             atomically:YES
-               encoding:NSUTF8StringEncoding
-                  error:nil];
-
-  NSURL* url = [NSURL fileURLWithPath:filePath];
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-    [[NSFileManager defaultManager] removeItemAtPath:filePath error:nil];
-    EXPECT_TRUE(false) << "Block should not be called for unsupported requests";
-    return YES;
-  }];
-  StartDataTaskAndWaitForCompletion(task);
-  [[NSFileManager defaultManager] removeItemAtPath:filePath error:nil];
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:fileData]);
-}
-
-TEST_F(HttpTest, DataSchemeNotSupported) {
-  NSString* testString = @"Hello, World!";
-  NSData* testData = [testString dataUsingEncoding:NSUTF8StringEncoding];
-  NSString* dataString =
-      [NSString stringWithFormat:@"data:text/plain;base64,%@",
-                                 [testData base64EncodedStringWithOptions:0]];
-  NSURL* url = [NSURL URLWithString:dataString];
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-    EXPECT_TRUE(false) << "Block should not be called for unsupported requests";
-    return YES;
-  }];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:testString]);
-}
-
-TEST_F(HttpTest, BrotliAdvertisedTest) {
-  [Cronet shutdownForTesting];
-
-  [Cronet setBrotliEnabled:YES];
-
-  StartCronet(net::QuicSimpleTestServer::GetPort());
-
-  NSURL* url =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL("Accept-Encoding")));
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_TRUE([[delegate_ responseBody] containsString:@"br"]);
-}
-
-TEST_F(HttpTest, BrotliNotAdvertisedTest) {
-  [Cronet shutdownForTesting];
-
-  [Cronet setBrotliEnabled:NO];
-
-  StartCronet(net::QuicSimpleTestServer::GetPort());
-
-  NSURL* url =
-      net::NSURLWithGURL(GURL(TestServer::GetEchoHeaderURL("Accept-Encoding")));
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_FALSE([[delegate_ responseBody] containsString:@"br"]);
-}
-
-TEST_F(HttpTest, BrotliHandleDecoding) {
-  [Cronet shutdownForTesting];
-
-  [Cronet setBrotliEnabled:YES];
-
-  StartCronet(net::QuicSimpleTestServer::GetPort());
-
-  NSURL* url =
-      net::NSURLWithGURL(GURL(TestServer::GetUseEncodingURL("brotli")));
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  StartDataTaskAndWaitForCompletion(task);
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_STREQ(base::SysNSStringToUTF8([delegate_ responseBody]).c_str(),
-               "The quick brown fox jumps over the lazy dog");
-}
-
-TEST_F(HttpTest, PostRequest) {
-  // Create request body.
-  NSString* request_body = [NSString stringWithFormat:@"Post Data %i", rand()];
-  NSData* post_data = [request_body dataUsingEncoding:NSUTF8StringEncoding];
-
-  // Prepare the request.
-  NSURL* url = net::NSURLWithGURL(GURL(TestServer::GetEchoRequestBodyURL()));
-  NSMutableURLRequest* request = [[NSMutableURLRequest alloc] initWithURL:url];
-  request.HTTPMethod = @"POST";
-  request.HTTPBody = post_data;
-
-  // Set the request filter to check that the request was handled by the Cronet
-  // stack.
-  __block BOOL block_used = NO;
-  [Cronet setRequestFilterBlock:^(NSURLRequest* req) {
-    block_used = YES;
-    EXPECT_EQ([req URL], url);
-    return YES;
-  }];
-
-  // Send the request and wait for the response.
-  NSURLSessionDataTask* data_task = [session_ dataTaskWithRequest:request];
-  StartDataTaskAndWaitForCompletion(data_task);
-
-  // Verify that the response from the server matches the request body.
-  NSString* response_body = [delegate_ responseBody];
-  ASSERT_EQ(nil, [delegate_ error]);
-  ASSERT_STREQ(base::SysNSStringToUTF8(request_body).c_str(),
-               base::SysNSStringToUTF8(response_body).c_str());
-  ASSERT_TRUE(block_used);
-}
-
-TEST_F(HttpTest, PostRequestWithLargeBody) {
-  // Create request body.
-  std::string request_body(kLargeRequestBodyBufferLength, 'z');
-  NSData* post_data = [NSData dataWithBytes:request_body.c_str()
-                                     length:request_body.length()];
-
-  // Prepare the request.
-  NSURL* url = net::NSURLWithGURL(GURL(TestServer::GetEchoRequestBodyURL()));
-  NSMutableURLRequest* request = [[NSMutableURLRequest alloc] initWithURL:url];
-  request.HTTPMethod = @"POST";
-  request.HTTPBody = post_data;
-
-  // Set the request filter to check that the request was handled by the Cronet
-  // stack.
-  __block BOOL block_used = NO;
-  [Cronet setRequestFilterBlock:^(NSURLRequest* req) {
-    block_used = YES;
-    EXPECT_EQ([req URL], url);
-    return YES;
-  }];
-
-  // Send the request and wait for the response.
-  NSURLSessionDataTask* data_task = [session_ dataTaskWithRequest:request];
-  StartDataTaskAndWaitForCompletion(data_task);
-
-  // Verify that the response from the server matches the request body.
-  NSString* response_body = [delegate_ responseBody];
-  ASSERT_EQ(nil, [delegate_ error]);
-  ASSERT_STREQ(request_body.c_str(),
-               base::SysNSStringToUTF8(response_body).c_str());
-  ASSERT_TRUE(block_used);
-}
-
-// Verify the chunked request body upload function.
-TEST_F(HttpTest, PostRequestWithBodyStream) {
-  // Create request body stream.
-  CFReadStreamRef read_stream = NULL;
-  CFWriteStreamRef write_stream = NULL;
-  CFStreamCreateBoundPair(NULL, &read_stream, &write_stream,
-                          kRequestBodyBufferLength);
-
-  NSInputStream* input_stream = CFBridgingRelease(read_stream);
-  NSOutputStream* output_stream = CFBridgingRelease(write_stream);
-
-  StreamBodyRequestDelegate* stream_delegate =
-      [[StreamBodyRequestDelegate alloc] init];
-  output_stream.delegate = stream_delegate;
-  [stream_delegate setOutputStream:output_stream];
-
-  dispatch_queue_t queue =
-      dispatch_queue_create("data upload queue", DISPATCH_QUEUE_SERIAL);
-  dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
-  dispatch_async(queue, ^{
-    [output_stream scheduleInRunLoop:[NSRunLoop currentRunLoop]
-                             forMode:NSDefaultRunLoopMode];
-    [output_stream open];
-
-    [[NSRunLoop currentRunLoop]
-        runUntilDate:[NSDate dateWithTimeIntervalSinceNow:10.0]];
-
-    dispatch_semaphore_signal(semaphore);
-  });
-
-  // Prepare the request.
-  NSURL* url = net::NSURLWithGURL(GURL(TestServer::GetEchoRequestBodyURL()));
-  NSMutableURLRequest* request = [[NSMutableURLRequest alloc] initWithURL:url];
-  request.HTTPMethod = @"POST";
-  request.HTTPBodyStream = input_stream;
-
-  // Set the request filter to check that the request was handled by the Cronet
-  // stack.
-  __block BOOL block_used = NO;
-  [Cronet setRequestFilterBlock:^(NSURLRequest* req) {
-    block_used = YES;
-    EXPECT_EQ([req URL], url);
-    return YES;
-  }];
-
-  // Send the request and wait for the response.
-  NSURLSessionDataTask* data_task = [session_ dataTaskWithRequest:request];
-  StartDataTaskAndWaitForCompletion(data_task);
-
-  // Verify that the response from the server matches the request body.
-  ASSERT_EQ(nil, [delegate_ error]);
-  NSString* response_body = [delegate_ responseBody];
-  NSMutableString* request_body = [stream_delegate requestBody];
-  ASSERT_STREQ(base::SysNSStringToUTF8(request_body).c_str(),
-               base::SysNSStringToUTF8(response_body).c_str());
-  ASSERT_TRUE(block_used);
-
-  // Wait for the run loop of the child thread exits. Timeout is 5 seconds.
-  dispatch_time_t timeout = dispatch_time(DISPATCH_TIME_NOW, 5 * NSEC_PER_SEC);
-  ASSERT_EQ(0, dispatch_semaphore_wait(semaphore, timeout));
-}
-
-// Verify that the chunked data uploader can correctly handle the request body
-// if the stream contains data length exceed the internal upload buffer.
-TEST_F(HttpTest, PostRequestWithLargeBodyStream) {
-  // Create request body stream.
-  CFReadStreamRef read_stream = NULL;
-  CFWriteStreamRef write_stream = NULL;
-  // 100KB data is written in one time.
-  CFStreamCreateBoundPair(NULL, &read_stream, &write_stream,
-                          kLargeRequestBodyBufferLength);
-
-  NSInputStream* input_stream = CFBridgingRelease(read_stream);
-  NSOutputStream* output_stream = CFBridgingRelease(write_stream);
-  [output_stream open];
-
-  uint8_t buffer[kLargeRequestBodyBufferLength];
-  memset(buffer, 'a', kLargeRequestBodyBufferLength);
-  NSUInteger bytes_write =
-      [output_stream write:buffer maxLength:kLargeRequestBodyBufferLength];
-  ASSERT_EQ(kLargeRequestBodyBufferLength, bytes_write);
-  [output_stream close];
-
-  // Prepare the request.
-  NSURL* url = net::NSURLWithGURL(GURL(TestServer::GetEchoRequestBodyURL()));
-  NSMutableURLRequest* request = [[NSMutableURLRequest alloc] initWithURL:url];
-  request.HTTPMethod = @"POST";
-  request.HTTPBodyStream = input_stream;
-
-  // Set the request filter to check that the request was handled by the Cronet
-  // stack.
-  __block BOOL block_used = NO;
-  [Cronet setRequestFilterBlock:^(NSURLRequest* req) {
-    block_used = YES;
-    EXPECT_EQ([req URL], url);
-    return YES;
-  }];
-
-  // Send the request and wait for the response.
-  NSURLSessionDataTask* data_task = [session_ dataTaskWithRequest:request];
-  StartDataTaskAndWaitForCompletion(data_task);
-
-  // Verify that the response from the server matches the request body.
-  ASSERT_EQ(nil, [delegate_ error]);
-  NSString* response_body = [delegate_ responseBody];
-  ASSERT_EQ(kLargeRequestBodyBufferLength, [response_body length]);
-  ASSERT_TRUE(block_used);
-}
-
-// iOS Simulator doesn't support changing thread priorities.
-// Therefore, run these tests only on a physical device.
-#if TARGET_OS_SIMULATOR
-#define MAYBE_ChangeThreadPriorityAfterStart \
-  DISABLED_ChangeThreadPriorityAfterStart
-#define MAYBE_ChangeThreadPriorityBeforeStart \
-  DISABLED_ChangeThreadPriorityBeforeStart
-#else
-#define MAYBE_ChangeThreadPriorityAfterStart ChangeThreadPriorityAfterStart
-#define MAYBE_ChangeThreadPriorityBeforeStart ChangeThreadPriorityBeforeStart
-#endif  // TARGET_OS_SIMULATOR
-
-// Tests that the network thread priority can be changed after
-// Cronet has been started.
-TEST_F(HttpTest, MAYBE_ChangeThreadPriorityAfterStart) {
-  // Get current (default) priority of the network thread.
-  __block double default_priority;
-  PostBlockToNetworkThread(FROM_HERE, ^{
-    default_priority = NSThread.threadPriority;
-  });
-
-  // Modify the network thread priority.
-  const double new_priority = 1.0;
-  [Cronet setNetworkThreadPriority:new_priority];
-
-  // Get modified priority of the network thread.
-  dispatch_semaphore_t lock = dispatch_semaphore_create(0);
-  __block double actual_priority;
-  PostBlockToNetworkThread(FROM_HERE, ^{
-    actual_priority = NSThread.threadPriority;
-    dispatch_semaphore_signal(lock);
-  });
-
-  // Wait until the posted tasks are completed.
-  dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);
-
-  EXPECT_EQ(0.5, default_priority);
-
-  // Check that the priority was modified and is close to the set priority.
-  EXPECT_TRUE(abs(actual_priority - new_priority) < 0.01)
-      << "Unexpected thread priority. Expected " << new_priority << " but got "
-      << actual_priority;
-}
-
-// Tests that the network thread priority can be changed before
-// Cronet has been started.
-TEST_F(HttpTest, MAYBE_ChangeThreadPriorityBeforeStart) {
-  // Start a new Cronet engine modifying the network thread priority before the
-  // start.
-  [Cronet shutdownForTesting];
-  const double new_priority = 0.8;
-  [Cronet setNetworkThreadPriority:new_priority];
-  [Cronet start];
-
-  // Get modified priority of the network thread.
-  dispatch_semaphore_t lock = dispatch_semaphore_create(0);
-  __block double actual_priority;
-  PostBlockToNetworkThread(FROM_HERE, ^{
-    actual_priority = NSThread.threadPriority;
-    dispatch_semaphore_signal(lock);
-  });
-
-  // Wait until the posted task is completed.
-  dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);
-
-  // Check that the priority was modified and is close to the set priority.
-  EXPECT_TRUE(abs(actual_priority - new_priority) < 0.01)
-      << "Unexpected thread priority. Expected " << new_priority << " but got "
-      << actual_priority;
-}
-
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wdeprecated-declarations"
-TEST_F(HttpTest, LegacyApi) {
-  NSURL* url = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-
-  __block BOOL block_used = NO;
-  [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-    block_used = YES;
-    EXPECT_EQ(request.URL, url);
-    return YES;
-  }];
-
-  NSURLRequest* request = [NSURLRequest requestWithURL:url];
-  NSError* err;
-  NSHTTPURLResponse* response;
-  [NSURLConnection sendSynchronousRequest:request
-                        returningResponse:&response
-                                    error:&err];
-
-  EXPECT_EQ(200, [response statusCode]);
-  EXPECT_TRUE(block_used);
-  EXPECT_FALSE(err);
-}
-#pragma clang diagnostic pop
-
-}  // namespace cronet
diff --git a/components/cronet/ios/test/cronet_metrics_test.mm b/components/cronet/ios/test/cronet_metrics_test.mm
deleted file mode 100644
index e6dba273c5452..0000000000000
--- a/components/cronet/ios/test/cronet_metrics_test.mm
+++ /dev/null
@@ -1,433 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import <Cronet/Cronet.h>
-
-#include "base/strings/sys_string_conversions.h"
-#include "components/cronet/ios/test/cronet_test_base.h"
-#include "components/cronet/ios/test/start_cronet.h"
-#include "components/cronet/testing/test_server/test_server.h"
-#import "net/base/mac/url_conversions.h"
-#include "net/test/quic_simple_test_server.h"
-#include "testing/gtest_mac.h"
-#include "url/gurl.h"
-
-// Forward declaration of class in cronet_metrics.h for testing.
-NS_AVAILABLE_IOS(10.0)
-@interface CronetTransactionMetrics : NSURLSessionTaskTransactionMetrics
-@end
-
-namespace cronet {
-
-class CronetMetricsTest : public CronetTestBase {
- protected:
-  void SetUpWithMetrics(BOOL metrics_enabled) {
-    TestServer::Start();
-
-    [Cronet setMetricsEnabled:metrics_enabled];
-    StartCronet(net::QuicSimpleTestServer::GetPort());
-
-    [Cronet registerHttpProtocolHandler];
-    NSURLSessionConfiguration* config =
-        [NSURLSessionConfiguration ephemeralSessionConfiguration];
-    config.requestCachePolicy = NSURLRequestReloadIgnoringLocalCacheData;
-    [Cronet installIntoSessionConfiguration:config];
-    session_ = [NSURLSession sessionWithConfiguration:config
-                                             delegate:delegate_
-                                        delegateQueue:nil];
-  }
-
-  void TearDown() override {
-    [Cronet shutdownForTesting];
-
-    TestServer::Shutdown();
-    CronetTestBase::TearDown();
-  }
-
-  NSURLSession* session_;
-};
-
-class CronetEnabledMetricsTest : public CronetMetricsTest {
- protected:
-  void SetUp() override {
-    CronetMetricsTest::SetUp();
-    SetUpWithMetrics(YES);
-  }
-};
-
-class CronetDisabledMetricsTest : public CronetMetricsTest {
- protected:
-  void SetUp() override {
-    CronetMetricsTest::SetUp();
-    SetUpWithMetrics(NO);
-  }
-};
-
-// Tests that metrics data is sane for a QUIC request.
-TEST_F(CronetEnabledMetricsTest, ProtocolIsQuic) {
-  if (@available(iOS 10.2, *)) {
-    NSURL* url = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-
-    __block BOOL block_used = NO;
-    NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      block_used = YES;
-      EXPECT_EQ(request.URL, url);
-      return YES;
-    }];
-    StartDataTaskAndWaitForCompletion(task);
-    EXPECT_TRUE(block_used);
-    EXPECT_EQ(nil, [delegate_ error]);
-    EXPECT_EQ(net::QuicSimpleTestServer::GetSimpleBodyValue(),
-              base::SysNSStringToUTF8([delegate_ responseBody]));
-
-    NSURLSessionTaskMetrics* task_metrics = delegate_.taskMetrics;
-    ASSERT_TRUE(task_metrics);
-    ASSERT_EQ(1lU, task_metrics.transactionMetrics.count);
-    NSURLSessionTaskTransactionMetrics* metrics =
-        task_metrics.transactionMetrics.firstObject;
-    EXPECT_TRUE([metrics isMemberOfClass:[CronetTransactionMetrics class]]);
-
-    // Confirm that metrics data is the correct type.
-    EXPECT_TRUE([metrics.fetchStartDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE([metrics.domainLookupStartDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE([metrics.domainLookupEndDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE([metrics.connectStartDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE(
-        [metrics.secureConnectionStartDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE([metrics.secureConnectionEndDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE([metrics.connectEndDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE([metrics.requestStartDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE([metrics.requestEndDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE([metrics.responseStartDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE([metrics.responseEndDate isKindOfClass:[NSDate class]]);
-    EXPECT_TRUE([metrics.networkProtocolName isKindOfClass:[NSString class]]);
-
-    // Confirm that the metrics values are sane.
-    EXPECT_NE(NSOrderedDescending, [metrics.domainLookupStartDate
-                                       compare:metrics.domainLookupEndDate]);
-    EXPECT_NE(NSOrderedDescending,
-              [metrics.connectStartDate compare:metrics.connectEndDate]);
-    EXPECT_NE(NSOrderedDescending,
-              [metrics.secureConnectionStartDate
-                  compare:metrics.secureConnectionEndDate]);
-    EXPECT_NE(NSOrderedDescending,
-              [metrics.requestStartDate compare:metrics.requestEndDate]);
-    EXPECT_NE(NSOrderedDescending,
-              [metrics.responseStartDate compare:metrics.responseEndDate]);
-
-    EXPECT_FALSE(metrics.proxyConnection);
-
-    EXPECT_TRUE([metrics.networkProtocolName containsString:@"quic"] ||
-                [metrics.networkProtocolName containsString:@"h3"])
-        << base::SysNSStringToUTF8(metrics.networkProtocolName);
-  }
-}
-
-// Tests that metrics data is sane for an HTTP/1.1 request.
-TEST_F(CronetEnabledMetricsTest, ProtocolIsNotQuic) {
-  if (@available(iOS 10.2, *)) {
-    NSURL* url = net::NSURLWithGURL(GURL(TestServer::GetSimpleURL()));
-
-    __block BOOL block_used = NO;
-    NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      block_used = YES;
-      EXPECT_EQ(request.URL, url);
-      return YES;
-    }];
-    StartDataTaskAndWaitForCompletion(task);
-    EXPECT_TRUE(block_used);
-    EXPECT_EQ(nil, [delegate_ error]);
-    EXPECT_STREQ("The quick brown fox jumps over the lazy dog.",
-                 base::SysNSStringToUTF8([delegate_ responseBody]).c_str());
-
-    NSURLSessionTaskMetrics* task_metrics = delegate_.taskMetrics;
-    ASSERT_TRUE(task_metrics);
-    ASSERT_EQ(1lU, task_metrics.transactionMetrics.count);
-    NSURLSessionTaskTransactionMetrics* metrics =
-        task_metrics.transactionMetrics.firstObject;
-    EXPECT_TRUE([metrics isMemberOfClass:[CronetTransactionMetrics class]]);
-
-    EXPECT_NSEQ(metrics.networkProtocolName, @"http/1.1");
-  }
-}
-
-// Tests that Cronet provides similar metrics data to iOS.
-TEST_F(CronetEnabledMetricsTest, PlatformComparison) {
-  if (@available(iOS 10.2, *)) {
-    NSURL* url = net::NSURLWithGURL(GURL(TestServer::GetSimpleURL()));
-
-    // Perform a connection using Cronet.
-
-    __block BOOL block_used = NO;
-    NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      block_used = YES;
-      EXPECT_EQ(request.URL, url);
-      return YES;
-    }];
-    StartDataTaskAndWaitForCompletion(task);
-    EXPECT_TRUE(block_used);
-    EXPECT_EQ(nil, [delegate_ error]);
-    EXPECT_STREQ("The quick brown fox jumps over the lazy dog.",
-                 base::SysNSStringToUTF8([delegate_ responseBody]).c_str());
-
-    NSURLSessionTaskMetrics* cronet_task_metrics = delegate_.taskMetrics;
-    ASSERT_TRUE(cronet_task_metrics);
-    ASSERT_EQ(1lU, cronet_task_metrics.transactionMetrics.count);
-    NSURLSessionTaskTransactionMetrics* cronet_metrics =
-        cronet_task_metrics.transactionMetrics.firstObject;
-
-    // Perform a connection using the platform stack.
-
-    block_used = NO;
-    task = [session_ dataTaskWithURL:url];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      block_used = YES;
-      EXPECT_EQ(request.URL, url);
-      return NO;
-    }];
-    StartDataTaskAndWaitForCompletion(task);
-    EXPECT_TRUE(block_used);
-    EXPECT_EQ(nil, [delegate_ error]);
-    EXPECT_STREQ("The quick brown fox jumps over the lazy dog.",
-                 base::SysNSStringToUTF8([delegate_ responseBody]).c_str());
-
-    NSURLSessionTaskMetrics* platform_task_metrics = delegate_.taskMetrics;
-    ASSERT_TRUE(platform_task_metrics);
-    ASSERT_EQ(1lU, platform_task_metrics.transactionMetrics.count);
-    NSURLSessionTaskTransactionMetrics* platform_metrics =
-        platform_task_metrics.transactionMetrics.firstObject;
-
-    // Compare platform and Cronet metrics data.
-
-    EXPECT_NSEQ(cronet_metrics.networkProtocolName,
-                platform_metrics.networkProtocolName);
-  }
-}
-
-// Tests that the metrics API behaves sanely when making a request to an
-// invalid URL.
-TEST_F(CronetEnabledMetricsTest, InvalidURL) {
-  if (@available(iOS 10.2, *)) {
-    NSURL* url = net::NSURLWithGURL(GURL("http://notfound.example.com"));
-
-    __block BOOL block_used = NO;
-    NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      block_used = YES;
-      EXPECT_EQ(request.URL, url);
-      return YES;
-    }];
-    StartDataTaskAndWaitForCompletion(task);
-    EXPECT_TRUE(block_used);
-    EXPECT_TRUE([delegate_ error]);
-
-    NSURLSessionTaskMetrics* task_metrics = delegate_.taskMetrics;
-    ASSERT_TRUE(task_metrics);
-    ASSERT_EQ(1lU, task_metrics.transactionMetrics.count);
-    NSURLSessionTaskTransactionMetrics* metrics =
-        task_metrics.transactionMetrics.firstObject;
-    EXPECT_TRUE([metrics isMemberOfClass:[CronetTransactionMetrics class]]);
-
-    EXPECT_TRUE(metrics.fetchStartDate);
-    EXPECT_FALSE(metrics.domainLookupStartDate);
-    EXPECT_FALSE(metrics.domainLookupEndDate);
-    EXPECT_FALSE(metrics.connectStartDate);
-    EXPECT_FALSE(metrics.secureConnectionStartDate);
-    EXPECT_FALSE(metrics.secureConnectionEndDate);
-    EXPECT_FALSE(metrics.connectEndDate);
-    EXPECT_FALSE(metrics.requestStartDate);
-    EXPECT_FALSE(metrics.requestEndDate);
-    EXPECT_FALSE(metrics.responseStartDate);
-  }
-}
-
-// Tests that the metrics API behaves sanely when the request is canceled.
-TEST_F(CronetEnabledMetricsTest, CanceledRequest) {
-  if (@available(iOS 10.2, *)) {
-    NSURL* url = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-
-    __block BOOL block_used = NO;
-    NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      block_used = YES;
-      EXPECT_EQ(request.URL, url);
-      return YES;
-    }];
-
-    StartDataTaskAndWaitForCompletion(task, 1);
-    [task cancel];
-
-    EXPECT_TRUE(block_used);
-    EXPECT_NE(nil, [delegate_ error]);
-  }
-}
-
-// Tests the metrics data for a reused connection is correct.
-TEST_F(CronetEnabledMetricsTest, ReusedConnection) {
-  if (@available(iOS 10.2, *)) {
-    NSURL* url = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-
-    __block BOOL block_used = NO;
-    NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      block_used = YES;
-      EXPECT_EQ(request.URL, url);
-      return YES;
-    }];
-    StartDataTaskAndWaitForCompletion(task);
-    EXPECT_TRUE(block_used);
-    EXPECT_EQ(nil, [delegate_ error]);
-    EXPECT_EQ(net::QuicSimpleTestServer::GetSimpleBodyValue(),
-              base::SysNSStringToUTF8([delegate_ responseBody]));
-
-    NSURLSessionTaskMetrics* task_metrics = [delegate_ taskMetrics];
-    ASSERT_TRUE(task_metrics);
-    ASSERT_EQ(1lU, task_metrics.transactionMetrics.count);
-    NSURLSessionTaskTransactionMetrics* metrics =
-        task_metrics.transactionMetrics.firstObject;
-    EXPECT_TRUE([metrics isMemberOfClass:[CronetTransactionMetrics class]]);
-
-    // Second connection
-
-    block_used = NO;
-    task = [session_ dataTaskWithURL:url];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      block_used = YES;
-      EXPECT_EQ(request.URL, url);
-      return YES;
-    }];
-    StartDataTaskAndWaitForCompletion(task);
-    EXPECT_TRUE(block_used);
-    EXPECT_EQ(nil, [delegate_ error]);
-    EXPECT_EQ(net::QuicSimpleTestServer::GetSimpleBodyValue(),
-              base::SysNSStringToUTF8([delegate_ responseBody]));
-
-    task_metrics = delegate_.taskMetrics;
-    ASSERT_TRUE(task_metrics);
-    ASSERT_EQ(1lU, task_metrics.transactionMetrics.count);
-    metrics = task_metrics.transactionMetrics.firstObject;
-
-    EXPECT_TRUE(metrics.isReusedConnection);
-    EXPECT_FALSE(metrics.domainLookupStartDate);
-    EXPECT_FALSE(metrics.domainLookupEndDate);
-    EXPECT_FALSE(metrics.connectStartDate);
-    EXPECT_FALSE(metrics.secureConnectionStartDate);
-    EXPECT_FALSE(metrics.secureConnectionEndDate);
-    EXPECT_FALSE(metrics.connectEndDate);
-  }
-}
-
-// Checks that there is no crash if the session delegate is not set when a
-// NSURLSession is created. Also checks that the internal metrics map is cleaned
-// and contains 0 records at the end of the request. This is a regression test
-// for http://crbug/834401.
-TEST_F(CronetEnabledMetricsTest, SessionWithoutDelegate) {
-  if (@available(iOS 10.2, *)) {
-    NSURLSessionConfiguration* default_config =
-        [NSURLSessionConfiguration defaultSessionConfiguration];
-    [Cronet installIntoSessionConfiguration:default_config];
-    NSURLSession* default_session =
-        [NSURLSession sessionWithConfiguration:default_config];
-    NSURL* url = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-    NSURLRequest* request = [NSURLRequest requestWithURL:url];
-
-    __block BOOL no_error = NO;
-    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
-    NSURLSessionDataTask* task = [default_session
-        dataTaskWithRequest:request
-          completionHandler:^(NSData* data, NSURLResponse* response,
-                              NSError* error) {
-            EXPECT_TRUE(error == nil)
-                << base::SysNSStringToUTF8([error description]);
-            no_error = YES;
-            dispatch_semaphore_signal(semaphore);
-          }];
-    __block BOOL block_used = NO;
-    [Cronet setRequestFilterBlock:^(NSURLRequest* nsUrlRequest) {
-      block_used = YES;
-      EXPECT_EQ(nsUrlRequest.URL, url);
-      return YES;
-    }];
-
-    [task resume];
-    long wait_result = dispatch_semaphore_wait(
-        semaphore, dispatch_time(DISPATCH_TIME_NOW, 10 * NSEC_PER_SEC));
-
-    // Check results
-    EXPECT_EQ(0, wait_result);
-    EXPECT_TRUE(block_used);
-    EXPECT_TRUE(no_error);
-    EXPECT_EQ(0UL, [Cronet getMetricsMapSize]);
-  }
-}
-
-// Tests that the metrics disable switch works.
-TEST_F(CronetDisabledMetricsTest, MetricsDisabled) {
-  if (@available(iOS 10.2, *)) {
-    NSURL* url = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-
-    __block BOOL block_used = NO;
-    NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      block_used = YES;
-      EXPECT_EQ(request.URL, url);
-      return YES;
-    }];
-    StartDataTaskAndWaitForCompletion(task);
-    EXPECT_TRUE(block_used);
-    EXPECT_EQ(nil, [delegate_ error]);
-    EXPECT_EQ(net::QuicSimpleTestServer::GetSimpleBodyValue(),
-              base::SysNSStringToUTF8([delegate_ responseBody]));
-
-    NSURLSessionTaskMetrics* task_metrics = [delegate_ taskMetrics];
-    ASSERT_TRUE(task_metrics);
-    ASSERT_EQ(1lU, task_metrics.transactionMetrics.count);
-    NSURLSessionTaskTransactionMetrics* metrics =
-        task_metrics.transactionMetrics.firstObject;
-    EXPECT_FALSE([metrics isMemberOfClass:[CronetTransactionMetrics class]]);
-
-    EXPECT_TRUE(metrics.fetchStartDate);
-    EXPECT_FALSE(metrics.domainLookupStartDate);
-    EXPECT_FALSE(metrics.domainLookupEndDate);
-    EXPECT_FALSE(metrics.connectStartDate);
-    EXPECT_FALSE(metrics.secureConnectionStartDate);
-    EXPECT_FALSE(metrics.secureConnectionEndDate);
-    EXPECT_FALSE(metrics.connectEndDate);
-    EXPECT_FALSE(metrics.requestStartDate);
-    EXPECT_FALSE(metrics.requestEndDate);
-    EXPECT_FALSE(metrics.responseStartDate);
-    EXPECT_FALSE(metrics.responseEndDate);
-    EXPECT_FALSE(metrics.networkProtocolName);
-  }
-}
-
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wdeprecated-declarations"
-TEST_F(CronetEnabledMetricsTest, LegacyApi) {
-  NSURL* url = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-
-  __block BOOL block_used = NO;
-  [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-    block_used = YES;
-    EXPECT_EQ(request.URL, url);
-    return YES;
-  }];
-
-  NSURLRequest* request = [NSURLRequest requestWithURL:url];
-  NSError* err;
-  NSHTTPURLResponse* response;
-  [NSURLConnection sendSynchronousRequest:request
-                        returningResponse:&response
-                                    error:&err];
-
-  EXPECT_EQ(200, [response statusCode]);
-  EXPECT_TRUE(block_used);
-  EXPECT_FALSE(err);
-}
-#pragma clang diagnostic pop
-
-}  // namespace cronet
diff --git a/components/cronet/ios/test/cronet_netlog_test.mm b/components/cronet/ios/test/cronet_netlog_test.mm
deleted file mode 100644
index 5224ca7645b63..0000000000000
--- a/components/cronet/ios/test/cronet_netlog_test.mm
+++ /dev/null
@@ -1,135 +0,0 @@
-// Copyright 2016 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import <Cronet/Cronet.h>
-#import <Foundation/Foundation.h>
-
-#include "components/cronet/ios/test/cronet_test_base.h"
-#include "components/cronet/ios/test/start_cronet.h"
-#include "net/test/quic_simple_test_server.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-namespace cronet {
-
-class NetLogTest : public ::testing::Test {
- protected:
-  NetLogTest() {}
-  ~NetLogTest() override {}
-
-  void SetUp() override { StartCronet(net::QuicSimpleTestServer::GetPort()); }
-
-  void TearDown() override {
-    [Cronet stopNetLog];
-    [Cronet shutdownForTesting];
-  }
-};
-
-TEST_F(NetLogTest, OpenFile) {
-  bool netlog_started =
-      [Cronet startNetLogToFile:@"cronet_netlog.json" logBytes:YES];
-
-  EXPECT_TRUE(netlog_started);
-}
-
-TEST_F(NetLogTest, CreateFile) {
-  NSString* filename = [[[NSProcessInfo processInfo] globallyUniqueString]
-      stringByAppendingString:@"_netlog.json"];
-  bool netlog_started = [Cronet startNetLogToFile:filename logBytes:YES];
-  [Cronet stopNetLog];
-
-  bool file_created = [[NSFileManager defaultManager]
-      fileExistsAtPath:[Cronet getNetLogPathForFile:filename]];
-
-  [[NSFileManager defaultManager]
-      removeItemAtPath:[Cronet getNetLogPathForFile:filename]
-                 error:nil];
-
-  EXPECT_TRUE(netlog_started);
-  EXPECT_TRUE(file_created);
-}
-
-TEST_F(NetLogTest, NonExistantDir) {
-  NSString* notdir = [[[NSProcessInfo processInfo] globallyUniqueString]
-      stringByAppendingString:@"/netlog.json"];
-  bool netlog_started = [Cronet startNetLogToFile:notdir logBytes:NO];
-
-  EXPECT_FALSE(netlog_started);
-}
-
-TEST_F(NetLogTest, ExistantDir) {
-  NSString* dir = [[NSProcessInfo processInfo] globallyUniqueString];
-
-  bool dir_created = [[NSFileManager defaultManager]
-            createDirectoryAtPath:[Cronet getNetLogPathForFile:dir]
-      withIntermediateDirectories:NO
-                       attributes:nil
-                            error:nil];
-
-  bool netlog_started =
-      [Cronet startNetLogToFile:[dir stringByAppendingString:@"/netlog.json"]
-                       logBytes:NO];
-
-  [Cronet stopNetLog];
-
-  [[NSFileManager defaultManager]
-      removeItemAtPath:[Cronet
-                           getNetLogPathForFile:
-                               [dir stringByAppendingString:@"/netlog.json"]]
-                 error:nil];
-
-  [[NSFileManager defaultManager]
-      removeItemAtPath:[Cronet getNetLogPathForFile:dir]
-                 error:nil];
-
-  EXPECT_TRUE(dir_created);
-  EXPECT_TRUE(netlog_started);
-}
-
-TEST_F(NetLogTest, EmptyFilename) {
-  bool netlog_started = [Cronet startNetLogToFile:@"" logBytes:NO];
-
-  EXPECT_FALSE(netlog_started);
-}
-
-TEST_F(NetLogTest, AbsoluteFilename) {
-  bool netlog_started =
-      [Cronet startNetLogToFile:@"/home/netlog.json" logBytes:NO];
-
-  EXPECT_FALSE(netlog_started);
-}
-
-TEST_F(NetLogTest, ExperimentalOptions) {
-  [Cronet shutdownForTesting];
-  NSString* netlog_file = @"cronet_netlog.json";
-  NSString* netlog_path = [Cronet getNetLogPathForFile:netlog_file];
-
-  // Remove old netlog if any.
-  [[NSFileManager defaultManager] removeItemAtPath:netlog_path error:nil];
-
-  // Set experimental options and start the netlog.
-  [Cronet
-      setExperimentalOptions:
-          @"{ \"QUIC\" : {\"max_server_configs_stored_in_properties\" : 8} }"];
-
-  StartCronet(net::QuicSimpleTestServer::GetPort());
-  bool netlog_started =
-      [Cronet startNetLogToFile:@"cronet_netlog.json" logBytes:NO];
-  ASSERT_TRUE(netlog_started);
-
-  // Stop the netlog and check that it contains the experimental options.
-  [Cronet stopNetLog];
-
-  NSError* error = nil;
-  NSString* netlog_content =
-      [NSString stringWithContentsOfFile:netlog_path
-                                encoding:NSASCIIStringEncoding
-                                   error:&error];
-  ASSERT_FALSE(error) << error.localizedDescription.UTF8String;
-  ASSERT_TRUE(netlog_content);
-  ASSERT_TRUE([netlog_content
-      containsString:@"\"cronetExperimentalParams\":{\"QUIC\":{\"max_server_"
-                     @"configs_stored_in_properties\":8}}"])
-      << "Netlog doesn't contain 'cronetExperimentalParams'.";
-}
-}
diff --git a/components/cronet/ios/test/cronet_performance_test.mm b/components/cronet/ios/test/cronet_performance_test.mm
deleted file mode 100644
index 258ab1ad527bc..0000000000000
--- a/components/cronet/ios/test/cronet_performance_test.mm
+++ /dev/null
@@ -1,275 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import <Cronet/Cronet.h>
-#import <Foundation/Foundation.h>
-
-#include <stdint.h>
-
-#include "base/logging.h"
-#include "base/strings/stringprintf.h"
-#include "base/strings/sys_string_conversions.h"
-#include "components/cronet/ios/test/cronet_test_base.h"
-#include "components/cronet/testing/test_server/test_server.h"
-#include "net/base/mac/url_conversions.h"
-#include "net/base/net_errors.h"
-#include "net/cert/mock_cert_verifier.h"
-#include "net/test/quic_simple_test_server.h"
-#include "testing/gtest/include/gtest/gtest.h"
-#include "testing/gtest_mac.h"
-#include "url/gurl.h"
-
-#if !defined(__has_feature) || !__has_feature(objc_arc)
-#error "This file requires ARC support."
-#endif
-
-namespace {
-
-const int kTestIterations = 10;
-const BOOL kUseExternalUrl = NO;
-const int kDownloadSize = 19307439;  // used for internal server only
-const char* kExternalUrl = "https://www.gstatic.com/chat/hangouts/bg/davec.jpg";
-
-struct PerfResult {
-  NSTimeInterval total;
-  NSTimeInterval mean;
-  NSTimeInterval max;
-  int64_t total_bytes_downloaded;
-  int failed_requests;
-  int total_requests;
-};
-
-struct TestConfig {
-  BOOL quic;
-  BOOL http2;
-  BOOL akd4;
-  BOOL cronet;
-};
-
-bool operator<(TestConfig a, TestConfig b) {
-  return std::tie(a.quic, a.http2, a.akd4, a.cronet) <
-         std::tie(b.quic, b.http2, b.akd4, b.cronet);
-}
-
-const TestConfig test_combinations[] = {
-    //  QUIC   HTTP2  AKD4   Cronet
-    { false, false, false, false, },
-    { false, false, false, true, },
-    { false, true, false, true, },
-    { true, false, false, true, },
-    { true, false, true, true, },
-};
-
-}  // namespace
-
-namespace cronet {
-
-class PerfTest : public CronetTestBase,
-                 public ::testing::WithParamInterface<TestConfig> {
- public:
-  static void TearDownTestCase() {
-    NSMutableString* perf_data_acc = [NSMutableString stringWithCapacity:0];
-
-    LOG(INFO) << "Performance Data:";
-    for (auto const& entry : perf_test_results) {
-      NSString* formatted_entry = [NSString
-          stringWithFormat:
-              @"Quic %i\tHttp2 %i\tAKD4 %i\tCronet %i: Mean: %fs "
-              @"(%fmbps)\tMax: "
-              @"%fs with %i fails out of %i total requests.",
-              entry.first.quic, entry.first.http2, entry.first.akd4,
-              entry.first.cronet, entry.second.mean,
-              entry.second.total ? 8 * entry.second.total_bytes_downloaded /
-                                       entry.second.total / 1e6
-                                 : 0,
-              entry.second.max, entry.second.failed_requests,
-              entry.second.total_requests];
-
-      [perf_data_acc appendFormat:@"%@\n", formatted_entry];
-
-      LOG(INFO) << base::SysNSStringToUTF8(formatted_entry);
-    }
-
-    NSString* filename = [NSString
-        stringWithFormat:@"performance_metrics-%@.txt",
-                         [[NSDate date]
-                             descriptionWithLocale:[NSLocale currentLocale]]];
-    NSString* path =
-        [[[[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory
-                                                  inDomains:NSUserDomainMask]
-            lastObject] URLByAppendingPathComponent:filename] path];
-
-    NSData* filedata = [perf_data_acc dataUsingEncoding:NSUTF8StringEncoding];
-    [[NSFileManager defaultManager] createFileAtPath:path
-                                            contents:filedata
-                                          attributes:nil];
-  }
-
- protected:
-  static std::map<TestConfig, PerfResult> perf_test_results;
-
-  PerfTest() {}
-  ~PerfTest() override {}
-
-  void SetUp() override {
-    CronetTestBase::SetUp();
-    TestServer::Start();
-
-    // These are normally called by StartCronet(), but because of the test
-    // parameterization we need to call them inline, and not use StartCronet()
-    [Cronet setUserAgent:@"CronetTest/1.0.0.0" partial:NO];
-    [Cronet setQuicEnabled:GetParam().quic];
-    [Cronet setHttp2Enabled:GetParam().http2];
-    [Cronet setAcceptLanguages:@"en-US,en"];
-    if (kUseExternalUrl) {
-      NSString* external_host = [[NSURL
-          URLWithString:[NSString stringWithUTF8String:kExternalUrl]] host];
-      [Cronet addQuicHint:external_host port:443 altPort:443];
-    } else {
-      [Cronet addQuicHint:@"test.example.com" port:443 altPort:443];
-    }
-    [Cronet enableTestCertVerifierForTesting];
-    [Cronet setHttpCacheType:CRNHttpCacheTypeDisabled];
-    if (GetParam().akd4) {
-      [Cronet setExperimentalOptions:
-                  @"{\"QUIC\":{\"connection_options\":\"AKD4\"}}"];
-    }
-
-    [Cronet start];
-
-    NSString* rules = base::SysUTF8ToNSString(
-        base::StringPrintf("MAP test.example.com 127.0.0.1:%d,"
-                           "MAP notfound.example.com ~NOTFOUND",
-                           net::QuicSimpleTestServer::GetPort()));
-    [Cronet setHostResolverRulesForTesting:rules];
-    // This is the end of the behavior normally performed by StartCronet()
-
-    NSURLSessionConfiguration* config =
-        [NSURLSessionConfiguration ephemeralSessionConfiguration];
-    config.requestCachePolicy = NSURLRequestReloadIgnoringLocalCacheData;
-    if (GetParam().cronet) {
-      [Cronet registerHttpProtocolHandler];
-      [Cronet installIntoSessionConfiguration:config];
-    } else {
-      [Cronet unregisterHttpProtocolHandler];
-    }
-    session_ = [NSURLSession sessionWithConfiguration:config
-                                             delegate:delegate_
-                                        delegateQueue:nil];
-  }
-
-  void TearDown() override {
-    TestServer::Shutdown();
-
-    [Cronet shutdownForTesting];
-    CronetTestBase::TearDown();
-  }
-
-  NSURLSession* session_;
-};
-
-// static
-std::map<TestConfig, PerfResult> PerfTest::perf_test_results;
-
-TEST_P(PerfTest, NSURLSessionReceivesImageLoop) {
-  int iterations = kTestIterations;
-  int failed_iterations = 0;
-  int64_t total_bytes_received = 0;
-  NSTimeInterval elapsed_total = 0;
-  NSTimeInterval elapsed_max = 0;
-
-  int first_log = false;
-
-  LOG(INFO) << "Running with parameters: "
-            << "QUIC: " << GetParam().quic << "\t"
-            << "HTTP2: " << GetParam().http2 << "\t"
-            << "AKD4: " << GetParam().akd4 << "\t"
-            << "Cronet: " << GetParam().cronet << "\t";
-
-  NSURL* url;
-  if (kUseExternalUrl) {
-    url = net::NSURLWithGURL(GURL(kExternalUrl));
-  } else {
-    LOG(INFO) << "Downloading " << kDownloadSize << " bytes per iteration";
-    url =
-        net::NSURLWithGURL(GURL(TestServer::PrepareBigDataURL(kDownloadSize)));
-  }
-
-  for (int i = 0; i < iterations; ++i) {
-    __block BOOL block_used = NO;
-    NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      block_used = YES;
-      EXPECT_EQ([request URL], url);
-      return YES;
-    }];
-
-    NSDate* start = [NSDate date];
-    BOOL success = StartDataTaskAndWaitForCompletion(task);
-
-    if (!success) {
-      [task cancel];
-    }
-
-    success = success && IsResponseSuccessful(task);
-
-    NSTimeInterval elapsed = -[start timeIntervalSinceNow];
-
-    // Do not tolerate failures on internal server.
-    if (!kUseExternalUrl) {
-      CHECK(success);
-    }
-
-    if (kUseExternalUrl && success && !first_log) {
-      LOG(INFO) << "Downloaded "
-                << [[delegate_ totalBytesReceivedPerTask][task] intValue]
-                << " bytes on first iteration.";
-      first_log = true;
-    }
-
-    if (!success) {
-      if ([delegate_ errorPerTask][task]) {
-        LOG(WARNING) << "Request failed during performance testing: "
-                     << base::SysNSStringToUTF8([[delegate_ errorPerTask][task]
-                            localizedDescription]);
-      } else {
-        LOG(WARNING) << "Request timed out during performance testing.";
-      }
-      ++failed_iterations;
-    } else {
-      // Checking that the correct amount of data was downloaded only makes
-      // sense if the request succeeded.
-      EXPECT_EQ([[delegate_ expectedContentLengthPerTask][task] intValue],
-                [[delegate_ totalBytesReceivedPerTask][task] intValue]);
-
-      elapsed_total += elapsed;
-      elapsed_max = MAX(elapsed, elapsed_max);
-
-      total_bytes_received +=
-          [[delegate_ totalBytesReceivedPerTask][task] intValue];
-    }
-
-    EXPECT_EQ(block_used, GetParam().cronet);
-  }
-
-  LOG(INFO) << "Elapsed Total:" << elapsed_total * 1000 << "ms";
-
-  // Reject performance data from too many failures.
-  if (kUseExternalUrl) {
-    CHECK_LE(failed_iterations, iterations / 2);
-  }
-
-  perf_test_results[GetParam()] = {
-      elapsed_total,        elapsed_total / iterations, elapsed_max,
-      total_bytes_received, failed_iterations,          iterations};
-
-  if (!kUseExternalUrl) {
-    TestServer::ReleaseBigDataURL();
-  }
-}
-
-INSTANTIATE_TEST_SUITE_P(Loops,
-                         PerfTest,
-                         ::testing::ValuesIn(test_combinations));
-}  // namespace cronet
diff --git a/components/cronet/ios/test/cronet_pkp_test.mm b/components/cronet/ios/test/cronet_pkp_test.mm
deleted file mode 100644
index 542e36d6031dc..0000000000000
--- a/components/cronet/ios/test/cronet_pkp_test.mm
+++ /dev/null
@@ -1,272 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import <Cronet/Cronet.h>
-
-#include "base/strings/sys_string_conversions.h"
-#include "components/cronet/ios/test/cronet_test_base.h"
-#include "components/cronet/ios/test/start_cronet.h"
-#include "net/base/mac/url_conversions.h"
-#include "net/cert/mock_cert_verifier.h"
-#include "net/test/cert_test_util.h"
-#include "net/test/quic_simple_test_server.h"
-#include "net/test/test_data_directory.h"
-#include "testing/gtest_mac.h"
-#include "url/gurl.h"
-
-namespace {
-const bool kIncludeSubdomains = true;
-const bool kExcludeSubdomains = false;
-const bool kSuccess = true;
-const bool kError = false;
-const std::string kServerCert = "quic-chain.pem";
-NSDate* const kDistantFuture = [NSDate distantFuture];
-}  // namespace
-
-namespace cronet {
-// Tests public-key-pinning functionality.
-class PkpTest : public CronetTestBase {
- protected:
-  void SetUp() override {
-    CronetTestBase::SetUp();
-
-    server_host_ =
-        base::SysUTF8ToNSString(net::QuicSimpleTestServer::GetHost());
-    server_domain_ =
-        base::SysUTF8ToNSString(net::QuicSimpleTestServer::GetDomain());
-    request_url_ =
-        net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-
-    // Create a Cronet enabled NSURLSession.
-    NSURLSessionConfiguration* sessionConfig =
-        [NSURLSessionConfiguration defaultSessionConfiguration];
-    [Cronet installIntoSessionConfiguration:sessionConfig];
-    url_session_ = [NSURLSession sessionWithConfiguration:sessionConfig
-                                                 delegate:delegate_
-                                            delegateQueue:nil];
-
-    // Set mock cert verifier.
-    [Cronet setMockCertVerifierForTesting:CreateMockCertVerifier({kServerCert},
-                                                                 YES)];
-  }
-
-  void TearDown() override {
-    // It is safe to call the shutdownForTesting method even if a test
-    // didn't call StartCronet().
-    [Cronet shutdownForTesting];
-    CronetTestBase::TearDown();
-  }
-
-  // Sends a request to a given URL, waits for the response and asserts that
-  // the response is either successful or containing an error depending on
-  // the value of the passed |expected_success| parameter.
-  void sendRequestAndAssertResult(NSURL* url, bool expected_success) {
-    NSURLSessionDataTask* dataTask =
-        [url_session_ dataTaskWithURL:request_url_];
-    StartDataTaskAndWaitForCompletion(dataTask);
-    if (expected_success) {
-      ASSERT_TRUE(IsResponseSuccessful(dataTask));
-    } else {
-      ASSERT_FALSE(IsResponseSuccessful(dataTask));
-      ASSERT_FALSE(IsResponseCanceled(dataTask));
-    }
-  }
-
-  // Adds a given public-key-pin and starts a Cronet engine for testing.
-  void AddPkpAndStartCronet(NSString* host,
-                            NSData* hash,
-                            BOOL include_subdomains,
-                            NSDate* expiration_date) {
-    [Cronet setEnablePublicKeyPinningBypassForLocalTrustAnchors:NO];
-    NSSet* hashes = [NSSet setWithObject:hash];
-    NSError* error;
-    BOOL success = [Cronet addPublicKeyPinsForHost:host
-                                         pinHashes:hashes
-                                 includeSubdomains:include_subdomains
-                                    expirationDate:(NSDate*)expiration_date
-                                             error:&error];
-    CHECK(success);
-    CHECK(!error);
-    StartCronet(net::QuicSimpleTestServer::GetPort());
-  }
-
-  // Returns an arbitrary public key hash that doesn't match with any test
-  // certificate.
-  static NSData* NonMatchingHash() {
-    const int length = 32;
-    std::string hash(length, '\077');
-    return [NSData dataWithBytes:hash.c_str() length:length];
-  }
-
-  // Returns hash value that matches the hash of the public key certificate used
-  // for testing.
-  static NSData* MatchingHash() {
-    scoped_refptr<net::X509Certificate> cert =
-        net::ImportCertFromFile(net::GetTestCertsDirectory(), kServerCert);
-    net::HashValue hash_value;
-    CalculatePublicKeySha256(*cert, &hash_value);
-    CHECK_EQ(32ul, hash_value.size());
-    return [NSData dataWithBytes:hash_value.data() length:hash_value.size()];
-  }
-
-  NSURLSession* url_session_;
-  NSURL* request_url_;       // "https://test.example.com/simple.txt"
-  NSString* server_host_;    // test.example.com
-  NSString* server_domain_;  // example.com
-};                           // class PkpTest
-
-// Tests the case when a mismatching pin is set for some host that is
-// different from the one the client wants to access. In that case the other
-// host pinning policy should not be applied and the client is expected to
-// receive the successful response with the response code 200.
-TEST_F(PkpTest, TestSuccessIfPinSetForDifferentHost) {
-  AddPkpAndStartCronet(@"some-other-host.com", NonMatchingHash(),
-                       kExcludeSubdomains, kDistantFuture);
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kSuccess));
-}
-
-// Tests the case when the pin hash does not match. The client is expected to
-// receive the error response.
-TEST_F(PkpTest, TestErrorIfPinDoesNotMatch) {
-  AddPkpAndStartCronet(server_host_, NonMatchingHash(), kExcludeSubdomains,
-                       kDistantFuture);
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kError));
-}
-
-// Tests the case when the pin hash matches. The client is expected to
-// receive the successful response with the response code 200.
-TEST_F(PkpTest, TestSuccessIfPinMatches) {
-  AddPkpAndStartCronet(server_host_, MatchingHash(), kExcludeSubdomains,
-                       kDistantFuture);
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kSuccess));
-}
-
-TEST_F(PkpTest, TestBypass) {
-  [Cronet setEnablePublicKeyPinningBypassForLocalTrustAnchors:YES];
-
-  NSSet* hashes = [NSSet setWithObject:NonMatchingHash()];
-  NSError* error;
-  BOOL success = [Cronet addPublicKeyPinsForHost:server_host_
-                                       pinHashes:hashes
-                               includeSubdomains:kExcludeSubdomains
-                                  expirationDate:(NSDate*)kDistantFuture
-                                           error:&error];
-
-  EXPECT_FALSE(success);
-  EXPECT_EQ([error code], CRNErrorUnsupportedConfig);
-}
-
-// Tests the case when the pin hash does not match and the client accesses the
-// subdomain of the configured PKP host with includeSubdomains flag set to true.
-// The client is expected to receive the error response.
-TEST_F(PkpTest, TestIncludeSubdomainsFlagEqualTrue) {
-  AddPkpAndStartCronet(server_domain_, NonMatchingHash(), kIncludeSubdomains,
-                       kDistantFuture);
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kError));
-}
-
-// Tests the case when the pin hash does not match and the client accesses the
-// subdomain of the configured PKP host with includeSubdomains flag set to
-// false. The client is expected to receive the successful response with the
-// response code 200.
-TEST_F(PkpTest, TestIncludeSubdomainsFlagEqualFalse) {
-  AddPkpAndStartCronet(server_domain_, NonMatchingHash(), kExcludeSubdomains,
-                       kDistantFuture);
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kSuccess));
-}
-
-// Tests a mismatching pin that will expire in 10 seconds. The pins should be
-// still valid and enforced during the request; thus returning the pin match
-// error.
-TEST_F(PkpTest, TestSoonExpiringPin) {
-  AddPkpAndStartCronet(server_host_, NonMatchingHash(), kExcludeSubdomains,
-                       [NSDate dateWithTimeIntervalSinceNow:10]);
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kError));
-}
-
-// Tests mismatching pin that expired 1 second ago. Since the pin has
-// expired, it should not be enforced during the request; thus a successful
-// response is expected.
-TEST_F(PkpTest, TestRecentlyExpiredPin) {
-  AddPkpAndStartCronet(server_host_, NonMatchingHash(), kExcludeSubdomains,
-                       [NSDate dateWithTimeIntervalSinceNow:-1]);
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kSuccess));
-}
-
-// Tests that host pinning is not persisted between multiple CronetEngine
-// instances.
-TEST_F(PkpTest, TestPinsAreNotPersisted) {
-  AddPkpAndStartCronet(server_host_, NonMatchingHash(), kExcludeSubdomains,
-                       kDistantFuture);
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kError));
-  [Cronet shutdownForTesting];
-
-  // Restart Cronet engine and try the same request again. Since the pins are
-  // not persisted, a successful response is expected.
-  StartCronet(net::QuicSimpleTestServer::GetPort());
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kSuccess));
-}
-
-// Tests that an error is returned when PKP hash size is not equal to 256 bits.
-TEST_F(PkpTest, TestHashLengthError) {
-  [Cronet setEnablePublicKeyPinningBypassForLocalTrustAnchors:NO];
-  char hash[31];
-  NSData* shortHash = [NSData dataWithBytes:hash length:sizeof(hash)];
-  NSSet* hashes = [NSSet setWithObject:shortHash];
-  NSError* error;
-  BOOL success = [Cronet addPublicKeyPinsForHost:server_host_
-                                       pinHashes:hashes
-                               includeSubdomains:kExcludeSubdomains
-                                  expirationDate:kDistantFuture
-                                           error:&error];
-  EXPECT_FALSE(success);
-  ASSERT_TRUE(error != nil);
-  EXPECT_STREQ([CRNCronetErrorDomain cStringUsingEncoding:NSUTF8StringEncoding],
-               [error.domain cStringUsingEncoding:NSUTF8StringEncoding]);
-  EXPECT_EQ(CRNErrorInvalidArgument, error.code);
-  EXPECT_TRUE([error.description rangeOfString:@"Invalid argument"].location !=
-              NSNotFound);
-  EXPECT_TRUE([error.description rangeOfString:@"pinHashes"].location !=
-              NSNotFound);
-  EXPECT_STREQ("pinHashes", [error.userInfo[CRNInvalidArgumentKey]
-                                cStringUsingEncoding:NSUTF8StringEncoding]);
-}
-
-// Tests that setting pins for the same host second time overrides the previous
-// pins.
-TEST_F(PkpTest, TestPkpOverrideNonMatchingToMatching) {
-  [Cronet setEnablePublicKeyPinningBypassForLocalTrustAnchors:NO];
-  // Add non-matching pin.
-  BOOL success =
-      [Cronet addPublicKeyPinsForHost:server_host_
-                            pinHashes:[NSSet setWithObject:NonMatchingHash()]
-                    includeSubdomains:kExcludeSubdomains
-                       expirationDate:kDistantFuture
-                                error:nil];
-  ASSERT_TRUE(success);
-  // Add matching pin.
-  AddPkpAndStartCronet(server_host_, MatchingHash(), kExcludeSubdomains,
-                       kDistantFuture);
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kSuccess));
-}
-
-// Tests that setting pins for the same host second time overrides the previous
-// pins.
-TEST_F(PkpTest, TestPkpOverrideMatchingToNonMatching) {
-  [Cronet setEnablePublicKeyPinningBypassForLocalTrustAnchors:NO];
-  // Add matching pin.
-  BOOL success =
-      [Cronet addPublicKeyPinsForHost:server_host_
-                            pinHashes:[NSSet setWithObject:MatchingHash()]
-                    includeSubdomains:kExcludeSubdomains
-                       expirationDate:kDistantFuture
-                                error:nil];
-  ASSERT_TRUE(success);
-  // Add non-matching pin.
-  AddPkpAndStartCronet(server_host_, NonMatchingHash(), kExcludeSubdomains,
-                       kDistantFuture);
-  ASSERT_NO_FATAL_FAILURE(sendRequestAndAssertResult(request_url_, kError));
-}
-
-}  // namespace cronet
diff --git a/components/cronet/ios/test/cronet_prefs_test.mm b/components/cronet/ios/test/cronet_prefs_test.mm
deleted file mode 100644
index e0dbd11d417e6..0000000000000
--- a/components/cronet/ios/test/cronet_prefs_test.mm
+++ /dev/null
@@ -1,129 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "base/files/file_path.h"
-#include "base/files/file_util.h"
-#include "base/location.h"
-#include "base/path_service.h"
-#include "components/cronet/ios/test/cronet_test_base.h"
-#include "components/cronet/ios/test/start_cronet.h"
-#include "components/cronet/testing/test_server/test_server.h"
-#include "net/base/mac/url_conversions.h"
-#include "net/test/quic_simple_test_server.h"
-#include "testing/gtest_mac.h"
-#include "url/gurl.h"
-
-namespace cronet {
-
-class PrefsTest : public CronetTestBase {
- protected:
-  void SetUp() override {
-    CronetTestBase::SetUp();
-    TestServer::Start();
-
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      return YES;
-    }];
-    NSURLSessionConfiguration* config =
-        [NSURLSessionConfiguration ephemeralSessionConfiguration];
-    [Cronet installIntoSessionConfiguration:config];
-    session_ = [NSURLSession sessionWithConfiguration:config
-                                             delegate:delegate_
-                                        delegateQueue:nil];
-  }
-
-  void TearDown() override {
-    TestServer::Shutdown();
-    [Cronet stopNetLog];
-    [Cronet shutdownForTesting];
-    CronetTestBase::TearDown();
-  }
-
-  NSString* GetFileContentWaitUntilCreated(NSString* file,
-                                           NSTimeInterval timeout,
-                                           NSError** error) {
-    // Wait until the file appears on disk.
-    NSFileManager* file_manager = [NSFileManager defaultManager];
-    NSLog(@"Waiting for file %@.", file);
-    while (timeout > 0) {
-      if ([file_manager fileExistsAtPath:file]) {
-        NSLog(@"File %@ exists.", file);
-        break;
-      }
-      NSLog(@"Time left: %i seconds", (int)timeout);
-      NSTimeInterval sleep_interval = fmin(5.0, timeout);
-      [NSThread sleepForTimeInterval:sleep_interval];
-      timeout -= sleep_interval;
-    }
-
-    // Read the file on the file thread to avoid reading the changing file.
-    dispatch_semaphore_t lock = dispatch_semaphore_create(0);
-    __block NSString* file_content = nil;
-    __block NSError* block_error = nil;
-    PostBlockToFileThread(FROM_HERE, ^{
-      file_content = [NSString stringWithContentsOfFile:file
-                                               encoding:NSUTF8StringEncoding
-                                                  error:&block_error];
-      dispatch_semaphore_signal(lock);
-    });
-
-    // Wait for the file thread to finish reading the file content.
-    dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);
-    if (block_error) {
-      *error = block_error;
-    }
-    return file_content;
-  }
-
-  NSURLSession* session_;
-};
-
-TEST_F(PrefsTest, HttpServerProperties) {
-  base::FilePath storage_path;
-  bool result = base::PathService::Get(base::DIR_CACHE, &storage_path);
-  ASSERT_TRUE(result);
-  storage_path =
-      storage_path.Append(FILE_PATH_LITERAL("cronet/prefs/local_prefs.json"));
-  NSString* prefs_file_name =
-      [NSString stringWithCString:storage_path.AsUTF8Unsafe().c_str()
-                         encoding:NSUTF8StringEncoding];
-
-  // Delete the prefs file if it exists.
-  [[NSFileManager defaultManager] removeItemAtPath:prefs_file_name error:nil];
-
-  // Add "max_server_configs_stored_in_properties" experimental option.
-  NSString* options =
-      @"{ \"QUIC\" : {\"max_server_configs_stored_in_properties\" : 5} }";
-  [Cronet setExperimentalOptions:options];
-
-  // Start Cronet Engine
-  StartCronet(net::QuicSimpleTestServer::GetPort());
-
-  // Start the request
-  NSURL* url = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:url];
-  StartDataTaskAndWaitForCompletion(task);
-
-  // Wait 80 seconds for the prefs file to appear on the disk.
-  NSError* error = nil;
-  NSString* prefs_file_content =
-      GetFileContentWaitUntilCreated(prefs_file_name, 80, &error);
-  ASSERT_FALSE(error) << "Unable to read " << storage_path << " file. Error: "
-                      << error.localizedDescription.UTF8String;
-
-  // Check the file content
-  ASSERT_TRUE(prefs_file_content);
-  ASSERT_TRUE(
-      [prefs_file_content containsString:@"{\"http_server_properties\":"])
-      << "Unable to find 'http_server_properties' in the JSON prefs: "
-      << prefs_file_content.UTF8String;
-  ASSERT_TRUE([prefs_file_content containsString:@"\"supports_quic\":"])
-      << "Unable to find 'supports_quic' in the JSON prefs: "
-      << prefs_file_content.UTF8String;
-
-  // Delete the prefs file to avoid side effects with other tests.
-  [[NSFileManager defaultManager] removeItemAtPath:prefs_file_name error:nil];
-}
-
-}  // namespace cronet
diff --git a/components/cronet/ios/test/cronet_quic_test.mm b/components/cronet/ios/test/cronet_quic_test.mm
deleted file mode 100644
index 4faa16e7c8c2b..0000000000000
--- a/components/cronet/ios/test/cronet_quic_test.mm
+++ /dev/null
@@ -1,111 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import <Cronet/Cronet.h>
-
-#include "base/strings/stringprintf.h"
-#include "base/strings/sys_string_conversions.h"
-#include "components/cronet/ios/test/cronet_test_base.h"
-#include "net/base/mac/url_conversions.h"
-#include "net/cert/mock_cert_verifier.h"
-#include "net/test/quic_simple_test_server.h"
-#include "testing/gtest/include/gtest/gtest.h"
-#include "testing/gtest_mac.h"
-#include "url/gurl.h"
-
-namespace cronet {
-
-class QuicTest : public CronetTestBase {
- protected:
-  QuicTest() {}
-  ~QuicTest() override {}
-
-  void SetUp() override {
-    CronetTestBase::SetUp();
-
-    // Prepare Cronet
-    [Cronet setUserAgent:@"CronetTest/1.0.0.0" partial:NO];
-    [Cronet setHttp2Enabled:false];
-    [Cronet setQuicEnabled:true];
-    [Cronet setAcceptLanguages:@"en-US,en"];
-    [Cronet addQuicHint:@"test.example.com" port:443 altPort:443];
-    [Cronet enableTestCertVerifierForTesting];
-    [Cronet setHttpCacheType:CRNHttpCacheTypeDisabled];
-    [Cronet setMetricsEnabled:YES];
-    [Cronet setRequestFilterBlock:^(NSURLRequest* request) {
-      return YES;
-    }];
-
-    // QUIC Server simple URL.
-    simple_url_ = net::NSURLWithGURL(net::QuicSimpleTestServer::GetSimpleURL());
-  }
-
-  void TearDown() override {
-    [Cronet stopNetLog];
-    [Cronet shutdownForTesting];
-    CronetTestBase::TearDown();
-  }
-
-  void StartCronet() {
-    [Cronet start];
-
-    // Add URL mapping to test server.
-    NSString* rules = base::SysUTF8ToNSString(
-        base::StringPrintf("MAP test.example.com 127.0.0.1:%d,"
-                           "MAP notfound.example.com ~NOTFOUND",
-                           net::QuicSimpleTestServer::GetPort()));
-    [Cronet setHostResolverRulesForTesting:rules];
-
-    // Prepare a session.
-    NSURLSessionConfiguration* config =
-        [NSURLSessionConfiguration ephemeralSessionConfiguration];
-    config.requestCachePolicy = NSURLRequestReloadIgnoringLocalCacheData;
-    [Cronet installIntoSessionConfiguration:config];
-    session_ = [NSURLSession sessionWithConfiguration:config
-                                             delegate:delegate_
-                                        delegateQueue:nil];
-  }
-
-  NSURLSession* session_;
-  NSURL* simple_url_;
-};
-
-TEST_F(QuicTest, InvalidQuicHost) {
-  BOOL success =
-      [Cronet addQuicHint:@"https://test.example.com/" port:443 altPort:443];
-
-  EXPECT_FALSE(success);
-}
-
-TEST_F(QuicTest, ValidQuicHost) {
-  BOOL success = [Cronet addQuicHint:@"test.example.com" port:443 altPort:443];
-
-  EXPECT_TRUE(success);
-}
-
-// Tests a request with enabled "enable_socket_recv_optimization" QUIC
-// experimental option.
-TEST_F(QuicTest, RequestWithSocketOptimizationEnabled) {
-  // Apply test specific Cronet configuration and start it.
-  [Cronet setExperimentalOptions:
-              @"{\"QUIC\" : {\"enable_socket_recv_optimization\" : true} }"];
-  StartCronet();
-
-  // Make request and wait for the response.
-  NSURLSessionDataTask* task = [session_ dataTaskWithURL:simple_url_];
-  StartDataTaskAndWaitForCompletion(task);
-
-  // Check that a successful response was received using QUIC.
-  EXPECT_EQ(nil, [delegate_ error]);
-  EXPECT_EQ(net::QuicSimpleTestServer::GetSimpleBodyValue(),
-            base::SysNSStringToUTF8(delegate_.responseBody));
-  if (@available(iOS 10.2, *)) {
-    NSURLSessionTaskTransactionMetrics* metrics =
-        delegate_.taskMetrics.transactionMetrics[0];
-    EXPECT_TRUE([metrics.networkProtocolName containsString:@"quic"] ||
-                [metrics.networkProtocolName containsString:@"h3"])
-        << base::SysNSStringToUTF8(metrics.networkProtocolName);
-  }
-}
-}
diff --git a/components/cronet/ios/test/cronet_test_base.h b/components/cronet/ios/test/cronet_test_base.h
deleted file mode 100644
index fcb1e46cf5677..0000000000000
--- a/components/cronet/ios/test/cronet_test_base.h
+++ /dev/null
@@ -1,121 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_IOS_TEST_CRONET_TEST_BASE_H_
-#define COMPONENTS_CRONET_IOS_TEST_CRONET_TEST_BASE_H_
-
-#include <Cronet/Cronet.h>
-
-#include "base/bind.h"
-#include "net/cert/cert_verifier.h"
-#include "net/cert/x509_certificate.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-#pragma mark
-
-namespace base {
-class Location;
-class SingleThreadTaskRunner;
-class Thread;
-}
-
-namespace {
-typedef void (^BlockType)(void);
-}  // namespace
-
-// Exposes private test-only methods of the Cronet class.
-@interface Cronet (ExposedForTesting)
-+ (void)shutdownForTesting;
-+ (void)setMockCertVerifierForTesting:
-    (std::unique_ptr<net::CertVerifier>)certVerifier;
-+ (void)setEnablePublicKeyPinningBypassForLocalTrustAnchors:(BOOL)enable;
-+ (base::SingleThreadTaskRunner*)getFileThreadRunnerForTesting;
-+ (base::SingleThreadTaskRunner*)getNetworkThreadRunnerForTesting;
-+ (size_t)getMetricsMapSize;
-@end
-
-// NSURLSessionDataDelegate delegate implementation used by the tests to
-// wait for a response and check its status.
-@interface TestDelegate : NSObject<NSURLSessionDataDelegate>
-
-// Error the request this delegate is attached to failed with, if any.
-@property(retain, atomic)
-    NSMutableDictionary<NSURLSessionTask*, NSError*>* errorPerTask;
-
-// Contains total amount of received data.
-@property(readonly) NSMutableDictionary<NSURLSessionDataTask*, NSNumber*>*
-    totalBytesReceivedPerTask;
-
-// Contains the expected amount of received data.
-@property(readonly) NSMutableDictionary<NSURLSessionDataTask*, NSNumber*>*
-    expectedContentLengthPerTask;
-
-// Contains metrics data.
-@property(readonly) NSURLSessionTaskMetrics* taskMetrics NS_AVAILABLE_IOS(10.0);
-
-// Contains NSHTTPURLResponses for the tasks.
-@property(readonly)
-    NSMutableDictionary<NSURLSessionDataTask*, NSHTTPURLResponse*>*
-        responsePerTask;
-
-// Resets the delegate, so it can be used again for another request.
-- (void)reset;
-
-// Contains the response body.
-- (NSString*)responseBody:(NSURLSessionDataTask*)task;
-
-/// Waits for a single request to complete.
-
-/// @return  |NO| if the request didn't complete and the method timed-out.
-- (BOOL)waitForDone:(NSURLSessionDataTask*)task
-        withTimeout:(int64_t)deadline_ns;
-
-// Convenience functions for single-task delegates
-- (NSError*)error;
-- (long)totalBytesReceived;
-- (long)expectedContentLength;
-- (NSString*)responseBody;
-
-@end
-
-// Forward declaration.
-namespace net {
-class MockCertVerifier;
-}
-
-namespace cronet {
-
-// A base class that should be extended by all other Cronet tests.
-// The class automatically starts and stops the test QUIC server.
-class CronetTestBase : public ::testing::Test {
- protected:
-  static bool CalculatePublicKeySha256(const net::X509Certificate& cert,
-                                       net::HashValue* out_hash_value);
-
-  void SetUp() override;
-  void TearDown() override;
-  bool StartDataTaskAndWaitForCompletion(NSURLSessionDataTask* task,
-                                         int64_t deadline_ns = 15 *
-                                                               NSEC_PER_SEC);
-  std::unique_ptr<net::MockCertVerifier> CreateMockCertVerifier(
-      const std::vector<std::string>& certs,
-      bool known_root);
-
-  void PostBlockToFileThread(const base::Location& from_here, BlockType block);
-  void PostBlockToNetworkThread(const base::Location& from_here,
-                                BlockType block);
-
-  ::testing::AssertionResult IsResponseSuccessful(NSURLSessionDataTask* task);
-  ::testing::AssertionResult IsResponseCanceled(NSURLSessionDataTask* task);
-
-  TestDelegate* delegate_;
-
- private:
-  void ExecuteBlock(BlockType block);
-
-};  // class CronetTestBase
-
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_IOS_TEST_CRONET_TEST_BASE_H_
diff --git a/components/cronet/ios/test/cronet_test_base.mm b/components/cronet/ios/test/cronet_test_base.mm
deleted file mode 100644
index 3d1289d583bcc..0000000000000
--- a/components/cronet/ios/test/cronet_test_base.mm
+++ /dev/null
@@ -1,327 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "cronet_test_base.h"
-
-#include "base/location.h"
-#include "base/threading/thread.h"
-#include "crypto/sha2.h"
-#include "net/base/net_errors.h"
-#include "net/cert/asn1_util.h"
-#include "net/cert/mock_cert_verifier.h"
-#include "net/cert/x509_util.h"
-#include "net/test/cert_test_util.h"
-#include "net/test/quic_simple_test_server.h"
-#include "net/test/test_data_directory.h"
-
-#pragma mark
-
-@implementation TestDelegate {
-  // Dictionary which maps tasks to completion semaphores for this TestDelegate.
-  // When a request this delegate is attached to finishes (either successfully
-  // or with an error), this delegate signals that task's semaphore.
-  NSMutableDictionary<NSURLSessionTask*, dispatch_semaphore_t>* _semaphores;
-
-  NSMutableDictionary<NSURLSessionDataTask*, NSMutableArray<NSData*>*>*
-      _responseDataPerTask;
-}
-
-@synthesize errorPerTask = _errorPerTask;
-@synthesize totalBytesReceivedPerTask = _totalBytesReceivedPerTask;
-@synthesize expectedContentLengthPerTask = _expectedContentLengthPerTask;
-@synthesize taskMetrics = _taskMetrics;
-@synthesize responsePerTask = _responsePerTask;
-
-- (id)init {
-  if (self = [super init]) {
-    _semaphores = [NSMutableDictionary dictionaryWithCapacity:0];
-  }
-  return self;
-}
-
-- (void)reset {
-  _semaphores = [NSMutableDictionary dictionaryWithCapacity:0];
-  _responseDataPerTask = [NSMutableDictionary dictionaryWithCapacity:0];
-  _errorPerTask = [NSMutableDictionary dictionaryWithCapacity:0];
-  _totalBytesReceivedPerTask = [NSMutableDictionary dictionaryWithCapacity:0];
-  _expectedContentLengthPerTask =
-      [NSMutableDictionary dictionaryWithCapacity:0];
-  _responsePerTask = [NSMutableDictionary dictionaryWithCapacity:0];
-  _taskMetrics = nil;
-}
-
-- (NSError*)error {
-  if ([_errorPerTask count] == 0)
-    return nil;
-
-  DCHECK([_errorPerTask count] == 1);
-  return [[_errorPerTask objectEnumerator] nextObject];
-}
-
-- (long)totalBytesReceived {
-  DCHECK([_totalBytesReceivedPerTask count] == 1);
-  return [[[_totalBytesReceivedPerTask objectEnumerator] nextObject] intValue];
-}
-
-- (long)expectedContentLength {
-  DCHECK([_expectedContentLengthPerTask count] == 1);
-  return
-      [[[_expectedContentLengthPerTask objectEnumerator] nextObject] intValue];
-}
-
-- (NSString*)responseBody {
-  if ([_responseDataPerTask count] == 0)
-    return nil;
-
-  DCHECK([_responseDataPerTask count] == 1);
-  NSURLSessionDataTask* task =
-      [[_responseDataPerTask keyEnumerator] nextObject];
-
-  return [self responseBody:task];
-}
-
-- (NSString*)responseBody:(NSURLSessionDataTask*)task {
-  if (_responseDataPerTask[task] == nil) {
-    return nil;
-  }
-  NSMutableString* body = [NSMutableString string];
-  for (NSData* data in _responseDataPerTask[task]) {
-    [body appendString:[[NSString alloc] initWithData:data
-                                             encoding:NSUTF8StringEncoding]];
-  }
-  VLOG(3) << "responseBody size:" << [body length]
-          << " chunks:" << [_responseDataPerTask[task] count];
-  return body;
-}
-
-- (dispatch_semaphore_t)getSemaphoreForTask:(NSURLSessionTask*)task {
-  @synchronized(_semaphores) {
-    if (!_semaphores[task]) {
-      _semaphores[task] = dispatch_semaphore_create(0);
-    }
-    return _semaphores[task];
-  }
-}
-
-// |timeout_ns|, if positive, specifies how long to wait before timing out in
-// nanoseconds, a value of 0 or less means do not ever time out.
-- (BOOL)waitForDone:(NSURLSessionDataTask*)task
-        withTimeout:(int64_t)timeout_ns {
-  BOOL request_completed = NO;
-  dispatch_semaphore_t semaphore = [self getSemaphoreForTask:task];
-  if (timeout_ns > 0) {
-    request_completed =
-        dispatch_semaphore_wait(
-            semaphore, dispatch_time(DISPATCH_TIME_NOW, timeout_ns)) == 0;
-    if (!request_completed) {
-      // Cancel the pending request; otherwise, the request is still active and
-      // may invoke the delegate methods later.
-      [task cancel];
-      LOG(WARNING) << "The request was canceled due to timeout.";
-      // Give the canceled request some time to execute didCompleteWithError
-      // method with NSURLErrorCancelled error code.
-      dispatch_semaphore_wait(
-          semaphore, dispatch_time(DISPATCH_TIME_NOW, 5 * NSEC_PER_SEC));
-    }
-  } else {
-    request_completed =
-        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER) == 0;
-  }
-  @synchronized(_semaphores) {
-    if (request_completed) {
-      [_semaphores removeObjectForKey:task];
-    }
-  }
-  return request_completed;
-}
-
-- (void)URLSession:(NSURLSession*)session
-    didBecomeInvalidWithError:(NSError*)error {
-}
-
-- (void)URLSession:(NSURLSession*)session
-                    task:(NSURLSessionTask*)task
-    didCompleteWithError:(NSError*)error {
-  if (error)
-    _errorPerTask[task] = error;
-
-  dispatch_semaphore_t _semaphore = [self getSemaphoreForTask:task];
-  dispatch_semaphore_signal(_semaphore);
-}
-
-- (void)URLSession:(NSURLSession*)session
-                   task:(NSURLSessionTask*)task
-    didReceiveChallenge:(NSURLAuthenticationChallenge*)challenge
-      completionHandler:
-          (void (^)(NSURLSessionAuthChallengeDisposition disp,
-                    NSURLCredential* credential))completionHandler {
-  completionHandler(NSURLSessionAuthChallengeUseCredential, nil);
-}
-
-- (void)URLSession:(NSURLSession*)session
-                          task:(NSURLSessionTask*)task
-    didFinishCollectingMetrics:(NSURLSessionTaskMetrics*)metrics
-    NS_AVAILABLE_IOS(10.0) {
-  _taskMetrics = metrics;
-}
-
-- (void)URLSession:(NSURLSession*)session
-              dataTask:(NSURLSessionDataTask*)dataTask
-    didReceiveResponse:(NSURLResponse*)response
-     completionHandler:(void (^)(NSURLSessionResponseDisposition disposition))
-                           completionHandler {
-  _expectedContentLengthPerTask[dataTask] =
-      [NSNumber numberWithInt:[response expectedContentLength]];
-  _responsePerTask[dataTask] = static_cast<NSHTTPURLResponse*>(response);
-  completionHandler(NSURLSessionResponseAllow);
-}
-
-- (void)URLSession:(NSURLSession*)session
-          dataTask:(NSURLSessionDataTask*)dataTask
-    didReceiveData:(NSData*)data {
-  if (_totalBytesReceivedPerTask[dataTask]) {
-    _totalBytesReceivedPerTask[dataTask] = [NSNumber
-        numberWithInt:[_totalBytesReceivedPerTask[dataTask] intValue] +
-                      [data length]];
-  } else {
-    _totalBytesReceivedPerTask[dataTask] =
-        [NSNumber numberWithInt:[data length]];
-  }
-
-  if (_responseDataPerTask[dataTask] == nil) {
-    _responseDataPerTask[dataTask] = [[NSMutableArray alloc] init];
-  }
-  [_responseDataPerTask[dataTask] addObject:data];
-}
-
-- (void)URLSession:(NSURLSession*)session
-             dataTask:(NSURLSessionDataTask*)dataTask
-    willCacheResponse:(NSCachedURLResponse*)proposedResponse
-    completionHandler:
-        (void (^)(NSCachedURLResponse* cachedResponse))completionHandler {
-  completionHandler(proposedResponse);
-}
-
-@end
-
-namespace cronet {
-
-void CronetTestBase::SetUp() {
-  ::testing::Test::SetUp();
-  net::QuicSimpleTestServer::Start();
-  delegate_ = [[TestDelegate alloc] init];
-}
-
-void CronetTestBase::TearDown() {
-  net::QuicSimpleTestServer::Shutdown();
-  ::testing::Test::TearDown();
-}
-
-// Launches the supplied |task| and blocks until it completes, with a default
-// timeout of 20 seconds.  |deadline_ns|, if specified, is in nanoseconds.
-// If |deadline_ns| is 0 or negative, the request will not time out.
-bool CronetTestBase::StartDataTaskAndWaitForCompletion(
-    NSURLSessionDataTask* task,
-    int64_t deadline_ns) {
-  [delegate_ reset];
-  [task resume];
-  return [delegate_ waitForDone:task withTimeout:deadline_ns];
-}
-
-::testing::AssertionResult CronetTestBase::IsResponseSuccessful(
-    NSURLSessionDataTask* task) {
-  if ([delegate_ errorPerTask][task]) {
-    return ::testing::AssertionFailure() << "error in response: " <<
-           [[[delegate_ error] description]
-               cStringUsingEncoding:NSUTF8StringEncoding];
-  }
-
-  if (![delegate_ responsePerTask][task]) {
-    return ::testing::AssertionFailure() << " no response has been received";
-  }
-
-  NSInteger statusCode = [delegate_ responsePerTask][task].statusCode;
-  if (statusCode < 200 || statusCode > 299) {
-    return ::testing::AssertionFailure()
-           << " the response code was " << statusCode;
-  }
-
-  return ::testing::AssertionSuccess() << "no errors in response";
-}
-
-::testing::AssertionResult CronetTestBase::IsResponseCanceled(
-    NSURLSessionDataTask* task) {
-  NSError* error = [delegate_ errorPerTask][task];
-  if (error && [error code] == NSURLErrorCancelled)
-    return ::testing::AssertionSuccess() << "the response is canceled";
-  return ::testing::AssertionFailure() << "the response is not canceled."
-                                       << " The response error is " <<
-         [[error description] cStringUsingEncoding:NSUTF8StringEncoding];
-}
-
-std::unique_ptr<net::MockCertVerifier> CronetTestBase::CreateMockCertVerifier(
-    const std::vector<std::string>& certs,
-    bool known_root) {
-  std::unique_ptr<net::MockCertVerifier> mock_cert_verifier(
-      new net::MockCertVerifier());
-  for (const auto& cert : certs) {
-    net::CertVerifyResult verify_result;
-    verify_result.verified_cert =
-        net::ImportCertFromFile(net::GetTestCertsDirectory(), cert);
-
-    // By default, HPKP verification is enabled for known trust roots only.
-    verify_result.is_issued_by_known_root = known_root;
-
-    // Calculate the public key hash and add it to the verify_result.
-    net::HashValue hashValue;
-    CHECK(CalculatePublicKeySha256(*verify_result.verified_cert.get(),
-                                   &hashValue));
-    verify_result.public_key_hashes.push_back(hashValue);
-
-    mock_cert_verifier->AddResultForCert(verify_result.verified_cert.get(),
-                                         verify_result, net::OK);
-  }
-  return mock_cert_verifier;
-}
-
-void CronetTestBase::PostBlockToFileThread(const base::Location& from_here,
-                                           BlockType block) {
-  base::SingleThreadTaskRunner* file_runner =
-      [Cronet getFileThreadRunnerForTesting];
-  file_runner->PostTask(from_here,
-                        base::BindOnce(&CronetTestBase::ExecuteBlock,
-                                       base::Unretained(this), block));
-}
-
-void CronetTestBase::PostBlockToNetworkThread(const base::Location& from_here,
-                                              BlockType block) {
-  base::SingleThreadTaskRunner* network_runner =
-      [Cronet getNetworkThreadRunnerForTesting];
-  network_runner->PostTask(from_here,
-                           base::BindOnce(&CronetTestBase::ExecuteBlock,
-                                          base::Unretained(this), block));
-}
-
-bool CronetTestBase::CalculatePublicKeySha256(const net::X509Certificate& cert,
-                                              net::HashValue* out_hash_value) {
-  // Extract the public key from the cert.
-  base::StringPiece spki_bytes;
-  if (!net::asn1::ExtractSPKIFromDERCert(
-          net::x509_util::CryptoBufferAsStringPiece(cert.cert_buffer()),
-          &spki_bytes)) {
-    LOG(INFO) << "Unable to retrieve the public key from the DER cert";
-    return false;
-  }
-  // Calculate SHA256 hash of public key bytes.
-  *out_hash_value = net::HashValue(net::HASH_VALUE_SHA256);
-  crypto::SHA256HashString(spki_bytes, out_hash_value->data(),
-                           crypto::kSHA256Length);
-  return true;
-}
-
-void CronetTestBase::ExecuteBlock(BlockType block) {
-  block();
-}
-
-}  // namespace cronet
diff --git a/components/cronet/ios/test/get_stream_engine.mm b/components/cronet/ios/test/get_stream_engine.mm
deleted file mode 100644
index af9a9b7f15088..0000000000000
--- a/components/cronet/ios/test/get_stream_engine.mm
+++ /dev/null
@@ -1,29 +0,0 @@
-// Copyright 2016 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import <Cronet/Cronet.h>
-#import <Foundation/Foundation.h>
-
-#include "components/cronet/ios/test/start_cronet.h"
-#include "components/grpc_support/test/get_stream_engine.h"
-
-@interface Cronet (ExposedForTesting)
-+ (void)shutdownForTesting;
-@end
-
-namespace grpc_support {
-
-stream_engine* GetTestStreamEngine(int port) {
-  return [Cronet getGlobalEngine];
-}
-
-void StartTestStreamEngine(int port) {
-  cronet::StartCronet(port);
-}
-
-void ShutdownTestStreamEngine() {
-  [Cronet shutdownForTesting];
-}
-
-}  // namespace grpc_support
diff --git a/components/cronet/ios/test/start_cronet.h b/components/cronet/ios/test/start_cronet.h
deleted file mode 100644
index 1f8be0dba028b..0000000000000
--- a/components/cronet/ios/test/start_cronet.h
+++ /dev/null
@@ -1,16 +0,0 @@
-// Copyright 2016 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_IOS_TEST_START_CRONET_H_
-#define COMPONENTS_CRONET_IOS_TEST_START_CRONET_H_
-
-namespace cronet {
-
-// Starts Cronet, or restarts if Cronet is already running.  Will have Cronet
-// point test.example.com" to "localhost:|port|".
-void StartCronet(int port);
-
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_IOS_TEST_START_CRONET_H_
diff --git a/components/cronet/ios/test/start_cronet.mm b/components/cronet/ios/test/start_cronet.mm
deleted file mode 100644
index 68a9aecdfd8d1..0000000000000
--- a/components/cronet/ios/test/start_cronet.mm
+++ /dev/null
@@ -1,32 +0,0 @@
-// Copyright 2016 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#import <Cronet/Cronet.h>
-
-#include "components/cronet/ios/test/start_cronet.h"
-
-#include "base/strings/stringprintf.h"
-#include "base/strings/sys_string_conversions.h"
-
-namespace cronet {
-
-void StartCronet(int port) {
-  [Cronet setUserAgent:@"CronetTest/1.0.0.0" partial:NO];
-  [Cronet setHttp2Enabled:true];
-  [Cronet setQuicEnabled:true];
-  [Cronet setAcceptLanguages:@"en-US,en"];
-  [Cronet addQuicHint:@"test.example.com" port:443 altPort:443];
-  [Cronet enableTestCertVerifierForTesting];
-  [Cronet setHttpCacheType:CRNHttpCacheTypeDisabled];
-
-  [Cronet start];
-
-  NSString* rules = base::SysUTF8ToNSString(
-      base::StringPrintf("MAP test.example.com 127.0.0.1:%d,"
-                         "MAP notfound.example.com ~NOTFOUND",
-                         port));
-  [Cronet setHostResolverRulesForTesting:rules];
-}
-
-}  // namespace cronet
diff --git a/components/cronet/native/BUILD.gn b/components/cronet/native/BUILD.gn
deleted file mode 100644
index fb83586fc781e..0000000000000
--- a/components/cronet/native/BUILD.gn
+++ /dev/null
@@ -1,98 +0,0 @@
-# Copyright 2017 The Chromium Authors
-# Use of this source code is governed by a BSD-style license that can be
-# found in the LICENSE file.
-
-import("//components/cronet/native/include/headers.gni")
-import("//components/grpc_support/include/headers.gni")
-import("//testing/test.gni")
-
-config("cronet_native_include_config") {
-  include_dirs = [
-    "//components/cronet/native/generated",
-    "//components/cronet/native/include",
-    "//components/grpc_support/include",
-  ]
-}
-
-source_set("cronet_native_headers") {
-  deps = [
-    "//base",
-    "//components/grpc_support:headers",
-  ]
-
-  configs += [ ":cronet_native_include_config" ]
-  public_configs = [ ":cronet_native_include_config" ]
-
-  public = [
-    "include/cronet_c.h",
-    "include/cronet_export.h",
-
-    # Generated from cronet.idl.
-    "generated/cronet.idl_c.h",
-    "generated/cronet.idl_impl_interface.h",
-    "generated/cronet.idl_impl_struct.h",
-  ]
-}
-
-# Cross-platform portion of Cronet native API implementation.
-source_set("cronet_native_impl") {
-  deps = [
-    ":cronet_native_headers",
-    "//base",
-    "//components/cronet:cronet_common",
-    "//components/cronet:cronet_version_header",
-    "//components/cronet:metrics_util",
-    "//components/grpc_support:grpc_support",
-    "//net",
-  ]
-
-  configs += [ ":cronet_native_include_config" ]
-  public_configs = [ ":cronet_native_include_config" ]
-  public_deps = [ ":cronet_native_headers" ]
-
-  sources = [
-    "buffer.cc",
-    "engine.cc",
-    "engine.h",
-    "io_buffer_with_cronet_buffer.cc",
-    "io_buffer_with_cronet_buffer.h",
-    "native_metrics_util.cc",
-    "native_metrics_util.h",
-    "runnables.cc",
-    "runnables.h",
-    "upload_data_sink.cc",
-    "upload_data_sink.h",
-    "url_request.cc",
-    "url_request.h",
-
-    # Generated from cronet.idl.
-    "generated/cronet.idl_impl_interface.cc",
-    "generated/cronet.idl_impl_struct.cc",
-  ]
-}
-
-# Unit tests for Cronet native API. Depends on cronet_native_impl to test
-# implementation details.
-source_set("cronet_native_unittests") {
-  testonly = true
-
-  deps = [
-    ":cronet_native_impl",
-    "//base/test:test_support",
-    "//components/cronet/native/test:cronet_native_testutil",
-    "//net:test_support",
-    "//testing/gtest",
-  ]
-
-  configs += [ ":cronet_native_include_config" ]
-
-  sources = [
-    "engine_unittest.cc",
-    "native_metrics_util_test.cc",
-    "runnables_unittest.cc",
-
-    # Generated from cronet.idl.
-    "generated/cronet.idl_impl_interface_unittest.cc",
-    "generated/cronet.idl_impl_struct_unittest.cc",
-  ]
-}
diff --git a/components/cronet/native/buffer.cc b/components/cronet/native/buffer.cc
deleted file mode 100644
index 5c7c863666d93..0000000000000
--- a/components/cronet/native/buffer.cc
+++ /dev/null
@@ -1,87 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/generated/cronet.idl_impl_interface.h"
-
-#include "base/no_destructor.h"
-#include "base/numerics/safe_conversions.h"
-
-namespace {
-
-// Implementation of Cronet_BufferCallback that calls free() to malloc() buffer.
-class Cronet_BufferCallbackFree : public Cronet_BufferCallback {
- public:
-  Cronet_BufferCallbackFree() = default;
-
-  Cronet_BufferCallbackFree(const Cronet_BufferCallbackFree&) = delete;
-  Cronet_BufferCallbackFree& operator=(const Cronet_BufferCallbackFree&) =
-      delete;
-
-  ~Cronet_BufferCallbackFree() override = default;
-
-  void OnDestroy(Cronet_BufferPtr buffer) override { free(buffer->GetData()); }
-};
-
-// Concrete implementation of abstract Cronet_Buffer interface.
-class Cronet_BufferImpl : public Cronet_Buffer {
- public:
-  Cronet_BufferImpl() = default;
-
-  Cronet_BufferImpl(const Cronet_BufferImpl&) = delete;
-  Cronet_BufferImpl& operator=(const Cronet_BufferImpl&) = delete;
-
-  ~Cronet_BufferImpl() override;
-
-  // Cronet_Buffer implementation
-  void InitWithDataAndCallback(Cronet_RawDataPtr data,
-                               uint64_t size,
-                               Cronet_BufferCallbackPtr callback) override;
-  void InitWithAlloc(uint64_t size) override;
-  uint64_t GetSize() override;
-  Cronet_RawDataPtr GetData() override;
-
- private:
-  Cronet_RawDataPtr data_ = nullptr;
-  uint64_t size_ = 0;
-  Cronet_BufferCallbackPtr callback_ = nullptr;
-};
-
-Cronet_BufferImpl::~Cronet_BufferImpl() {
-  if (callback_)
-    callback_->OnDestroy(this);
-}
-
-void Cronet_BufferImpl::InitWithDataAndCallback(
-    Cronet_RawDataPtr data,
-    uint64_t size,
-    Cronet_BufferCallbackPtr callback) {
-  data_ = data;
-  size_ = size;
-  callback_ = callback;
-}
-
-void Cronet_BufferImpl::InitWithAlloc(uint64_t size) {
-  if (!base::IsValueInRangeForNumericType<size_t, uint64_t>(size))
-    return;
-  data_ = malloc(size);
-  if (!data_)
-    return;
-  size_ = size;
-  static base::NoDestructor<Cronet_BufferCallbackFree> static_callback;
-  callback_ = static_callback.get();
-}
-
-uint64_t Cronet_BufferImpl::GetSize() {
-  return size_;
-}
-
-Cronet_RawDataPtr Cronet_BufferImpl::GetData() {
-  return data_;
-}
-
-}  // namespace
-
-CRONET_EXPORT Cronet_BufferPtr Cronet_Buffer_Create() {
-  return new Cronet_BufferImpl();
-}
diff --git a/components/cronet/native/cronet.idl b/components/cronet/native/cronet.idl
deleted file mode 100644
index ddb3ad5b3b705..0000000000000
--- a/components/cronet/native/cronet.idl
+++ /dev/null
@@ -1,1501 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// The IDL in this file is based on Mojo IDL, but is not currently targeted
-// for direct use in Mojo projects.
-
-module Cronet;
-
-// General system support interfaces.
-
-/**
- * Data buffer provided by the application to read and write data.
- */
-interface Buffer {
-  /**
-   * Initialize Buffer with raw buffer |data| of |size| allocated by the app.
-   * The |callback| is invoked when buffer is destroyed.
-   */
-  InitWithDataAndCallback(handle data, uint64 size, BufferCallback callback);
-
-  /**
-   * Initialize Buffer by allocating buffer of |size|. The content of allocated
-   * data is not initialized.
-   */
-  InitWithAlloc(uint64 size);
-
-  /**
-   * Return size of data owned by this buffer.
-   */
-  [Sync]
-  GetSize() => (uint64 size);
-
-  /**
-   * Return raw pointer to |data| owned by this buffer.
-   */
-  [Sync]
-  GetData() => (handle data);
-};
-
-/**
- * App-provided callback passed to Buffer::InitWithDataAndCallback that gets invoked
- * when Buffer is destroyed.
- */
-[Abstract]
-interface BufferCallback {
-  /**
-   * Method invoked when |buffer| is destroyed so its app-allocated |data| can
-   * be freed. If a UrlRequest has ownership of a Buffer and the UrlRequest is destroyed
-   * (e.g. Cronet_UrlRequest_Destroy() is called), then Cronet will call OnDestroy().
-   */
-  OnDestroy(Buffer buffer);
-};
-
-// Base error passed to UrlRequestCallback.onFailed().
-struct Error {
-  enum ERROR_CODE {
-    /**
-     * Error code indicating the error returned by app callback.
-     */
-    ERROR_CALLBACK = 0,
-
-    /**
-     * Error code indicating the host being sent the request could not be resolved to an IP address.
-     */
-    ERROR_HOSTNAME_NOT_RESOLVED = 1,
-
-    /**
-     * Error code indicating the device was not connected to any network.
-     */
-    ERROR_INTERNET_DISCONNECTED = 2,
-
-    /**
-     * Error code indicating that as the request was processed the network configuration changed.
-     */
-    ERROR_NETWORK_CHANGED = 3,
-
-    /**
-     * Error code indicating a timeout expired. Timeouts expiring while attempting to connect will
-     * be reported as the more specific {@link #ERROR_CONNECTION_TIMED_OUT}.
-     */
-    ERROR_TIMED_OUT = 4,
-
-    /**
-     * Error code indicating the connection was closed unexpectedly.
-     */
-    ERROR_CONNECTION_CLOSED = 5,
-
-    /**
-     * Error code indicating the connection attempt timed out.
-     */
-    ERROR_CONNECTION_TIMED_OUT = 6,
-
-    /**
-     * Error code indicating the connection attempt was refused.
-     */
-    ERROR_CONNECTION_REFUSED = 7,
-
-    /**
-     * Error code indicating the connection was unexpectedly reset.
-     */
-    ERROR_CONNECTION_RESET = 8,
-
-    /**
-     * Error code indicating the IP address being contacted is unreachable, meaning there is no
-     * route to the specified host or network.
-     */
-    ERROR_ADDRESS_UNREACHABLE = 9,
-
-    /**
-     * Error code indicating an error related to the <a href="https://www.chromium.org/quic">
-     * QUIC</a> protocol. When {@link #error_code} is this code, see
-     * {@link quic_detailed_error_code} for more information.
-     */
-    ERROR_QUIC_PROTOCOL_FAILED = 10,
-
-    /**
-     * Error code indicating another type of error was encountered.
-     * |internal_error_code| can be consulted to get a more specific cause.
-     */
-    ERROR_OTHER = 11
-  };
-
-  /**
-   * Error code, one of ERROR_* values.
-   */
-  ERROR_CODE error_code = ERROR_CALLBACK;
-
-  /**
-   * Message, explaining the error.
-   */
-  string message;
-
-  /**
-   * Cronet internal error code. This may provide more specific error
-   * diagnosis than |error_code|, but the constant values may change over time.
-   * See
-   * <a href=https://chromium.googlesource.com/chromium/src/+/main/net/base/net_error_list.h>
-   * here</a> for the lastest list of values.
-   */
-  int32 internal_error_code = 0;
-
-  /**
-   * |true| if retrying this request right away might succeed, |false|
-   * otherwise. For example, is |true| when |error_code| is |ERROR_NETWORK_CHANGED|
-   * because trying the request might succeed using the new
-   * network configuration, but |false| when |error_code| is
-   * ERROR_INTERNET_DISCONNECTED because retrying the request right away will
-   * encounter the same failure (instead retrying should be delayed until device regains
-   * network connectivity).
-   */
-  bool immediately_retryable = false;
-
-  /**
-   * Contains detailed <a href="https://www.chromium.org/quic">QUIC</a> error code from
-   * <a href="https://cs.chromium.org/search/?q=symbol:%5CbQuicErrorCode%5Cb">
-   * QuicErrorCode</a> when the |error_code| code is |ERROR_QUIC_PROTOCOL_FAILED|.
-   */
-  int32 quic_detailed_error_code = 0;
-};
-
-/**
- * An interface to run commands on the |Executor|.
- *
- * Note: In general creating Runnables should only be done by Cronet. Runnables
- * created by the app don't have the ability to perform operations when the
- * Runnable is being destroyed (i.e. by Cronet_Runnable_Destroy) so resource
- * leaks are possible if the Runnable is posted to an Executor that is being
- * shutdown with unexecuted Runnables. In controlled testing environments
- * deallocation of associated resources can be performed in Run() if the
- * runnable can be assumed to always be executed.
- */
-[Abstract]
-interface Runnable {
-  Run();
-};
-
-/**
- * An interface provided by the app to run |command| asynchronously.
- */
-[Abstract]
-interface Executor {
-  /**
-   * Takes ownership of |command| and runs it synchronously or asynchronously.
-   * Destroys the |command| after execution, or if executor is shutting down.
-   */
-  Execute(Runnable command);
-};
-
-/**
- * Runtime result code returned by Engine and UrlRequest. Equivalent to
- * runtime exceptions in Android Java API. All results except SUCCESS trigger
- * native crash (via SIGABRT triggered by CHECK failure) unless
- * EngineParams.enableCheckResult is set to false.
- */
-enum RESULT {
-  /**
-   * Operation completed successfully
-   */
-  SUCCESS = 0,
-
-  /**
-   * Illegal argument
-   */
-  ILLEGAL_ARGUMENT = -100,
-  /**
-   * Storage path must be set to existing directory
-   */
-  ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST = -101,
-  /**
-   * Public key pin is invalid
-   */
-  ILLEGAL_ARGUMENT_INVALID_PIN = -102,
-  /**
-   * Host name is invalid
-   */
-  ILLEGAL_ARGUMENT_INVALID_HOSTNAME = -103,
-  /**
-   * Invalid http method
-   */
-  ILLEGAL_ARGUMENT_INVALID_HTTP_METHOD = -104,
-  /**
-   * Invalid http header
-   */
-  ILLEGAL_ARGUMENT_INVALID_HTTP_HEADER = -105,
-
-  /**
-   * Illegal state
-   */
-  ILLEGAL_STATE = -200,
-  /**
-   * Storage path is used by another engine
-   */
-  ILLEGAL_STATE_STORAGE_PATH_IN_USE = -201,
-  /**
-   * Cannot shutdown engine from network thread
-   */
-  ILLEGAL_STATE_CANNOT_SHUTDOWN_ENGINE_FROM_NETWORK_THREAD = -202,
-  /**
-   * The engine has already started
-   */
-  ILLEGAL_STATE_ENGINE_ALREADY_STARTED = -203,
-  /**
-   * The request has already started
-   */
-  ILLEGAL_STATE_REQUEST_ALREADY_STARTED = -204,
-  /**
-   * The request is not initialized
-   */
-  ILLEGAL_STATE_REQUEST_NOT_INITIALIZED = -205,
-  /**
-   * The request is already initialized
-   */
-  ILLEGAL_STATE_REQUEST_ALREADY_INITIALIZED = -206,
-  /**
-   * The request is not started
-   */
-  ILLEGAL_STATE_REQUEST_NOT_STARTED = -207,
-  /**
-   * No redirect to follow
-   */
-  ILLEGAL_STATE_UNEXPECTED_REDIRECT = -208,
-  /**
-   * Unexpected read attempt
-   */
-  ILLEGAL_STATE_UNEXPECTED_READ = -209,
-  /**
-   * Unexpected read failure
-   */
-  ILLEGAL_STATE_READ_FAILED = -210,
-
-  /**
-   * Null pointer or empty data
-   */
-  NULL_POINTER = -300,
-  /**
-   * The hostname cannot be null
-   */
-  NULL_POINTER_HOSTNAME = -301,
-  /**
-   * The set of SHA256 pins cannot be null
-   */
-  NULL_POINTER_SHA256_PINS = -302,
-  /**
-   * The pin expiration date cannot be null
-   */
-  NULL_POINTER_EXPIRATION_DATE = -303,
-  /**
-   * Engine is required
-   */
-  NULL_POINTER_ENGINE = -304,
-  /**
-   * URL is required
-   */
-  NULL_POINTER_URL = -305,
-  /**
-   * Callback is required
-   */
-  NULL_POINTER_CALLBACK = -306,
-  /**
-   * Executor is required
-   */
-  NULL_POINTER_EXECUTOR = -307,
-  /**
-   * Method is required
-   */
-  NULL_POINTER_METHOD = -308,
-  /**
-   * Invalid header name
-   */
-  NULL_POINTER_HEADER_NAME = -309,
-  /**
-   * Invalid header value
-   */
-  NULL_POINTER_HEADER_VALUE = -310,
-  /**
-   * Params is required
-   */
-  NULL_POINTER_PARAMS = -311,
-  /**
-   * Executor for RequestFinishedInfoListener is required
-   */
-  NULL_POINTER_REQUEST_FINISHED_INFO_LISTENER_EXECUTOR = -312,
-};
-
-/**
- * An engine to process UrlRequests, which uses the best HTTP stack
- * available on the current platform. An instance of this class can be started
- * using StartWithParams.
- */
-interface Engine {
-  /**
-   * Starts Engine using given |params|. The engine must be started once
-   * and only once before other methods can be used.
-   */
-  [Sync]
-  StartWithParams(EngineParams params) => (RESULT result);
-
-  /**
-   * Starts NetLog logging to a file. The NetLog will contain events emitted
-   * by all live Engines. The NetLog is useful for debugging.
-   * The file can be viewed using a Chrome browser navigated to
-   * chrome://net-internals/#import
-   * Returns |true| if netlog has started successfully, |false| otherwise.
-   * @param file_name the complete file path. It must not be empty. If the file
-   *            exists, it is truncated before starting. If actively logging,
-   *            this method is ignored.
-   * @param log_all {@code true} to include basic events, user cookies,
-   *    credentials and all transferred bytes in the log. This option presents
-   *    a privacy risk, since it exposes the user's credentials, and should
-   *    only be used with the user's consent and in situations where the log
-   *    won't be public.  {@code false} to just include basic events.
-   */
-  [Sync]
-  StartNetLogToFile(string file_name, bool log_all) => (bool started);
-
-  /**
-   * Stops NetLog logging and flushes file to disk. If a logging session is
-   * not in progress, this call is ignored. This method blocks until the log is
-   * closed to ensure that log file is complete and available.
-   */
-  [Sync]
-  StopNetLog() => ();
-
-  /**
-   * Shuts down the Engine if there are no active requests,
-   * otherwise returns a failure RESULT.
-   *
-   * Cannot be called on network thread - the thread Cronet calls into
-   * Executor on (which is different from the thread the Executor invokes
-   * callbacks on). This method blocks until all the Engine's resources have
-   * been cleaned up.
-   */
-  [Sync]
-  Shutdown() => (RESULT result);
-
-  /**
-   * Returns a human-readable version string of the engine.
-   */
-  [Sync]
-  GetVersionString() => (string version_string);
-
-  /**
-   * Returns default human-readable version string of the engine. Can be used
-   * before StartWithParams() is called.
-   */
-  [Sync]
-  GetDefaultUserAgent() => (string default_user_agent);
-
-  /**
-   * Registers a listener that gets called at the end of each request.
-   *
-   * The listener is called on {@code executor}.
-   *
-   * The listener is called before {@link UrlRequestCallback.OnCanceled()},
-   * {@link UrlRequestCallback.OnFailed()} or {@link
-   * UrlRequestCallback.OnSucceeded()} is called -- note that if {@code
-   * executor} runs the listener asyncronously, the actual call to the listener
-   * may happen after a {@code UrlRequestCallback} method is called.
-   *
-   * Listeners are only guaranteed to be called for requests that are started
-   * after the listener is added.
-   *
-   * Ownership is **not** taken for {@code listener} or {@code executor}.
-   *
-   * Assuming the listener won't run again (there are no pending requests with
-   * the listener attached, either via {@code Engine} or {@code UrlRequest}),
-   * the app may destroy it once its {@code OnRequestFinished()} has started,
-   * even inside that method.
-   *
-   * Similarly, the app may destroy {@code executor} in or after {@code
-   * OnRequestFinished()}.
-   *
-   * It's also OK to destroy {@code executor} in or after one of {@link
-   * UrlRequestCallback.OnCanceled()}, {@link UrlRequestCallback.OnFailed()} or
-   * {@link UrlRequestCallback.OnSucceeded()}.
-   *
-   * Of course, both of these are only true if {@code listener} won't run again
-   * and {@code executor} isn't being used for anything else that might start
-   * running in the future.
-   *
-   * @param listener the listener for finished requests.
-   * @param executor the executor upon which to run {@code listener}.
-   */
-  AddRequestFinishedListener(RequestFinishedInfoListener listener,
-                             Executor executor);
-
-  /**
-   * Unregisters a RequestFinishedInfoListener, including its association with
-   * its registered Executor.
-   */
-  RemoveRequestFinishedListener(RequestFinishedInfoListener listener);
-};
-
-/**
- * Hint that |host| supports QUIC.
- */
-struct QuicHint {
-  /**
-   * Name of the host that supports QUIC.
-   */
-  string host;
-
-  /**
-   * Port of the server that supports QUIC.
-   */
-  int32 port = 0;
-
-  /**
-   * Alternate port to use for QUIC.
-   */
-  int32 alternate_port = 0;
-};
-
-/**
- * Pins a set of public keys for a given |host|. By pinning a set of public keys,
- * |pinsSha256|, communication with |host| is required to
- * authenticate with a certificate with a public key from the set of pinned ones.
- * An app can pin the public key of the root certificate, any of the intermediate
- * certificates or the end-entry certificate. Authentication will fail and secure
- * communication will not be established if none of the public keys is present in the
- * host's certificate chain, even if the host attempts to authenticate with a
- * certificate allowed by the device's trusted store of certificates.
- *
- * More information about the public key pinning can be found in
- * <a href="https://tools.ietf.org/html/rfc7469">RFC 7469</a>.
- */
-struct PublicKeyPins {
-  /**
-   * Name of the host to which the public keys should be pinned. A host that
-   * consists only of digits and the dot character is treated as invalid.
-   */
-  string host;
-
-  /**
-   * An array of pins. Each pin is the SHA-256 cryptographic
-   * hash (in the form of "sha256/<base64-hash-value>") of the DER-encoded ASN.1
-   * representation of the Subject Public Key Info (SPKI) of the host's X.509 certificate.
-   * Although, the method does not mandate the presence of the backup pin
-   * that can be used if the control of the primary private key has been
-   * lost, it is highly recommended to supply one.
-   */
-  array<string> pins_sha256;
-
-  /**
-   * Indicates whether the pinning policy should be applied to subdomains of |host|.
-   */
-  bool include_subdomains = false;
-
-  /**
-   * The expiration date for the pins in milliseconds since epoch (as in java.util.Date).
-   */
-  int64 expiration_date = 0;
-};
-
-/**
- * Parameters for Engine, which allows its configuration before start.
- * Configuration options are set on the EngineParms and
- * then Engine.StartWithParams is called to start the Engine.
- */
-struct EngineParams {
-  /**
-   * Override strict result checking for all operations that return RESULT.
-   * If set to true, then failed result will cause native crash via SIGABORT.
-   */
-  bool enable_check_result = true;
-
-  /**
-   * Override of the User-Agent header for all requests. An explicitly
-   * set User-Agent header will override a value set using this param.
-   */
-  string user_agent;
-
-  /**
-   * Sets a default value for the Accept-Language header value for UrlRequests
-   * created by this engine. Explicitly setting the Accept-Language header
-   * value for individual UrlRequests will override this value.
-   */
-  string accept_language;
-
-  /**
-   * Directory for HTTP Cache and Prefs Storage. The directory must exist.
-   */
-  string storage_path;
-
-  /**
-   * Whether <a href="https://www.chromium.org/quic">QUIC</a> protocol
-   * is enabled. If QUIC is enabled, then QUIC User Agent Id
-   * containing application name and Cronet version is sent to the server.
-   */
-  bool enable_quic = true;
-
-  /**
-   * Whether <a href="https://tools.ietf.org/html/rfc7540">HTTP/2</a>
-   * protocol is enabled.
-   */
-  bool enable_http2 = true;
-
-  /**
-   * Whether <a href="https://tools.ietf.org/html/rfc7932">Brotli</a> compression is
-   * enabled. If enabled, Brotli will be advertised in Accept-Encoding request headers.
-   */
-  bool enable_brotli = true;
-
-  /**
-   * Enables or disables caching of HTTP data and other information like QUIC
-   * server information.
-   */
-  enum HTTP_CACHE_MODE {
-    /**
-     * Disable HTTP cache. Some data may still be temporarily stored in memory.
-     */
-    DISABLED = 0,
-
-    /**
-     * Enable in-memory HTTP cache, including HTTP data.
-     */
-    IN_MEMORY = 1,
-
-    /**
-     * Enable on-disk cache, excluding HTTP data.
-     * |storagePath| must be set to existing directory.
-     */
-    DISK_NO_HTTP = 2,
-
-    /**
-     * Enable on-disk cache, including HTTP data.
-     * |storagePath| must be set to existing directory.
-     */
-    DISK = 3
-  };
-  HTTP_CACHE_MODE http_cache_mode = DISABLED;
-
-  /**
-   * Maximum size in bytes used to cache data (advisory and maybe exceeded at
-   * times).
-   */
-  int64 http_cache_max_size = 0;
-
-  /**
-   * Hints that hosts support QUIC.
-   */
-  array<QuicHint> quic_hints;
-
-  /**
-   * Pins a set of public keys for given hosts. See |PublicKeyPins| for explanation.
-   */
-  array<PublicKeyPins> public_key_pins;
-
-  /**
-   * Enables or disables public key pinning bypass for local trust anchors. Disabling the
-   * bypass for local trust anchors is highly discouraged since it may prohibit the app
-   * from communicating with the pinned hosts. E.g., a user may want to send all traffic
-   * through an SSL enabled proxy by changing the device proxy settings and adding the
-   * proxy certificate to the list of local trust anchor. Disabling the bypass will most
-   * likly prevent the app from sending any traffic to the pinned hosts. For more
-   * information see 'How does key pinning interact with local proxies and filters?' at
-   * https://www.chromium.org/Home/chromium-security/security-faq
-   */
-  bool enable_public_key_pinning_bypass_for_local_trust_anchors = true;
-
-  /**
-   * Optional network thread priority. NAN indicates unset, use default.
-   * On Android, corresponds to android.os.Process.setThreadPriority() values.
-   * On iOS, corresponds to NSThread::setThreadPriority values.
-   * Do not specify for other platforms.
-   */
-  double network_thread_priority = double.NAN;
-
-  /**
-   * JSON formatted experimental options to be used in Cronet Engine.
-   */
-  string experimental_options;
-};
-
-/**
-  * Single HTTP request or response header.
-  */
-struct HttpHeader {
-  /**
-   * Header name.
-   */
-  string name;
-
-  /**
-   * Header value.
-   */
-  string value;
-};
-
-struct UrlResponseInfo {
-  /**
-   * The URL the response is for. This is the URL after following
-   * redirects, so it may not be the originally requested URL.
-   */
-  string url;
-
-  /**
-   * The URL chain. The first entry is the originally requested URL;
-   * the following entries are redirects followed.
-   */
-  array<string> url_chain;
-
-  /**
-   * The HTTP status code. When a resource is retrieved from the cache,
-   * whether it was revalidated or not, the original status code is returned.
-   */
-  int32 http_status_code = 0;
-
-  /**
-   * The HTTP status text of the status line. For example, if the
-   * request received a "HTTP/1.1 200 OK" response, this method returns "OK".
-   */
-  string http_status_text;
-
-  /**
-   * Returns an unmodifiable list of response header field and value pairs.
-   * The headers are in the same order they are received over the wire.
-   */
-  array<HttpHeader> all_headers_list;
-
-  /**
-   * True if the response came from the cache, including
-   * requests that were revalidated over the network before being retrieved
-   * from the cache, failed otherwise.
-   */
-  bool was_cached = false;
-
-  /**
-   * The protocol (for example 'quic/1+spdy/3') negotiated with the server.
-   * An empty string if no protocol was negotiated, the protocol is
-   * not known, or when using plain HTTP or HTTPS.
-   */
-  string negotiated_protocol;
-
-  /**
-   * The proxy server that was used for the request.
-   */
-  string proxy_server;
-
-  /**
-   * A minimum count of bytes received from the network to process this
-   * request. This count may ignore certain overheads (for example IP and
-   * TCP/UDP framing, SSL handshake and framing, proxy handling). This count is
-   * taken prior to decompression (for example GZIP and Brotli) and includes
-   * headers and data from all redirects.
-   */
-  int64 received_byte_count = 0;
-};
-
-/**
- * Listener class used with UrlRequest.GetStatus() to receive the status of a
- * UrlRequest.
- */
-[Abstract]
-interface UrlRequestStatusListener {
-  enum Status {
-    /**
-     * This state indicates that the request is completed, canceled, or is not
-     * started.
-     */
-    INVALID = -1,
-
-    /**
-     * This state corresponds to a resource load that has either not yet begun
-     * or is idle waiting for the consumer to do something to move things along
-     * (e.g. when the consumer of a UrlRequest has not called
-     * UrlRequest.read() yet).
-     */
-    IDLE = 0,
-
-    /**
-     * When a socket pool group is below the maximum number of sockets allowed
-     * per group, but a new socket cannot be created due to the per-pool socket
-     * limit, this state is returned by all requests for the group waiting on an
-     * idle connection, except those that may be serviced by a pending new
-     * connection.
-     */
-    WAITING_FOR_STALLED_SOCKET_POOL = 1,
-
-    /**
-     * When a socket pool group has reached the maximum number of sockets
-     * allowed per group, this state is returned for all requests that don't
-     * have a socket, except those that correspond to a pending new connection.
-     */
-    WAITING_FOR_AVAILABLE_SOCKET = 2,
-
-    /**
-     * This state indicates that the URLRequest delegate has chosen to block
-     * this request before it was sent over the network.
-     */
-    WAITING_FOR_DELEGATE = 3,
-
-    /**
-     * This state corresponds to a resource load that is blocked waiting for
-     * access to a resource in the cache. If multiple requests are made for the
-     * same resource, the first request will be responsible for writing (or
-     * updating) the cache entry and the second request will be deferred until
-     * the first completes. This may be done to optimize for cache reuse.
-     */
-    WAITING_FOR_CACHE = 4,
-
-    /**
-     * This state corresponds to a resource being blocked waiting for the
-     * PAC script to be downloaded.
-     */
-    DOWNLOADING_PAC_FILE = 5,
-
-    /**
-     * This state corresponds to a resource load that is blocked waiting for a
-     * proxy autoconfig script to return a proxy server to use.
-     */
-    RESOLVING_PROXY_FOR_URL = 6,
-
-    /**
-     * This state corresponds to a resource load that is blocked waiting for a
-     * proxy autoconfig script to return a proxy server to use, but that proxy
-     * script is busy resolving the IP address of a host.
-     */
-    RESOLVING_HOST_IN_PAC_FILE = 7,
-
-    /**
-     * This state indicates that we're in the process of establishing a tunnel
-     * through the proxy server.
-     */
-    ESTABLISHING_PROXY_TUNNEL = 8,
-
-    /**
-     * This state corresponds to a resource load that is blocked waiting for a
-     * host name to be resolved. This could either indicate resolution of the
-     * origin server corresponding to the resource or to the host name of a
-     * proxy server used to fetch the resource.
-     */
-    RESOLVING_HOST = 9,
-
-    /**
-     * This state corresponds to a resource load that is blocked waiting for a
-     * TCP connection (or other network connection) to be established. HTTP
-     * requests that reuse a keep-alive connection skip this state.
-     */
-    CONNECTING = 10,
-
-    /**
-     * This state corresponds to a resource load that is blocked waiting for the
-     * SSL handshake to complete.
-     */
-    SSL_HANDSHAKE = 11,
-
-    /**
-     * This state corresponds to a resource load that is blocked waiting to
-     * completely upload a request to a server. In the case of a HTTP POST
-     * request, this state includes the period of time during which the message
-     * body is being uploaded.
-     */
-    SENDING_REQUEST = 12,
-
-    /**
-     * This state corresponds to a resource load that is blocked waiting for the
-     * response to a network request. In the case of a HTTP transaction, this
-     * corresponds to the period after the request is sent and before all of the
-     * response headers have been received.
-     */
-    WAITING_FOR_RESPONSE = 13,
-
-    /**
-     * This state corresponds to a resource load that is blocked waiting for a
-     * read to complete. In the case of a HTTP transaction, this corresponds to
-     * the period after the response headers have been received and before all
-     * of the response body has been downloaded. (NOTE: This state only applies
-     * for an {@link UrlRequest} while there is an outstanding
-     * {@link UrlRequest#read read()} operation.)
-     */
-    READING_RESPONSE = 14
-  };
-
-  /**
-   * Invoked on UrlRequest's Executor when request status is obtained.
-   * |status| is representing the status of the request.
-   */
-  OnStatus(Status status);
-};
-
-/**
- * Users of Cronet implement this interface to receive callbacks indicating the
- * progress of a UrlRequest being processed. An instance of this interface
- * is passed in to UrlRequest's method InitWithParams().
- * <p>
- * Note:  All methods will be invoked on the Executor passed to UrlRequest.InitWithParams();
- */
-[Abstract]
-interface UrlRequestCallback {
-  /**
-   * Invoked whenever a redirect is encountered. This will only be invoked
-   * between the call to UrlRequest.start() and
-   * UrlRequestCallback.onResponseStarted().
-   * The body of the redirect response, if it has one, will be ignored.
-   *
-   * The redirect will not be followed until the URLRequest.followRedirect()
-   * ethod is called, either synchronously or asynchronously.
-   *
-   * @param request Request being redirected.
-   * @param info Response information.
-   * @param new_location_url Location where request is redirected.
-   */
-  OnRedirectReceived(UrlRequest request, UrlResponseInfo info, string new_location_url);
-
-  /**
-   * Invoked when the final set of headers, after all redirects, is received.
-   * Will only be invoked once for each request.
-   *
-   * With the exception of UrlRequestCallback.onCanceled(),
-   * no other UrlRequestCallback method will be invoked for the request,
-   * including UrlRequestCallback.onSucceeded() and
-   * UrlRequestCallback.onFailed(), until UrlRequest.read()} is called to attempt
-   * to start reading the response body.
-   *
-   * @param request Request that started to get response.
-   * @param info Response information.
-   */
-  OnResponseStarted(UrlRequest request, UrlResponseInfo info);
-
-  /**
-   * Invoked whenever part of the response body has been read. Only part of
-   * the buffer may be populated, even if the entire response body has not yet
-   * been consumed. This callback transfers ownership of |buffer| back to the app,
-   * and Cronet guarantees not to access it.
-   *
-   * With the exception of UrlRequestCallback.onCanceled(),
-   * no other UrlRequestCallback method will be invoked for the request,
-   * including UrlRequestCallback.onSucceeded() and
-   * UrlRequestCallback.onFailed(), until UrlRequest.read()} is called to attempt
-   * to continue reading the response body.
-   *
-   * @param request Request that received data.
-   * @param info Response information.
-   * @param buffer The buffer that was passed in to UrlRequest.read(), now
-   *         containing the received data.
-   * @param bytes_read The number of bytes read into buffer.
-   */
-  OnReadCompleted(UrlRequest request, UrlResponseInfo info, Buffer buffer, uint64 bytes_read);
-
-  /**
-   * Invoked when request is completed successfully. Once invoked, no other
-   * UrlRequestCallback methods will be invoked.
-   *
-   * Implementations of {@link #OnSucceeded} are allowed to call {@code
-   * Cronet_UrlRequest_Destroy(request)}, but note that destroying {@code
-   * request} destroys {@code info}.
-   *
-   * @param request Request that succeeded.
-   * @param info Response information. NOTE: this is owned by {@code request}.
-   */
-  OnSucceeded(UrlRequest request, UrlResponseInfo info);
-
-  /**
-   * Invoked if request failed for any reason after UrlRequest.start().
-   * Once invoked, no other UrlRequestCallback methods will be invoked.
-   * |error| provides information about the failure.
-   *
-   * Implementations of {@link #OnFailed} are allowed to call {@code
-   * Cronet_UrlRequest_Destroy(request)}, but note that destroying {@code
-   * request} destroys {@code info} and {@code error}.
-   *
-   * @param request Request that failed.
-   * @param info Response information. May be null if no response was
-   *         received. NOTE: this is owned by {@code request}.
-   * @param error information about error. NOTE: this is owned by {@code
-   *         request}.
-   */
-  OnFailed(UrlRequest request, UrlResponseInfo info, Error error);
-
-  /**
-   * Invoked if request was canceled via UrlRequest.cancel(). Once
-   * invoked, no other UrlRequestCallback methods will be invoked.
-   *
-   * Implementations of {@link #OnCanceled} are allowed to call {@code
-   * Cronet_UrlRequest_Destroy(request)}, but note that destroying {@code
-   * request} destroys {@code info}.
-   *
-   * @param request Request that was canceled.
-   * @param info Response information. May be null if no response was
-   *         received. NOTE: this is owned by {@code request}.
-   */
-  OnCanceled(UrlRequest request, UrlResponseInfo info);
-};
-
-/**
- * Defines callbacks methods for UploadDataProvider. All methods
- * may be called synchronously or asynchronously, on any thread.
- */
-interface UploadDataSink {
-  /**
-   * Called by UploadDataProvider when a read succeeds.
-   *
-   * @param bytes_read number of bytes read into buffer passed to read().
-   * @param final_chunk For chunked uploads, |true| if this is the final
-   *     read. It must be |false| for non-chunked uploads.
-   */
-  OnReadSucceeded(uint64 bytes_read, bool final_chunk);
-
-  /**
-   * Called by UploadDataProvider when a read fails.
-   * @param error_message to pass on to UrlRequestCallback.onFailed().
-   */
-  OnReadError(string error_message);
-
-  /**
-   * Called by UploadDataProvider when a rewind succeeds.
-   */
-  OnRewindSucceeded();
-
-  /**
-   * Called by UploadDataProvider when a rewind fails, or if rewinding
-   * uploads is not supported.
-   * @param error_message to pass on to UrlRequestCallback.onFailed().
-   */
-  OnRewindError(string error_message);
-};
-
-/**
- * The interface allowing the embedder to provide an upload body to
- * UrlRequest. It supports both non-chunked (size known in advanced) and
- * chunked (size not known in advance) uploads. Be aware that not all servers
- * support chunked uploads.
- *
- * An upload is either always chunked, across multiple uploads if the data
- * ends up being sent more than once, or never chunked.
- */
-[Abstract]
-interface UploadDataProvider {
-  /**
-   * If this is a non-chunked upload, returns the length of the upload. Must
-   * always return -1 if this is a chunked upload.
-   */
-  [Sync]
-  GetLength() => (int64 length);
-
-  /**
-   * Reads upload data into |buffer|. Each call of this method must be followed be a
-   * single call, either synchronous or asynchronous, to
-   * UploadDataSink.onReadSucceeded() on success
-   * or UploadDataSink.onReadError() on failure. Neither read nor rewind
-   * will be called until one of those methods or the other is called. Even if
-   * the associated UrlRequest is canceled, one or the other must
-   * still be called before resources can be safely freed.
-   *
-   * @param upload_data_sink The object to notify when the read has completed,
-   *            successfully or otherwise.
-   * @param buffer The buffer to copy the read bytes into.
-   */
-  Read(UploadDataSink upload_data_sink, Buffer buffer);
-
-  /**
-   * Rewinds upload data. Each call must be followed be a single
-   * call, either synchronous or asynchronous, to
-   * UploadDataSink.onRewindSucceeded() on success or
-   * UploadDataSink.onRewindError() on failure. Neither read nor rewind
-   * will be called until one of those methods or the other is called.
-   * Even if the associated UrlRequest is canceled, one or the other
-   * must still be called before resources can be safely freed.
-   *
-   * If rewinding is not supported, this should call
-   * UploadDataSink.onRewindError(). Note that rewinding is required to
-   * follow redirects that preserve the upload body, and for retrying when the
-   * server times out stale sockets.
-   *
-   * @param upload_data_sink The object to notify when the rewind operation has
-   *         completed, successfully or otherwise.
-   */
-  Rewind(UploadDataSink upload_data_sink);
-
-  /**
-   * Called when this UploadDataProvider is no longer needed by a request, so that resources
-   * (like a file) can be explicitly released.
-   */
-  Close();
-};
-
-/**
- * Controls an HTTP request (GET, PUT, POST etc).
- * Initialized by InitWithParams().
- * Note: All methods must be called on the Executor passed to InitWithParams().
- */
-interface UrlRequest {
-  /**
-   * Initialized UrlRequest to |url| with |params|. All methods of |callback| for
-   * request will be invoked on |executor|. The |executor| must not run tasks on
-   * the thread calling Executor.execute() to prevent blocking networking
-   * operations and causing failure RESULTs during shutdown.
-   *
-   * @param engine Engine to process the request.
-   * @param url URL for the request.
-   * @param params additional parameters for the request, like headers and priority.
-   * @param callback Callback that gets invoked on different events.
-   * @param executor Executor on which all callbacks will be invoked.
-   */
-  [Sync]
-  InitWithParams(Engine engine,
-                 string url,
-                 UrlRequestParams params,
-                 UrlRequestCallback callback,
-                 Executor executor) => (RESULT result);
-
-  /**
-   * Starts the request, all callbacks go to UrlRequestCallback. May only be called
-   * once. May not be called if Cancel() has been called.
-   */
-  [Sync]
-  Start() => (RESULT result);
-
-  /**
-   * Follows a pending redirect. Must only be called at most once for each
-   * invocation of UrlRequestCallback.OnRedirectReceived().
-   */
-  [Sync]
-  FollowRedirect() => (RESULT result);
-
-  /**
-   * Attempts to read part of the response body into the provided buffer.
-   * Must only be called at most once in response to each invocation of the
-   * UrlRequestCallback.OnResponseStarted() and
-   * UrlRequestCallback.OnReadCompleted()} methods of the UrlRequestCallback.
-   * Each call will result in an asynchronous call to
-   * either the UrlRequestCallback.OnReadCompleted() method if data
-   * is read, its UrlRequestCallback.OnSucceeded() method if
-   * there's no more data to read, or its UrlRequestCallback.OnFailed()
-   * method if there's an error.
-   * This method transfers ownership of |buffer| to Cronet, and app should
-   * not access it until one of these callbacks is invoked.
-   *
-   * @param buffer to write response body to. The app must not read or
-   *        modify buffer's position, limit, or data between its position and
-   *        limit until the request calls back into the UrlRequestCallback.
-   */
-  [Sync]
-  Read(Buffer buffer) => (RESULT result);
-
-  /**
-   * Cancels the request. Can be called at any time.
-   * UrlRequestCallback.OnCanceled() will be invoked when cancellation
-   * is complete and no further callback methods will be invoked. If the
-   * request has completed or has not started, calling Cancel() has no
-   * effect and OnCanceled() will not be invoked. If the
-   * Executor passed in to UrlRequest.InitWithParams() runs
-   * tasks on a single thread, and Cancel() is called on that thread,
-   * no callback methods (besides OnCanceled() will be invoked after
-   * Cancel() is called. Otherwise, at most one callback method may be
-   * invoked after Cancel() has completed.
-   */
-  Cancel();
-
-  /**
-   * Returns true if the request was successfully started and is now
-   * finished (completed, canceled, or failed).
-   */
-  [Sync]
-  IsDone() => (bool done);
-
-  /**
-   * Queries the status of the request.
-   * @param listener a UrlRequestStatusListener that will be invoked with
-   *         the request's current status. Listener will be invoked
-   *         back on the Executor passed in when the request was
-   *         created.
-   */
-  GetStatus(UrlRequestStatusListener listener);
-};
-
-/**
- * Parameters for UrlRequest. Allows configuring requests before initializing them
- * with UrlRequest.InitWithParams().
- */
-struct UrlRequestParams {
-  enum REQUEST_PRIORITY {
-    /**
-     * Lowest request priority.
-     */
-    REQUEST_PRIORITY_IDLE = 0,
-    /**
-     * Very low request priority.
-     */
-    REQUEST_PRIORITY_LOWEST = 1,
-    /**
-     * Low request priority.
-     */
-    REQUEST_PRIORITY_LOW = 2,
-    /**
-     * Medium request priority. This is the default priority given to the request.
-     */
-    REQUEST_PRIORITY_MEDIUM = 3,
-    /**
-     * Highest request priority.
-     */
-    REQUEST_PRIORITY_HIGHEST = 4,
-  };
-
-  /**
-   * The HTTP method verb to use for this request.
-   *
-   * The default when this value is not set is "GET" if the request has
-   * no body or "POST" if it does.
-   *
-   * Allowed methods are "GET", "HEAD", "DELETE", "POST" or "PUT".
-   */
-  string http_method;
-
-  /**
-   * Array of HTTP headers for this request..
-   */
-  array<HttpHeader> request_headers;
-
-  /**
-   * Disables cache for the request. If context is not set up to use cache,
-   * this call has no effect.
-   */
-  bool disable_cache = false;
-
-  /**
-   * Priority of the request which should be one of the REQUEST_PRIORITY values.
-   */
-  REQUEST_PRIORITY priority = REQUEST_PRIORITY_MEDIUM;
-
-  /**
-   * Upload data provider. Setting this value switches method to "POST" if not
-   * explicitly set. Starting the request will fail if a Content-Type header is not set.
-   */
-  UploadDataProvider? upload_data_provider;
-
-  /**
-   * Upload data provider executor that will be used to invoke uploadDataProvider.
-   */
-  Executor? upload_data_provider_executor;
-
-  /**
-   * Marks that the executors this request will use to notify callbacks (for
-   * UploadDataProvider and UrlRequestCallback) is intentionally performing
-   * inline execution without switching to another thread.
-   *
-   * <p><b>Warning:</b> This option makes it easy to accidentally block the network thread.
-   * It should not be used if your callbacks perform disk I/O, acquire locks, or call into
-   * other code you don't carefully control and audit.
-   */
-  bool allow_direct_executor = false;
-
-  /**
-   * Associates the annotation object with this request. May add more than one.
-   * Passed through to a RequestFinishedInfoListener.
-   */
-  array<handle> annotations;
-
-  /**
-   * A listener that gets invoked at the end of each request.
-   *
-   * The listener is invoked with the request finished info on {@code
-   * request_finished_executor}, which must be set.
-   *
-   * The listener is called before {@link UrlRequestCallback.OnCanceled()},
-   * {@link UrlRequestCallback.OnFailed()} or {@link
-   * UrlRequestCallback.OnSucceeded()} is called -- note that if {@code
-   * request_finished_executor} runs the listener asyncronously, the actual
-   * call to the listener may happen after a {@code UrlRequestCallback} method
-   * is called.
-
-   * Ownership is **not** taken.
-   *
-   * Assuming the listener won't run again (there are no pending requests with
-   * the listener attached, either via {@code Engine} or {@code UrlRequest}),
-   * the app may destroy it once its {@code OnRequestFinished()} has started,
-   * even inside that method.
-   */
-  RequestFinishedInfoListener? request_finished_listener;
-
-  /**
-   * The Executor used to run the {@code request_finished_listener}.
-   *
-   * Ownership is **not** taken.
-   *
-   * Similar to {@code request_finished_listener}, the app may destroy {@code
-   * request_finished_executor} in or after {@code OnRequestFinished()}.
-   *
-   * It's also OK to destroy {@code request_finished_executor} in or after one
-   * of {@link UrlRequestCallback.OnCanceled()}, {@link
-   * UrlRequestCallback.OnFailed()} or {@link
-   * UrlRequestCallback.OnSucceeded()}.
-   *
-   * Of course, both of these are only true if {@code
-   * request_finished_executor} isn't being used for anything else that might
-   * start running in the future.
-   */
-  Executor? request_finished_executor;
-
-  enum IDEMPOTENCY {
-    DEFAULT_IDEMPOTENCY = 0,
-    IDEMPOTENT = 1,
-    NOT_IDEMPOTENT = 2,
-  };
-
- /**
-   * Idempotency of the request, which determines that if it is safe to enable
-   * 0-RTT for the Cronet request. By default, 0-RTT is only enabled for safe
-   * HTTP methods, i.e., GET, HEAD, OPTIONS, and TRACE. For other methods,
-   * enabling 0-RTT may cause security issues since a network observer can
-   * replay the request. If the request has any side effects, those effects can
-   * happen multiple times. It is only safe to enable the 0-RTT if it is known
-   * that the request is idempotent.
-   */
-  IDEMPOTENCY idempotency = DEFAULT_IDEMPOTENCY;
-};
-
-/**
- * Represents a date and time expressed as the number of milliseconds since the
- * UNIX epoch.
- */
-struct DateTime {
-  /**
-   * Number of milliseconds since the UNIX epoch.
-   */
-  int64 value = 0;
-};
-
-/*
- * Represents metrics collected for a single request. Most of these metrics are
- * timestamps for events during the lifetime of the request, which can be used
- * to build a detailed timeline for investigating performance.
- *
- * Events happen in this order:
- * <ol>
- * <li>{@link #request_start request start}</li>
- * <li>{@link #dns_start DNS start}</li>
- * <li>{@link #dns_end DNS end}</li>
- * <li>{@link #connect_start connect start}</li>
- * <li>{@link #ssl_start SSL start}</li>
- * <li>{@link #ssl_end SSL end}</li>
- * <li>{@link #connect_end connect end}</li>
- * <li>{@link #sending_start sending start}</li>
- * <li>{@link #sending_end sending end}</li>
- * <li>{@link #response_start response start}</li>
- * <li>{@link #request_end request end}</li>
- * </ol>
- *
- * Start times are reported as the time when a request started blocking on the
- * event, not when the event actually occurred, with the exception of push
- * start and end. If a metric is not meaningful or not available, including
- * cases when a request finished before reaching that stage, start and end
- * times will be null. If no time was spent blocking on an event, start and end
- * will be the same time.
- *
- * Timestamps are recorded using a clock that is guaranteed not to run
- * backwards. All timestamps are correct relative to the system clock at the
- * time of request start, and taking the difference between two timestamps will
- * give the correct difference between the events. In order to preserve this
- * property, timestamps for events other than request start are not guaranteed
- * to match the system clock at the times they represent.
- *
- * Most timing metrics are taken from
- * <a
- * href="https://cs.chromium.org/chromium/src/net/base/load_timing_info.h">LoadTimingInfo</a>,
- * which holds the information for <a href="http://w3c.github.io/navigation-timing/"></a> and
- * <a href="https://www.w3.org/TR/resource-timing/"></a>.
- */
-struct Metrics {
-  /**
-   * Time when the request started, which corresponds to calling
-   * Cronet_UrlRequest_Start(). This timestamp will match the system clock at
-   * the time it represents.
-   */
-  DateTime request_start;
-
-  /**
-   * Time when DNS lookup started. This and {@link #dns_end} will be set to
-   * non-null regardless of whether the result came from a DNS server or the
-   * local cache. Will equal null if the socket was reused (see {@link
-   * #socket_reused}).
-   */
-  DateTime? dns_start;
-
-  /**
-   * Time when DNS lookup finished. This and {@link dns_start} will return
-   * non-null regardless of whether the result came from a DNS server or the
-   * local cache. Will equal null if the socket was reused (see {@link
-   * #socket_reused}).
-   */
-  DateTime? dns_end;
-
-  /**
-   * Time when connection establishment started, typically when DNS resolution
-   * finishes. Will equal null if the socket was reused (see {@link
-   * #socket_reused}).
-   */
-  DateTime? connect_start;
-
-  /**
-   * Time when connection establishment finished, after TCP connection is
-   * established and, if using HTTPS, SSL handshake is completed. For QUIC
-   * 0-RTT, this represents the time of handshake confirmation and might happen
-   * later than {@link #sending_start}. Will equal null if the socket was
-   * reused (see {@link #socket_reused}).
-   */
-  DateTime? connect_end;
-
-  /**
-   * Time when SSL handshake started. For QUIC, this will be the same time as
-   * {@link #connect_start}. Will equal null if SSL is not used or if the
-   * socket was reused (see {@link #socket_reused}).
-   */
-  DateTime? ssl_start;
-
-  /**
-   * Time when SSL handshake finished. For QUIC, this will be the same time as
-   * {@link #connect_end}. Will equal null if SSL is not used or if the socket
-   * was reused (see {@link #socket_reused}).
-   */
-  DateTime? ssl_end;
-
-  /**
-   * Time when sending HTTP request headers started.
-   *
-   * Will equal null if the request failed or was canceled before sending
-   * started.
-   */
-  DateTime? sending_start;
-
-  /**
-   * Time when sending HTTP request body finished. (Sending request body
-   * happens after sending request headers.)
-   *
-   * Will equal null if the request failed or was canceled before sending
-   * ended.
-   */
-  DateTime? sending_end;
-
-  /**
-   * Time when first byte of HTTP/2 server push was received.  Will equal
-   * null if server push is not used.
-   */
-  DateTime? push_start;
-
-  /**
-   * Time when last byte of HTTP/2 server push was received.  Will equal
-   * null if server push is not used.
-   */
-  DateTime? push_end;
-
-  /**
-   * Time when the end of the response headers was received.
-   *
-   * Will equal null if the request failed or was canceled before the response
-   * started.
-   */
-  DateTime? response_start;
-
-  /**
-   * Time when the request finished.
-   */
-  DateTime request_end;
-
-  /**
-   * True if the socket was reused from a previous request, false otherwise.
-   * In HTTP/2 or QUIC, if streams are multiplexed in a single connection, this
-   * will be {@code true} for all streams after the first.  When {@code true},
-   * DNS, connection, and SSL times will be null.
-   */
-  bool socket_reused = false;
-
-  /**
-   * Returns total bytes sent over the network transport layer, or -1 if not
-   * collected.
-   */
-  int64 sent_byte_count = -1;
-
-  /**
-   * Total bytes received over the network transport layer, or -1 if not
-   * collected. Number of bytes does not include any previous redirects.
-   */
-  int64 received_byte_count = -1;
-};
-
-/**
- * Information about a finished request.
- */
-struct RequestFinishedInfo {
-  /**
-   * The reason why the request finished.
-   */
-  enum FINISHED_REASON {
-    /**
-     * The request succeeded.
-     */
-    SUCCEEDED = 0,
-    /**
-     * The request failed or returned an error.
-     */
-    FAILED = 1,
-    /**
-     * The request was canceled.
-     */
-    CANCELED = 2,
-  };
-
-  /**
-   * Metrics collected for this request.
-   */
-  Metrics metrics;
-
-  /**
-   * The objects that the caller has supplied when initiating the request,
-   * using {@link UrlRequestParams.annotations}.
-   *
-   * Annotations can be used to associate a {@link RequestFinishedInfo} with
-   * the original request or type of request.
-   */
-  array<handle> annotations;
-
-  /**
-   * Returns the reason why the request finished.
-   */
-  FINISHED_REASON finished_reason = SUCCEEDED;
-};
-
-/**
- * Listens for finished requests for the purpose of collecting metrics.
- */
-[Abstract]
-interface RequestFinishedInfoListener {
-  /**
-   * Will be called in a task submitted to the {@code Executor} passed with
-   * this {@code RequestFinishedInfoListener}.
-   *
-   * The listener is called before {@link UrlRequestCallback.OnCanceled()},
-   * {@link UrlRequestCallback.OnFailed()} or {@link
-   * UrlRequestCallback.OnSucceeded()} is called -- note that if the executor
-   * runs the listener asyncronously, the actual call to the listener may
-   * happen after a {@code UrlRequestCallback} method is called.
-   *
-   * @param request_info {@link RequestFinishedInfo} for finished request.
-   *     Ownership is *not* transferred by this call, do not destroy
-   *     {@code request_info}.
-   *
-   *     {@code request_info} will be valid as long as the {@code UrlRequest}
-   *     that created it hasn't been destroyed -- **additionally**, it will
-   *     also always be valid for the duration of {@code OnRequestFinished()},
-   *     even if the {@code UrlRequest} has been destroyed.
-   *
-   *     This is accomplished by ownership being shared between the {@code
-   *     UrlRequest} and the code that calls this listener.
-   *
-   * @param response_info A pointer to the same UrlResponseInfo passed to
-   *     {@link UrlRequestCallback.OnCanceled()}, {@link
-   *     UrlRequestCallback.OnFailed()} or {@link
-   *     UrlRequestCallback.OnSucceeded()}. The lifetime and ownership of
-   *     {@code response_info} works the same as for {@code request_info}.
-   *
-   * @param error A pointer to the same Error passed to
-   *     {@code UrlRequestCallback.OnFailed()}, or null if there was no error.
-   *     The lifetime and ownership of {@code error} works the same as for
-   *     {@code request_info}.
-   */
-  OnRequestFinished(RequestFinishedInfo request_info,
-                    UrlResponseInfo response_info,
-                    Error error);
-};
diff --git a/components/cronet/native/engine.cc b/components/cronet/native/engine.cc
deleted file mode 100644
index 6f27d1a6d0059..0000000000000
--- a/components/cronet/native/engine.cc
+++ /dev/null
@@ -1,498 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/engine.h"
-
-#include <unordered_set>
-#include <utility>
-
-#include "base/bind.h"
-#include "base/callback_helpers.h"
-#include "base/files/file_path.h"
-#include "base/files/file_util.h"
-#include "base/logging.h"
-#include "base/memory/raw_ptr.h"
-#include "base/no_destructor.h"
-#include "build/build_config.h"
-#include "components/cronet/cronet_context.h"
-#include "components/cronet/cronet_global_state.h"
-#include "components/cronet/native/generated/cronet.idl_impl_struct.h"
-#include "components/cronet/native/include/cronet_c.h"
-#include "components/cronet/native/runnables.h"
-#include "components/cronet/url_request_context_config.h"
-#include "components/cronet/version.h"
-#include "components/grpc_support/include/bidirectional_stream_c.h"
-#include "net/base/hash_value.h"
-#include "net/url_request/url_request_context.h"
-#include "net/url_request/url_request_context_builder.h"
-#include "net/url_request/url_request_context_getter.h"
-
-namespace {
-
-class SharedEngineState {
- public:
-  SharedEngineState()
-      : default_user_agent_(cronet::CreateDefaultUserAgent(CRONET_VERSION)) {}
-
-  SharedEngineState(const SharedEngineState&) = delete;
-  SharedEngineState& operator=(const SharedEngineState&) = delete;
-
-  // Marks |storage_path| in use, so multiple engines would not use it at the
-  // same time. Returns |true| if marked successfully, |false| if it is in use
-  // by another engine.
-  bool MarkStoragePathInUse(const std::string& storage_path)
-      LOCKS_EXCLUDED(lock_) {
-    base::AutoLock lock(lock_);
-    return in_use_storage_paths_.emplace(storage_path).second;
-  }
-
-  // Unmarks |storage_path| in use, so another engine could use it.
-  void UnmarkStoragePathInUse(const std::string& storage_path)
-      LOCKS_EXCLUDED(lock_) {
-    base::AutoLock lock(lock_);
-    in_use_storage_paths_.erase(storage_path);
-  }
-
-  // Returns default user agent, based on Cronet version, application info and
-  // platform-specific additional information.
-  Cronet_String GetDefaultUserAgent() const {
-    return default_user_agent_.c_str();
-  }
-
-  static SharedEngineState* GetInstance();
-
- private:
-  const std::string default_user_agent_;
-  // Protecting shared state.
-  base::Lock lock_;
-  std::unordered_set<std::string> in_use_storage_paths_ GUARDED_BY(lock_);
-};
-
-SharedEngineState* SharedEngineState::GetInstance() {
-  static base::NoDestructor<SharedEngineState> instance;
-  return instance.get();
-}
-
-// Does basic validation of host name for PKP and returns |true| if
-// host is valid.
-bool IsValidHostnameForPkp(const std::string& host) {
-  if (host.empty())
-    return false;
-  if (host.size() > 255)
-    return false;
-  if (host.find_first_of(":\\/=\'\",") != host.npos)
-    return false;
-  return true;
-}
-
-}  // namespace
-
-namespace cronet {
-
-Cronet_EngineImpl::Cronet_EngineImpl()
-    : init_completed_(base::WaitableEvent::ResetPolicy::MANUAL,
-                      base::WaitableEvent::InitialState::NOT_SIGNALED),
-      stop_netlog_completed_(base::WaitableEvent::ResetPolicy::MANUAL,
-                             base::WaitableEvent::InitialState::NOT_SIGNALED) {}
-
-Cronet_EngineImpl::~Cronet_EngineImpl() {
-  Shutdown();
-}
-
-Cronet_RESULT Cronet_EngineImpl::StartWithParams(
-    Cronet_EngineParamsPtr params) {
-  cronet::EnsureInitialized();
-  base::AutoLock lock(lock_);
-
-  enable_check_result_ = params->enable_check_result;
-  if (context_) {
-    return CheckResult(Cronet_RESULT_ILLEGAL_STATE_ENGINE_ALREADY_STARTED);
-  }
-
-  URLRequestContextConfigBuilder context_config_builder;
-  context_config_builder.enable_quic = params->enable_quic;
-  context_config_builder.enable_spdy = params->enable_http2;
-  context_config_builder.enable_brotli = params->enable_brotli;
-  switch (params->http_cache_mode) {
-    case Cronet_EngineParams_HTTP_CACHE_MODE_DISABLED:
-      context_config_builder.http_cache = URLRequestContextConfig::DISABLED;
-      break;
-    case Cronet_EngineParams_HTTP_CACHE_MODE_IN_MEMORY:
-      context_config_builder.http_cache = URLRequestContextConfig::MEMORY;
-      break;
-    case Cronet_EngineParams_HTTP_CACHE_MODE_DISK: {
-      context_config_builder.http_cache = URLRequestContextConfig::DISK;
-#if BUILDFLAG(IS_WIN)
-      const base::FilePath storage_path(
-          base::FilePath::FromUTF8Unsafe(params->storage_path));
-#else
-      const base::FilePath storage_path(params->storage_path);
-#endif
-      if (!base::DirectoryExists(storage_path)) {
-        return CheckResult(
-            Cronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST);
-      }
-      if (!SharedEngineState::GetInstance()->MarkStoragePathInUse(
-              params->storage_path)) {
-        LOG(ERROR) << "Disk cache path " << params->storage_path
-                   << " is already used, cache disabled.";
-        return CheckResult(Cronet_RESULT_ILLEGAL_STATE_STORAGE_PATH_IN_USE);
-      }
-      in_use_storage_path_ = params->storage_path;
-      break;
-    }
-    default:
-      context_config_builder.http_cache = URLRequestContextConfig::DISABLED;
-  }
-  context_config_builder.http_cache_max_size = params->http_cache_max_size;
-  context_config_builder.storage_path = params->storage_path;
-  context_config_builder.accept_language = params->accept_language;
-  context_config_builder.user_agent = params->user_agent;
-  context_config_builder.experimental_options = params->experimental_options;
-  context_config_builder.bypass_public_key_pinning_for_local_trust_anchors =
-      params->enable_public_key_pinning_bypass_for_local_trust_anchors;
-  if (!isnan(params->network_thread_priority)) {
-    context_config_builder.network_thread_priority =
-        params->network_thread_priority;
-  }
-
-  // MockCertVerifier to use for testing purposes.
-  context_config_builder.mock_cert_verifier = std::move(mock_cert_verifier_);
-  std::unique_ptr<URLRequestContextConfig> config =
-      context_config_builder.Build();
-
-  for (const auto& public_key_pins : params->public_key_pins) {
-    auto pkp = std::make_unique<URLRequestContextConfig::Pkp>(
-        public_key_pins.host, public_key_pins.include_subdomains,
-        base::Time::FromJavaTime(public_key_pins.expiration_date));
-    if (pkp->host.empty())
-      return CheckResult(Cronet_RESULT_NULL_POINTER_HOSTNAME);
-    if (!IsValidHostnameForPkp(pkp->host))
-      return CheckResult(Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HOSTNAME);
-    if (pkp->expiration_date.is_null())
-      return CheckResult(Cronet_RESULT_NULL_POINTER_EXPIRATION_DATE);
-    if (public_key_pins.pins_sha256.empty())
-      return CheckResult(Cronet_RESULT_NULL_POINTER_SHA256_PINS);
-    for (const auto& pin_sha256 : public_key_pins.pins_sha256) {
-      net::HashValue pin_hash;
-      if (!pin_hash.FromString(pin_sha256))
-        return CheckResult(Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_PIN);
-      pkp->pin_hashes.push_back(pin_hash);
-    }
-    config->pkp_list.push_back(std::move(pkp));
-  }
-
-  for (const auto& quic_hint : params->quic_hints) {
-    config->quic_hints.push_back(
-        std::make_unique<URLRequestContextConfig::QuicHint>(
-            quic_hint.host, quic_hint.port, quic_hint.alternate_port));
-  }
-
-  context_ = std::make_unique<CronetContext>(std::move(config),
-                                             std::make_unique<Callback>(this));
-
-  // TODO(mef): It'd be nice to remove the java code and this code, and get
-  // rid of CronetContextAdapter::InitRequestContextOnInitThread.
-  // Could also make CronetContext::InitRequestContextOnInitThread()
-  // private and mark CronetLibraryLoader.postToInitThread() as
-  // @VisibleForTesting (as the only external use will be in a test).
-
-  // Initialize context on the init thread.
-  cronet::PostTaskToInitThread(
-      FROM_HERE, base::BindOnce(&CronetContext::InitRequestContextOnInitThread,
-                                base::Unretained(context_.get())));
-  return CheckResult(Cronet_RESULT_SUCCESS);
-}
-
-bool Cronet_EngineImpl::StartNetLogToFile(Cronet_String file_name,
-                                          bool log_all) {
-  base::AutoLock lock(lock_);
-  if (is_logging_ || !context_)
-    return false;
-  is_logging_ = context_->StartNetLogToFile(file_name, log_all);
-  return is_logging_;
-}
-
-void Cronet_EngineImpl::StopNetLog() {
-  {
-    base::AutoLock lock(lock_);
-    if (!is_logging_ || !context_)
-      return;
-    context_->StopNetLog();
-    // Release |lock| so it could be acquired in OnStopNetLog.
-  }
-  stop_netlog_completed_.Wait();
-  stop_netlog_completed_.Reset();
-}
-
-Cronet_String Cronet_EngineImpl::GetVersionString() {
-  return CRONET_VERSION;
-}
-
-Cronet_String Cronet_EngineImpl::GetDefaultUserAgent() {
-  return SharedEngineState::GetInstance()->GetDefaultUserAgent();
-}
-
-Cronet_RESULT Cronet_EngineImpl::Shutdown() {
-  {  // Check whether engine is running.
-    base::AutoLock lock(lock_);
-    if (!context_)
-      return CheckResult(Cronet_RESULT_SUCCESS);
-  }
-  // Wait for init to complete on init and network thread (without lock, so
-  // other thread could access it).
-  init_completed_.Wait();
-  // If not logging, this is a no-op.
-  StopNetLog();
-  // Stop the engine.
-  base::AutoLock lock(lock_);
-  if (context_->IsOnNetworkThread()) {
-    return CheckResult(
-        Cronet_RESULT_ILLEGAL_STATE_CANNOT_SHUTDOWN_ENGINE_FROM_NETWORK_THREAD);
-  }
-
-  if (!in_use_storage_path_.empty()) {
-    SharedEngineState::GetInstance()->UnmarkStoragePathInUse(
-        in_use_storage_path_);
-  }
-
-  stream_engine_.reset();
-  context_.reset();
-  return CheckResult(Cronet_RESULT_SUCCESS);
-}
-
-void Cronet_EngineImpl::AddRequestFinishedListener(
-    Cronet_RequestFinishedInfoListenerPtr listener,
-    Cronet_ExecutorPtr executor) {
-  if (listener == nullptr || executor == nullptr) {
-    LOG(DFATAL) << "Both listener and executor must be non-null. listener: "
-                << listener << " executor: " << executor << ".";
-    return;
-  }
-  base::AutoLock lock(lock_);
-  if (request_finished_registrations_.count(listener) > 0) {
-    LOG(DFATAL) << "Listener " << listener
-                << " already registered with executor "
-                << request_finished_registrations_[listener]
-                << ", *NOT* changing to new executor " << executor << ".";
-    return;
-  }
-  request_finished_registrations_.insert({listener, executor});
-}
-
-void Cronet_EngineImpl::RemoveRequestFinishedListener(
-    Cronet_RequestFinishedInfoListenerPtr listener) {
-  base::AutoLock lock(lock_);
-  if (request_finished_registrations_.erase(listener) != 1) {
-    LOG(DFATAL) << "Asked to erase non-existent RequestFinishedInfoListener "
-                << listener << ".";
-  }
-}
-
-namespace {
-
-using RequestFinishedInfo = base::RefCountedData<Cronet_RequestFinishedInfo>;
-using UrlResponseInfo = base::RefCountedData<Cronet_UrlResponseInfo>;
-using CronetError = base::RefCountedData<Cronet_Error>;
-
-template <typename T>
-T* GetData(scoped_refptr<base::RefCountedData<T>> ptr) {
-  return ptr == nullptr ? nullptr : &ptr->data;
-}
-
-}  // namespace
-
-void Cronet_EngineImpl::ReportRequestFinished(
-    scoped_refptr<RequestFinishedInfo> request_info,
-    scoped_refptr<UrlResponseInfo> url_response_info,
-    scoped_refptr<CronetError> error) {
-  base::flat_map<Cronet_RequestFinishedInfoListenerPtr, Cronet_ExecutorPtr>
-      registrations;
-  {
-    base::AutoLock lock(lock_);
-    // We copy under to avoid calling callbacks (which may run on direct
-    // executors and call Engine methods) with the lock held.
-    //
-    // The map holds only pointers and shouldn't be very large.
-    registrations = request_finished_registrations_;
-  }
-  for (auto& pair : registrations) {
-    auto* request_finished_listener = pair.first;
-    auto* request_finished_executor = pair.second;
-
-    request_finished_executor->Execute(
-        new cronet::OnceClosureRunnable(base::BindOnce(
-            [](Cronet_RequestFinishedInfoListenerPtr request_finished_listener,
-               scoped_refptr<RequestFinishedInfo> request_info,
-               scoped_refptr<UrlResponseInfo> url_response_info,
-               scoped_refptr<CronetError> error) {
-              request_finished_listener->OnRequestFinished(
-                  GetData(request_info), GetData(url_response_info),
-                  GetData(error));
-            },
-            request_finished_listener, request_info, url_response_info,
-            error)));
-  }
-}
-
-Cronet_RESULT Cronet_EngineImpl::CheckResult(Cronet_RESULT result) {
-  if (enable_check_result_)
-    CHECK_EQ(Cronet_RESULT_SUCCESS, result);
-  return result;
-}
-
-bool Cronet_EngineImpl::HasRequestFinishedListener() {
-  base::AutoLock lock(lock_);
-  return request_finished_registrations_.size() > 0;
-}
-
-// The struct stream_engine for grpc support.
-// Holds net::URLRequestContextGetter and app-specific annotation.
-class Cronet_EngineImpl::StreamEngineImpl : public stream_engine {
- public:
-  explicit StreamEngineImpl(net::URLRequestContextGetter* context_getter) {
-    context_getter_ = context_getter;
-    obj = context_getter_.get();
-    annotation = nullptr;
-  }
-
-  ~StreamEngineImpl() {
-    obj = nullptr;
-    annotation = nullptr;
-  }
-
- private:
-  scoped_refptr<net::URLRequestContextGetter> context_getter_;
-};
-
-// Callback is owned by CronetContext. It is invoked and deleted
-// on the network thread.
-class Cronet_EngineImpl::Callback : public CronetContext::Callback {
- public:
-  explicit Callback(Cronet_EngineImpl* engine);
-
-  Callback(const Callback&) = delete;
-  Callback& operator=(const Callback&) = delete;
-
-  ~Callback() override;
-
-  // CronetContext::Callback implementation:
-  void OnInitNetworkThread() override LOCKS_EXCLUDED(engine_->lock_);
-  void OnDestroyNetworkThread() override;
-  void OnEffectiveConnectionTypeChanged(
-      net::EffectiveConnectionType effective_connection_type) override;
-  void OnRTTOrThroughputEstimatesComputed(
-      int32_t http_rtt_ms,
-      int32_t transport_rtt_ms,
-      int32_t downstream_throughput_kbps) override;
-  void OnRTTObservation(int32_t rtt_ms,
-                        int32_t timestamp_ms,
-                        net::NetworkQualityObservationSource source) override;
-  void OnThroughputObservation(
-      int32_t throughput_kbps,
-      int32_t timestamp_ms,
-      net::NetworkQualityObservationSource source) override;
-  void OnStopNetLogCompleted() override LOCKS_EXCLUDED(engine_->lock_);
-
- private:
-  // The engine which owns context that owns |this| callback.
-  const raw_ptr<Cronet_EngineImpl> engine_;
-
-  // All methods are invoked on the network thread.
-  THREAD_CHECKER(network_thread_checker_);
-};
-
-Cronet_EngineImpl::Callback::Callback(Cronet_EngineImpl* engine)
-    : engine_(engine) {
-  DETACH_FROM_THREAD(network_thread_checker_);
-}
-
-Cronet_EngineImpl::Callback::~Callback() = default;
-
-void Cronet_EngineImpl::Callback::OnInitNetworkThread() {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  // It is possible that engine_->context_ is reset from main thread while
-  // being intialized on network thread.
-  base::AutoLock lock(engine_->lock_);
-  if (engine_->context_) {
-    // Initialize bidirectional stream engine for grpc.
-    engine_->stream_engine_ = std::make_unique<StreamEngineImpl>(
-        engine_->context_->CreateURLRequestContextGetter());
-    engine_->init_completed_.Signal();
-  }
-}
-
-void Cronet_EngineImpl::Callback::OnDestroyNetworkThread() {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  DCHECK(!engine_->stream_engine_);
-}
-
-void Cronet_EngineImpl::Callback::OnEffectiveConnectionTypeChanged(
-    net::EffectiveConnectionType effective_connection_type) {
-  NOTIMPLEMENTED();
-}
-
-void Cronet_EngineImpl::Callback::OnRTTOrThroughputEstimatesComputed(
-    int32_t http_rtt_ms,
-    int32_t transport_rtt_ms,
-    int32_t downstream_throughput_kbps) {
-  NOTIMPLEMENTED();
-}
-
-void Cronet_EngineImpl::Callback::OnRTTObservation(
-    int32_t rtt_ms,
-    int32_t timestamp_ms,
-    net::NetworkQualityObservationSource source) {
-  NOTIMPLEMENTED();
-}
-
-void Cronet_EngineImpl::Callback::OnThroughputObservation(
-    int32_t throughput_kbps,
-    int32_t timestamp_ms,
-    net::NetworkQualityObservationSource source) {
-  NOTIMPLEMENTED();
-}
-
-void Cronet_EngineImpl::Callback::OnStopNetLogCompleted() {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  CHECK(engine_);
-  base::AutoLock lock(engine_->lock_);
-  DCHECK(engine_->is_logging_);
-  engine_->is_logging_ = false;
-  engine_->stop_netlog_completed_.Signal();
-}
-
-void Cronet_EngineImpl::SetMockCertVerifierForTesting(
-    std::unique_ptr<net::CertVerifier> mock_cert_verifier) {
-  CHECK(!context_);
-  mock_cert_verifier_ = std::move(mock_cert_verifier);
-}
-
-stream_engine* Cronet_EngineImpl::GetBidirectionalStreamEngine() {
-  init_completed_.Wait();
-  return stream_engine_.get();
-}
-
-}  // namespace cronet
-
-CRONET_EXPORT Cronet_EnginePtr Cronet_Engine_Create() {
-  return new cronet::Cronet_EngineImpl();
-}
-
-CRONET_EXPORT void Cronet_Engine_SetMockCertVerifierForTesting(
-    Cronet_EnginePtr engine,
-    void* raw_mock_cert_verifier) {
-  cronet::Cronet_EngineImpl* engine_impl =
-      static_cast<cronet::Cronet_EngineImpl*>(engine);
-  std::unique_ptr<net::CertVerifier> cert_verifier;
-  cert_verifier.reset(static_cast<net::CertVerifier*>(raw_mock_cert_verifier));
-  engine_impl->SetMockCertVerifierForTesting(std::move(cert_verifier));
-}
-
-CRONET_EXPORT stream_engine* Cronet_Engine_GetStreamEngine(
-    Cronet_EnginePtr engine) {
-  cronet::Cronet_EngineImpl* engine_impl =
-      static_cast<cronet::Cronet_EngineImpl*>(engine);
-  return engine_impl->GetBidirectionalStreamEngine();
-}
diff --git a/components/cronet/native/engine.h b/components/cronet/native/engine.h
deleted file mode 100644
index 4aaed0e69de26..0000000000000
--- a/components/cronet/native/engine.h
+++ /dev/null
@@ -1,115 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_ENGINE_H_
-#define COMPONENTS_CRONET_NATIVE_ENGINE_H_
-
-#include <memory>
-#include <string>
-
-#include "base/containers/flat_map.h"
-#include "base/memory/ref_counted.h"
-#include "base/memory/scoped_refptr.h"
-#include "base/synchronization/lock.h"
-#include "base/synchronization/waitable_event.h"
-#include "base/thread_annotations.h"
-#include "components/cronet/native/generated/cronet.idl_impl_interface.h"
-
-extern "C" typedef struct stream_engine stream_engine;
-
-namespace net {
-class CertVerifier;
-}
-
-namespace cronet {
-class CronetContext;
-
-// Implementation of Cronet_Engine that uses CronetContext.
-class Cronet_EngineImpl : public Cronet_Engine {
- public:
-  Cronet_EngineImpl();
-
-  Cronet_EngineImpl(const Cronet_EngineImpl&) = delete;
-  Cronet_EngineImpl& operator=(const Cronet_EngineImpl&) = delete;
-
-  ~Cronet_EngineImpl() override;
-
-  // Cronet_Engine implementation:
-  Cronet_RESULT StartWithParams(Cronet_EngineParamsPtr params) override
-      LOCKS_EXCLUDED(lock_);
-  bool StartNetLogToFile(Cronet_String file_name, bool log_all) override
-      LOCKS_EXCLUDED(lock_);
-  void StopNetLog() override LOCKS_EXCLUDED(lock_);
-  Cronet_String GetVersionString() override;
-  Cronet_String GetDefaultUserAgent() override;
-  Cronet_RESULT Shutdown() override LOCKS_EXCLUDED(lock_);
-  void AddRequestFinishedListener(
-      Cronet_RequestFinishedInfoListenerPtr listener,
-      Cronet_ExecutorPtr executor) override;
-  void RemoveRequestFinishedListener(
-      Cronet_RequestFinishedInfoListenerPtr listener) override;
-
-  // Check |result| and aborts if result is not SUCCESS and enableCheckResult
-  // is true.
-  Cronet_RESULT CheckResult(Cronet_RESULT result);
-
-  // Set Mock CertVerifier for testing. Must be called before StartWithParams.
-  void SetMockCertVerifierForTesting(
-      std::unique_ptr<net::CertVerifier> mock_cert_verifier);
-
-  // Get stream engine for GRPC Bidirectional Stream support. The returned
-  // stream_engine is owned by |this| and is only valid until |this| shutdown.
-  stream_engine* GetBidirectionalStreamEngine();
-
-  CronetContext* cronet_url_request_context() const { return context_.get(); }
-
-  // Returns true if there is a listener currently registered (using
-  // AddRequestFinishedListener()), and false otherwise.
-  bool HasRequestFinishedListener();
-
-  // Provide |request_info| to all registered RequestFinishedListeners.
-  void ReportRequestFinished(
-      scoped_refptr<base::RefCountedData<Cronet_RequestFinishedInfo>>
-          request_info,
-      scoped_refptr<base::RefCountedData<Cronet_UrlResponseInfo>>
-          url_response_info,
-      scoped_refptr<base::RefCountedData<Cronet_Error>> error);
-
- private:
-  class StreamEngineImpl;
-  class Callback;
-
-  // Enable runtime CHECK of the result.
-  bool enable_check_result_ = true;
-
-  // Synchronize access to member variables from different threads.
-  base::Lock lock_;
-  // Cronet URLRequest context used for all network operations.
-  std::unique_ptr<CronetContext> context_;
-  // Signaled when |context_| initialization is done.
-  base::WaitableEvent init_completed_;
-
-  // Flag that indicates whether logging is in progress.
-  bool is_logging_ GUARDED_BY(lock_) = false;
-  // Signaled when |StopNetLog| is done.
-  base::WaitableEvent stop_netlog_completed_;
-
-  // Storage path used by this engine.
-  std::string in_use_storage_path_ GUARDED_BY(lock_);
-
-  // Stream engine for GRPC Bidirectional Stream support.
-  std::unique_ptr<StreamEngineImpl> stream_engine_;
-
-  // Mock CertVerifier for testing. Only valid until StartWithParams.
-  std::unique_ptr<net::CertVerifier> mock_cert_verifier_;
-
-  // Stores registered RequestFinishedInfoListeners with their associated
-  // Executors.
-  base::flat_map<Cronet_RequestFinishedInfoListenerPtr, Cronet_ExecutorPtr>
-      request_finished_registrations_ GUARDED_BY(lock_);
-};
-
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_NATIVE_ENGINE_H_
diff --git a/components/cronet/native/engine_unittest.cc b/components/cronet/native/engine_unittest.cc
deleted file mode 100644
index ae113bf432b66..0000000000000
--- a/components/cronet/native/engine_unittest.cc
+++ /dev/null
@@ -1,253 +0,0 @@
-// Copyright 2019 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "cronet_c.h"
-
-#include "base/test/gtest_util.h"
-#include "build/build_config.h"
-#include "components/cronet/native/engine.h"
-#include "components/cronet/native/generated/cronet.idl_impl_struct.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-namespace cronet {
-
-namespace {
-
-// Fake sent byte count for metrics testing.
-constexpr int64_t kSentByteCount = 12345;
-
-// App implementation of Cronet_Executor methods.
-void TestExecutor_Execute(Cronet_ExecutorPtr self, Cronet_RunnablePtr command) {
-  CHECK(self);
-  Cronet_Runnable_Run(command);
-  Cronet_Runnable_Destroy(command);
-}
-
-// Context for TestRequestInfoListener_OnRequestFinished().
-using TestOnRequestFinishedClientContext = int;
-
-// App implementation of Cronet_RequestFinishedInfoListener methods.
-//
-// Expects a client context of type TestOnRequestFinishedClientContext -- will
-// increment this value.
-void TestRequestInfoListener_OnRequestFinished(
-    Cronet_RequestFinishedInfoListenerPtr self,
-    Cronet_RequestFinishedInfoPtr request_info,
-    Cronet_UrlResponseInfoPtr url_response_info,
-    Cronet_ErrorPtr error) {
-  CHECK(self);
-  Cronet_ClientContext context =
-      Cronet_RequestFinishedInfoListener_GetClientContext(self);
-  auto* listener_run_count =
-      static_cast<TestOnRequestFinishedClientContext*>(context);
-  ++(*listener_run_count);
-  auto* metrics = Cronet_RequestFinishedInfo_metrics_get(request_info);
-  EXPECT_EQ(kSentByteCount, Cronet_Metrics_sent_byte_count_get(metrics));
-  EXPECT_NE(nullptr, url_response_info);
-  EXPECT_NE(nullptr, error);
-}
-
-TEST(EngineUnitTest, HasNoRequestFinishedInfoListener) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-
-  auto* engine_impl = static_cast<Cronet_EngineImpl*>(engine);
-  EXPECT_FALSE(engine_impl->HasRequestFinishedListener());
-
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST(EngineUnitTest, HasRequestFinishedInfoListener) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-
-  Cronet_RequestFinishedInfoListenerPtr listener =
-      Cronet_RequestFinishedInfoListener_CreateWith(
-          TestRequestInfoListener_OnRequestFinished);
-  Cronet_ExecutorPtr executor =
-      Cronet_Executor_CreateWith(TestExecutor_Execute);
-  Cronet_Engine_AddRequestFinishedListener(engine, listener, executor);
-
-  auto* engine_impl = static_cast<Cronet_EngineImpl*>(engine);
-  EXPECT_TRUE(engine_impl->HasRequestFinishedListener());
-
-  Cronet_Engine_RemoveRequestFinishedListener(engine, listener);
-  EXPECT_FALSE(engine_impl->HasRequestFinishedListener());
-  Cronet_Executor_Destroy(executor);
-  Cronet_RequestFinishedInfoListener_Destroy(listener);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST(EngineUnitTest, RequestFinishedInfoListeners) {
-  using RequestInfo = base::RefCountedData<Cronet_RequestFinishedInfo>;
-  using UrlResponseInfo = base::RefCountedData<Cronet_UrlResponseInfo>;
-  using CronetError = base::RefCountedData<Cronet_Error>;
-  constexpr int kNumListeners = 5;
-  TestOnRequestFinishedClientContext listener_run_count = 0;
-
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-
-  Cronet_RequestFinishedInfoListenerPtr listeners[kNumListeners];
-  Cronet_ExecutorPtr executor =
-      Cronet_Executor_CreateWith(TestExecutor_Execute);
-  for (int i = 0; i < kNumListeners; ++i) {
-    listeners[i] = Cronet_RequestFinishedInfoListener_CreateWith(
-        TestRequestInfoListener_OnRequestFinished);
-    Cronet_RequestFinishedInfoListener_SetClientContext(listeners[i],
-                                                        &listener_run_count);
-    Cronet_Engine_AddRequestFinishedListener(engine, listeners[i], executor);
-  }
-
-  // Simulate the UrlRequest reporting metrics to the engine.
-  auto* engine_impl = static_cast<Cronet_EngineImpl*>(engine);
-  auto request_info = base::MakeRefCounted<RequestInfo>();
-  auto url_response_info = base::MakeRefCounted<UrlResponseInfo>();
-  auto error = base::MakeRefCounted<CronetError>();
-  auto metrics = std::make_unique<Cronet_Metrics>();
-  metrics->sent_byte_count = kSentByteCount;
-  request_info->data.metrics.emplace(*metrics);
-  engine_impl->ReportRequestFinished(request_info, url_response_info, error);
-  EXPECT_EQ(kNumListeners, listener_run_count);
-
-  for (auto* listener : listeners) {
-    Cronet_RequestFinishedInfoListener_Destroy(listener);
-    Cronet_Engine_RemoveRequestFinishedListener(engine, listener);
-  }
-  Cronet_Executor_Destroy(executor);
-  Cronet_Engine_Destroy(engine);
-  Cronet_EngineParams_Destroy(engine_params);
-}
-
-TEST(EngineUnitTest, AddNullRequestFinishedInfoListener) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-
-  Cronet_ExecutorPtr executor =
-      Cronet_Executor_CreateWith(TestExecutor_Execute);
-  EXPECT_DCHECK_DEATH_WITH(
-      Cronet_Engine_AddRequestFinishedListener(engine, nullptr, executor),
-      "Both listener and executor must be non-null. listener: .* executor: "
-      ".*\\.");
-
-  auto* engine_impl = static_cast<Cronet_EngineImpl*>(engine);
-  EXPECT_FALSE(engine_impl->HasRequestFinishedListener());
-
-  Cronet_Executor_Destroy(executor);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST(EngineUnitTest, AddNullRequestFinishedInfoExecutor) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-
-  Cronet_RequestFinishedInfoListenerPtr listener =
-      Cronet_RequestFinishedInfoListener_CreateWith(
-          TestRequestInfoListener_OnRequestFinished);
-  EXPECT_DCHECK_DEATH_WITH(
-      Cronet_Engine_AddRequestFinishedListener(engine, listener, nullptr),
-      "Both listener and executor must be non-null. listener: .* executor: "
-      ".*\\.");
-
-  auto* engine_impl = static_cast<Cronet_EngineImpl*>(engine);
-  EXPECT_FALSE(engine_impl->HasRequestFinishedListener());
-
-  Cronet_RequestFinishedInfoListener_Destroy(listener);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST(EngineUnitTest, AddNullRequestFinishedInfoListenerAndExecutor) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-
-  EXPECT_DCHECK_DEATH_WITH(
-      Cronet_Engine_AddRequestFinishedListener(engine, nullptr, nullptr),
-      "Both listener and executor must be non-null. listener: .* executor: "
-      ".*\\.");
-
-  auto* engine_impl = static_cast<Cronet_EngineImpl*>(engine);
-  EXPECT_FALSE(engine_impl->HasRequestFinishedListener());
-
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST(EngineUnitTest, AddListenerTwice) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-
-  Cronet_RequestFinishedInfoListenerPtr listener =
-      Cronet_RequestFinishedInfoListener_CreateWith(
-          TestRequestInfoListener_OnRequestFinished);
-  Cronet_ExecutorPtr executor =
-      Cronet_Executor_CreateWith(TestExecutor_Execute);
-  Cronet_Engine_AddRequestFinishedListener(engine, listener, executor);
-  EXPECT_DCHECK_DEATH_WITH(
-      Cronet_Engine_AddRequestFinishedListener(engine, listener, executor),
-      "Listener .* already registered with executor .*, \\*NOT\\* changing to "
-      "new executor .*\\.");
-
-  auto* engine_impl = static_cast<Cronet_EngineImpl*>(engine);
-  EXPECT_TRUE(engine_impl->HasRequestFinishedListener());
-
-  Cronet_Engine_RemoveRequestFinishedListener(engine, listener);
-  EXPECT_FALSE(engine_impl->HasRequestFinishedListener());
-  Cronet_Executor_Destroy(executor);
-  Cronet_RequestFinishedInfoListener_Destroy(listener);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST(EngineUnitTest, RemoveNonexistentListener) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-
-  Cronet_RequestFinishedInfoListenerPtr listener =
-      Cronet_RequestFinishedInfoListener_CreateWith(
-          TestRequestInfoListener_OnRequestFinished);
-  EXPECT_DCHECK_DEATH_WITH(
-      Cronet_Engine_RemoveRequestFinishedListener(engine, listener),
-      "Asked to erase non-existent RequestFinishedInfoListener .*\\.");
-
-  auto* engine_impl = static_cast<Cronet_EngineImpl*>(engine);
-  EXPECT_FALSE(engine_impl->HasRequestFinishedListener());
-
-  Cronet_RequestFinishedInfoListener_Destroy(listener);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST(EngineUnitTest, RemoveNonexistentListenerWithAddedListener) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-
-  Cronet_RequestFinishedInfoListenerPtr listener =
-      Cronet_RequestFinishedInfoListener_CreateWith(
-          TestRequestInfoListener_OnRequestFinished);
-  Cronet_RequestFinishedInfoListenerPtr listener2 =
-      Cronet_RequestFinishedInfoListener_CreateWith(
-          TestRequestInfoListener_OnRequestFinished);
-  Cronet_ExecutorPtr executor =
-      Cronet_Executor_CreateWith(TestExecutor_Execute);
-  Cronet_Engine_AddRequestFinishedListener(engine, listener, executor);
-
-  EXPECT_DCHECK_DEATH_WITH(
-      Cronet_Engine_RemoveRequestFinishedListener(engine, listener2),
-      "Asked to erase non-existent RequestFinishedInfoListener .*\\.");
-
-  auto* engine_impl = static_cast<Cronet_EngineImpl*>(engine);
-  EXPECT_TRUE(engine_impl->HasRequestFinishedListener());
-
-  Cronet_Engine_RemoveRequestFinishedListener(engine, listener);
-  EXPECT_FALSE(engine_impl->HasRequestFinishedListener());
-  Cronet_RequestFinishedInfoListener_Destroy(listener);
-  Cronet_RequestFinishedInfoListener_Destroy(listener2);
-  Cronet_Executor_Destroy(executor);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST(EngineUnitTest, RemoveNullListener) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-
-  EXPECT_DCHECK_DEATH_WITH(
-      Cronet_Engine_RemoveRequestFinishedListener(engine, nullptr),
-      "Asked to erase non-existent RequestFinishedInfoListener .*\\.");
-
-  auto* engine_impl = static_cast<Cronet_EngineImpl*>(engine);
-  EXPECT_FALSE(engine_impl->HasRequestFinishedListener());
-
-  Cronet_Engine_Destroy(engine);
-}
-
-}  // namespace
-}  // namespace cronet
diff --git a/components/cronet/native/generated/cronet.idl_c.h b/components/cronet/native/generated/cronet.idl_c.h
deleted file mode 100644
index 988e6efacb0f3..0000000000000
--- a/components/cronet/native/generated/cronet.idl_c.h
+++ /dev/null
@@ -1,1284 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-/* DO NOT EDIT. Generated from components/cronet/native/generated/cronet.idl */
-
-#ifndef COMPONENTS_CRONET_NATIVE_GENERATED_CRONET_IDL_C_H_
-#define COMPONENTS_CRONET_NATIVE_GENERATED_CRONET_IDL_C_H_
-#include "cronet_export.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#include <stdint.h>
-
-typedef const char* Cronet_String;
-typedef void* Cronet_RawDataPtr;
-typedef void* Cronet_ClientContext;
-
-// Forward declare interfaces.
-typedef struct Cronet_Buffer Cronet_Buffer;
-typedef struct Cronet_Buffer* Cronet_BufferPtr;
-typedef struct Cronet_BufferCallback Cronet_BufferCallback;
-typedef struct Cronet_BufferCallback* Cronet_BufferCallbackPtr;
-typedef struct Cronet_Runnable Cronet_Runnable;
-typedef struct Cronet_Runnable* Cronet_RunnablePtr;
-typedef struct Cronet_Executor Cronet_Executor;
-typedef struct Cronet_Executor* Cronet_ExecutorPtr;
-typedef struct Cronet_Engine Cronet_Engine;
-typedef struct Cronet_Engine* Cronet_EnginePtr;
-typedef struct Cronet_UrlRequestStatusListener Cronet_UrlRequestStatusListener;
-typedef struct Cronet_UrlRequestStatusListener*
-    Cronet_UrlRequestStatusListenerPtr;
-typedef struct Cronet_UrlRequestCallback Cronet_UrlRequestCallback;
-typedef struct Cronet_UrlRequestCallback* Cronet_UrlRequestCallbackPtr;
-typedef struct Cronet_UploadDataSink Cronet_UploadDataSink;
-typedef struct Cronet_UploadDataSink* Cronet_UploadDataSinkPtr;
-typedef struct Cronet_UploadDataProvider Cronet_UploadDataProvider;
-typedef struct Cronet_UploadDataProvider* Cronet_UploadDataProviderPtr;
-typedef struct Cronet_UrlRequest Cronet_UrlRequest;
-typedef struct Cronet_UrlRequest* Cronet_UrlRequestPtr;
-typedef struct Cronet_RequestFinishedInfoListener
-    Cronet_RequestFinishedInfoListener;
-typedef struct Cronet_RequestFinishedInfoListener*
-    Cronet_RequestFinishedInfoListenerPtr;
-
-// Forward declare structs.
-typedef struct Cronet_Error Cronet_Error;
-typedef struct Cronet_Error* Cronet_ErrorPtr;
-typedef struct Cronet_QuicHint Cronet_QuicHint;
-typedef struct Cronet_QuicHint* Cronet_QuicHintPtr;
-typedef struct Cronet_PublicKeyPins Cronet_PublicKeyPins;
-typedef struct Cronet_PublicKeyPins* Cronet_PublicKeyPinsPtr;
-typedef struct Cronet_EngineParams Cronet_EngineParams;
-typedef struct Cronet_EngineParams* Cronet_EngineParamsPtr;
-typedef struct Cronet_HttpHeader Cronet_HttpHeader;
-typedef struct Cronet_HttpHeader* Cronet_HttpHeaderPtr;
-typedef struct Cronet_UrlResponseInfo Cronet_UrlResponseInfo;
-typedef struct Cronet_UrlResponseInfo* Cronet_UrlResponseInfoPtr;
-typedef struct Cronet_UrlRequestParams Cronet_UrlRequestParams;
-typedef struct Cronet_UrlRequestParams* Cronet_UrlRequestParamsPtr;
-typedef struct Cronet_DateTime Cronet_DateTime;
-typedef struct Cronet_DateTime* Cronet_DateTimePtr;
-typedef struct Cronet_Metrics Cronet_Metrics;
-typedef struct Cronet_Metrics* Cronet_MetricsPtr;
-typedef struct Cronet_RequestFinishedInfo Cronet_RequestFinishedInfo;
-typedef struct Cronet_RequestFinishedInfo* Cronet_RequestFinishedInfoPtr;
-
-// Declare enums
-typedef enum Cronet_RESULT {
-  Cronet_RESULT_SUCCESS = 0,
-  Cronet_RESULT_ILLEGAL_ARGUMENT = -100,
-  Cronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST = -101,
-  Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_PIN = -102,
-  Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HOSTNAME = -103,
-  Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_METHOD = -104,
-  Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_HEADER = -105,
-  Cronet_RESULT_ILLEGAL_STATE = -200,
-  Cronet_RESULT_ILLEGAL_STATE_STORAGE_PATH_IN_USE = -201,
-  Cronet_RESULT_ILLEGAL_STATE_CANNOT_SHUTDOWN_ENGINE_FROM_NETWORK_THREAD = -202,
-  Cronet_RESULT_ILLEGAL_STATE_ENGINE_ALREADY_STARTED = -203,
-  Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_STARTED = -204,
-  Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_INITIALIZED = -205,
-  Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_INITIALIZED = -206,
-  Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_STARTED = -207,
-  Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_REDIRECT = -208,
-  Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_READ = -209,
-  Cronet_RESULT_ILLEGAL_STATE_READ_FAILED = -210,
-  Cronet_RESULT_NULL_POINTER = -300,
-  Cronet_RESULT_NULL_POINTER_HOSTNAME = -301,
-  Cronet_RESULT_NULL_POINTER_SHA256_PINS = -302,
-  Cronet_RESULT_NULL_POINTER_EXPIRATION_DATE = -303,
-  Cronet_RESULT_NULL_POINTER_ENGINE = -304,
-  Cronet_RESULT_NULL_POINTER_URL = -305,
-  Cronet_RESULT_NULL_POINTER_CALLBACK = -306,
-  Cronet_RESULT_NULL_POINTER_EXECUTOR = -307,
-  Cronet_RESULT_NULL_POINTER_METHOD = -308,
-  Cronet_RESULT_NULL_POINTER_HEADER_NAME = -309,
-  Cronet_RESULT_NULL_POINTER_HEADER_VALUE = -310,
-  Cronet_RESULT_NULL_POINTER_PARAMS = -311,
-  Cronet_RESULT_NULL_POINTER_REQUEST_FINISHED_INFO_LISTENER_EXECUTOR = -312,
-} Cronet_RESULT;
-
-typedef enum Cronet_Error_ERROR_CODE {
-  Cronet_Error_ERROR_CODE_ERROR_CALLBACK = 0,
-  Cronet_Error_ERROR_CODE_ERROR_HOSTNAME_NOT_RESOLVED = 1,
-  Cronet_Error_ERROR_CODE_ERROR_INTERNET_DISCONNECTED = 2,
-  Cronet_Error_ERROR_CODE_ERROR_NETWORK_CHANGED = 3,
-  Cronet_Error_ERROR_CODE_ERROR_TIMED_OUT = 4,
-  Cronet_Error_ERROR_CODE_ERROR_CONNECTION_CLOSED = 5,
-  Cronet_Error_ERROR_CODE_ERROR_CONNECTION_TIMED_OUT = 6,
-  Cronet_Error_ERROR_CODE_ERROR_CONNECTION_REFUSED = 7,
-  Cronet_Error_ERROR_CODE_ERROR_CONNECTION_RESET = 8,
-  Cronet_Error_ERROR_CODE_ERROR_ADDRESS_UNREACHABLE = 9,
-  Cronet_Error_ERROR_CODE_ERROR_QUIC_PROTOCOL_FAILED = 10,
-  Cronet_Error_ERROR_CODE_ERROR_OTHER = 11,
-} Cronet_Error_ERROR_CODE;
-
-typedef enum Cronet_EngineParams_HTTP_CACHE_MODE {
-  Cronet_EngineParams_HTTP_CACHE_MODE_DISABLED = 0,
-  Cronet_EngineParams_HTTP_CACHE_MODE_IN_MEMORY = 1,
-  Cronet_EngineParams_HTTP_CACHE_MODE_DISK_NO_HTTP = 2,
-  Cronet_EngineParams_HTTP_CACHE_MODE_DISK = 3,
-} Cronet_EngineParams_HTTP_CACHE_MODE;
-
-typedef enum Cronet_UrlRequestParams_REQUEST_PRIORITY {
-  Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_IDLE = 0,
-  Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOWEST = 1,
-  Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOW = 2,
-  Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_MEDIUM = 3,
-  Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_HIGHEST = 4,
-} Cronet_UrlRequestParams_REQUEST_PRIORITY;
-
-typedef enum Cronet_UrlRequestParams_IDEMPOTENCY {
-  Cronet_UrlRequestParams_IDEMPOTENCY_DEFAULT_IDEMPOTENCY = 0,
-  Cronet_UrlRequestParams_IDEMPOTENCY_IDEMPOTENT = 1,
-  Cronet_UrlRequestParams_IDEMPOTENCY_NOT_IDEMPOTENT = 2,
-} Cronet_UrlRequestParams_IDEMPOTENCY;
-
-typedef enum Cronet_RequestFinishedInfo_FINISHED_REASON {
-  Cronet_RequestFinishedInfo_FINISHED_REASON_SUCCEEDED = 0,
-  Cronet_RequestFinishedInfo_FINISHED_REASON_FAILED = 1,
-  Cronet_RequestFinishedInfo_FINISHED_REASON_CANCELED = 2,
-} Cronet_RequestFinishedInfo_FINISHED_REASON;
-
-typedef enum Cronet_UrlRequestStatusListener_Status {
-  Cronet_UrlRequestStatusListener_Status_INVALID = -1,
-  Cronet_UrlRequestStatusListener_Status_IDLE = 0,
-  Cronet_UrlRequestStatusListener_Status_WAITING_FOR_STALLED_SOCKET_POOL = 1,
-  Cronet_UrlRequestStatusListener_Status_WAITING_FOR_AVAILABLE_SOCKET = 2,
-  Cronet_UrlRequestStatusListener_Status_WAITING_FOR_DELEGATE = 3,
-  Cronet_UrlRequestStatusListener_Status_WAITING_FOR_CACHE = 4,
-  Cronet_UrlRequestStatusListener_Status_DOWNLOADING_PAC_FILE = 5,
-  Cronet_UrlRequestStatusListener_Status_RESOLVING_PROXY_FOR_URL = 6,
-  Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST_IN_PAC_FILE = 7,
-  Cronet_UrlRequestStatusListener_Status_ESTABLISHING_PROXY_TUNNEL = 8,
-  Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST = 9,
-  Cronet_UrlRequestStatusListener_Status_CONNECTING = 10,
-  Cronet_UrlRequestStatusListener_Status_SSL_HANDSHAKE = 11,
-  Cronet_UrlRequestStatusListener_Status_SENDING_REQUEST = 12,
-  Cronet_UrlRequestStatusListener_Status_WAITING_FOR_RESPONSE = 13,
-  Cronet_UrlRequestStatusListener_Status_READING_RESPONSE = 14,
-} Cronet_UrlRequestStatusListener_Status;
-
-// Declare constants
-
-///////////////////////
-// Concrete interface Cronet_Buffer.
-
-// Create an instance of Cronet_Buffer.
-CRONET_EXPORT Cronet_BufferPtr Cronet_Buffer_Create(void);
-// Destroy an instance of Cronet_Buffer.
-CRONET_EXPORT void Cronet_Buffer_Destroy(Cronet_BufferPtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_Buffer_SetClientContext(
-    Cronet_BufferPtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_Buffer_GetClientContext(Cronet_BufferPtr self);
-// Concrete methods of Cronet_Buffer implemented by Cronet.
-// The app calls them to manipulate Cronet_Buffer.
-CRONET_EXPORT
-void Cronet_Buffer_InitWithDataAndCallback(Cronet_BufferPtr self,
-                                           Cronet_RawDataPtr data,
-                                           uint64_t size,
-                                           Cronet_BufferCallbackPtr callback);
-CRONET_EXPORT
-void Cronet_Buffer_InitWithAlloc(Cronet_BufferPtr self, uint64_t size);
-CRONET_EXPORT
-uint64_t Cronet_Buffer_GetSize(Cronet_BufferPtr self);
-CRONET_EXPORT
-Cronet_RawDataPtr Cronet_Buffer_GetData(Cronet_BufferPtr self);
-// Concrete interface Cronet_Buffer is implemented by Cronet.
-// The app can implement these for testing / mocking.
-typedef void (*Cronet_Buffer_InitWithDataAndCallbackFunc)(
-    Cronet_BufferPtr self,
-    Cronet_RawDataPtr data,
-    uint64_t size,
-    Cronet_BufferCallbackPtr callback);
-typedef void (*Cronet_Buffer_InitWithAllocFunc)(Cronet_BufferPtr self,
-                                                uint64_t size);
-typedef uint64_t (*Cronet_Buffer_GetSizeFunc)(Cronet_BufferPtr self);
-typedef Cronet_RawDataPtr (*Cronet_Buffer_GetDataFunc)(Cronet_BufferPtr self);
-// Concrete interface Cronet_Buffer is implemented by Cronet.
-// The app can use this for testing / mocking.
-CRONET_EXPORT Cronet_BufferPtr Cronet_Buffer_CreateWith(
-    Cronet_Buffer_InitWithDataAndCallbackFunc InitWithDataAndCallbackFunc,
-    Cronet_Buffer_InitWithAllocFunc InitWithAllocFunc,
-    Cronet_Buffer_GetSizeFunc GetSizeFunc,
-    Cronet_Buffer_GetDataFunc GetDataFunc);
-
-///////////////////////
-// Abstract interface Cronet_BufferCallback is implemented by the app.
-
-// There is no method to create a concrete implementation.
-
-// Destroy an instance of Cronet_BufferCallback.
-CRONET_EXPORT void Cronet_BufferCallback_Destroy(Cronet_BufferCallbackPtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_BufferCallback_SetClientContext(
-    Cronet_BufferCallbackPtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_BufferCallback_GetClientContext(Cronet_BufferCallbackPtr self);
-// Abstract interface Cronet_BufferCallback is implemented by the app.
-// The following concrete methods forward call to app implementation.
-// The app doesn't normally call them.
-CRONET_EXPORT
-void Cronet_BufferCallback_OnDestroy(Cronet_BufferCallbackPtr self,
-                                     Cronet_BufferPtr buffer);
-// The app implements abstract interface Cronet_BufferCallback by defining
-// custom functions for each method.
-typedef void (*Cronet_BufferCallback_OnDestroyFunc)(
-    Cronet_BufferCallbackPtr self,
-    Cronet_BufferPtr buffer);
-// The app creates an instance of Cronet_BufferCallback by providing custom
-// functions for each method.
-CRONET_EXPORT Cronet_BufferCallbackPtr Cronet_BufferCallback_CreateWith(
-    Cronet_BufferCallback_OnDestroyFunc OnDestroyFunc);
-
-///////////////////////
-// Abstract interface Cronet_Runnable is implemented by the app.
-
-// There is no method to create a concrete implementation.
-
-// Destroy an instance of Cronet_Runnable.
-CRONET_EXPORT void Cronet_Runnable_Destroy(Cronet_RunnablePtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_Runnable_SetClientContext(
-    Cronet_RunnablePtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_Runnable_GetClientContext(Cronet_RunnablePtr self);
-// Abstract interface Cronet_Runnable is implemented by the app.
-// The following concrete methods forward call to app implementation.
-// The app doesn't normally call them.
-CRONET_EXPORT
-void Cronet_Runnable_Run(Cronet_RunnablePtr self);
-// The app implements abstract interface Cronet_Runnable by defining custom
-// functions for each method.
-typedef void (*Cronet_Runnable_RunFunc)(Cronet_RunnablePtr self);
-// The app creates an instance of Cronet_Runnable by providing custom functions
-// for each method.
-CRONET_EXPORT Cronet_RunnablePtr
-Cronet_Runnable_CreateWith(Cronet_Runnable_RunFunc RunFunc);
-
-///////////////////////
-// Abstract interface Cronet_Executor is implemented by the app.
-
-// There is no method to create a concrete implementation.
-
-// Destroy an instance of Cronet_Executor.
-CRONET_EXPORT void Cronet_Executor_Destroy(Cronet_ExecutorPtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_Executor_SetClientContext(
-    Cronet_ExecutorPtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_Executor_GetClientContext(Cronet_ExecutorPtr self);
-// Abstract interface Cronet_Executor is implemented by the app.
-// The following concrete methods forward call to app implementation.
-// The app doesn't normally call them.
-CRONET_EXPORT
-void Cronet_Executor_Execute(Cronet_ExecutorPtr self,
-                             Cronet_RunnablePtr command);
-// The app implements abstract interface Cronet_Executor by defining custom
-// functions for each method.
-typedef void (*Cronet_Executor_ExecuteFunc)(Cronet_ExecutorPtr self,
-                                            Cronet_RunnablePtr command);
-// The app creates an instance of Cronet_Executor by providing custom functions
-// for each method.
-CRONET_EXPORT Cronet_ExecutorPtr
-Cronet_Executor_CreateWith(Cronet_Executor_ExecuteFunc ExecuteFunc);
-
-///////////////////////
-// Concrete interface Cronet_Engine.
-
-// Create an instance of Cronet_Engine.
-CRONET_EXPORT Cronet_EnginePtr Cronet_Engine_Create(void);
-// Destroy an instance of Cronet_Engine.
-CRONET_EXPORT void Cronet_Engine_Destroy(Cronet_EnginePtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_Engine_SetClientContext(
-    Cronet_EnginePtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_Engine_GetClientContext(Cronet_EnginePtr self);
-// Concrete methods of Cronet_Engine implemented by Cronet.
-// The app calls them to manipulate Cronet_Engine.
-CRONET_EXPORT
-Cronet_RESULT Cronet_Engine_StartWithParams(Cronet_EnginePtr self,
-                                            Cronet_EngineParamsPtr params);
-CRONET_EXPORT
-bool Cronet_Engine_StartNetLogToFile(Cronet_EnginePtr self,
-                                     Cronet_String file_name,
-                                     bool log_all);
-CRONET_EXPORT
-void Cronet_Engine_StopNetLog(Cronet_EnginePtr self);
-CRONET_EXPORT
-Cronet_RESULT Cronet_Engine_Shutdown(Cronet_EnginePtr self);
-CRONET_EXPORT
-Cronet_String Cronet_Engine_GetVersionString(Cronet_EnginePtr self);
-CRONET_EXPORT
-Cronet_String Cronet_Engine_GetDefaultUserAgent(Cronet_EnginePtr self);
-CRONET_EXPORT
-void Cronet_Engine_AddRequestFinishedListener(
-    Cronet_EnginePtr self,
-    Cronet_RequestFinishedInfoListenerPtr listener,
-    Cronet_ExecutorPtr executor);
-CRONET_EXPORT
-void Cronet_Engine_RemoveRequestFinishedListener(
-    Cronet_EnginePtr self,
-    Cronet_RequestFinishedInfoListenerPtr listener);
-// Concrete interface Cronet_Engine is implemented by Cronet.
-// The app can implement these for testing / mocking.
-typedef Cronet_RESULT (*Cronet_Engine_StartWithParamsFunc)(
-    Cronet_EnginePtr self,
-    Cronet_EngineParamsPtr params);
-typedef bool (*Cronet_Engine_StartNetLogToFileFunc)(Cronet_EnginePtr self,
-                                                    Cronet_String file_name,
-                                                    bool log_all);
-typedef void (*Cronet_Engine_StopNetLogFunc)(Cronet_EnginePtr self);
-typedef Cronet_RESULT (*Cronet_Engine_ShutdownFunc)(Cronet_EnginePtr self);
-typedef Cronet_String (*Cronet_Engine_GetVersionStringFunc)(
-    Cronet_EnginePtr self);
-typedef Cronet_String (*Cronet_Engine_GetDefaultUserAgentFunc)(
-    Cronet_EnginePtr self);
-typedef void (*Cronet_Engine_AddRequestFinishedListenerFunc)(
-    Cronet_EnginePtr self,
-    Cronet_RequestFinishedInfoListenerPtr listener,
-    Cronet_ExecutorPtr executor);
-typedef void (*Cronet_Engine_RemoveRequestFinishedListenerFunc)(
-    Cronet_EnginePtr self,
-    Cronet_RequestFinishedInfoListenerPtr listener);
-// Concrete interface Cronet_Engine is implemented by Cronet.
-// The app can use this for testing / mocking.
-CRONET_EXPORT Cronet_EnginePtr Cronet_Engine_CreateWith(
-    Cronet_Engine_StartWithParamsFunc StartWithParamsFunc,
-    Cronet_Engine_StartNetLogToFileFunc StartNetLogToFileFunc,
-    Cronet_Engine_StopNetLogFunc StopNetLogFunc,
-    Cronet_Engine_ShutdownFunc ShutdownFunc,
-    Cronet_Engine_GetVersionStringFunc GetVersionStringFunc,
-    Cronet_Engine_GetDefaultUserAgentFunc GetDefaultUserAgentFunc,
-    Cronet_Engine_AddRequestFinishedListenerFunc AddRequestFinishedListenerFunc,
-    Cronet_Engine_RemoveRequestFinishedListenerFunc
-        RemoveRequestFinishedListenerFunc);
-
-///////////////////////
-// Abstract interface Cronet_UrlRequestStatusListener is implemented by the app.
-
-// There is no method to create a concrete implementation.
-
-// Destroy an instance of Cronet_UrlRequestStatusListener.
-CRONET_EXPORT void Cronet_UrlRequestStatusListener_Destroy(
-    Cronet_UrlRequestStatusListenerPtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_UrlRequestStatusListener_SetClientContext(
-    Cronet_UrlRequestStatusListenerPtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_UrlRequestStatusListener_GetClientContext(
-    Cronet_UrlRequestStatusListenerPtr self);
-// Abstract interface Cronet_UrlRequestStatusListener is implemented by the app.
-// The following concrete methods forward call to app implementation.
-// The app doesn't normally call them.
-CRONET_EXPORT
-void Cronet_UrlRequestStatusListener_OnStatus(
-    Cronet_UrlRequestStatusListenerPtr self,
-    Cronet_UrlRequestStatusListener_Status status);
-// The app implements abstract interface Cronet_UrlRequestStatusListener by
-// defining custom functions for each method.
-typedef void (*Cronet_UrlRequestStatusListener_OnStatusFunc)(
-    Cronet_UrlRequestStatusListenerPtr self,
-    Cronet_UrlRequestStatusListener_Status status);
-// The app creates an instance of Cronet_UrlRequestStatusListener by providing
-// custom functions for each method.
-CRONET_EXPORT Cronet_UrlRequestStatusListenerPtr
-Cronet_UrlRequestStatusListener_CreateWith(
-    Cronet_UrlRequestStatusListener_OnStatusFunc OnStatusFunc);
-
-///////////////////////
-// Abstract interface Cronet_UrlRequestCallback is implemented by the app.
-
-// There is no method to create a concrete implementation.
-
-// Destroy an instance of Cronet_UrlRequestCallback.
-CRONET_EXPORT void Cronet_UrlRequestCallback_Destroy(
-    Cronet_UrlRequestCallbackPtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_UrlRequestCallback_SetClientContext(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_UrlRequestCallback_GetClientContext(Cronet_UrlRequestCallbackPtr self);
-// Abstract interface Cronet_UrlRequestCallback is implemented by the app.
-// The following concrete methods forward call to app implementation.
-// The app doesn't normally call them.
-CRONET_EXPORT
-void Cronet_UrlRequestCallback_OnRedirectReceived(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_String new_location_url);
-CRONET_EXPORT
-void Cronet_UrlRequestCallback_OnResponseStarted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info);
-CRONET_EXPORT
-void Cronet_UrlRequestCallback_OnReadCompleted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_BufferPtr buffer,
-    uint64_t bytes_read);
-CRONET_EXPORT
-void Cronet_UrlRequestCallback_OnSucceeded(Cronet_UrlRequestCallbackPtr self,
-                                           Cronet_UrlRequestPtr request,
-                                           Cronet_UrlResponseInfoPtr info);
-CRONET_EXPORT
-void Cronet_UrlRequestCallback_OnFailed(Cronet_UrlRequestCallbackPtr self,
-                                        Cronet_UrlRequestPtr request,
-                                        Cronet_UrlResponseInfoPtr info,
-                                        Cronet_ErrorPtr error);
-CRONET_EXPORT
-void Cronet_UrlRequestCallback_OnCanceled(Cronet_UrlRequestCallbackPtr self,
-                                          Cronet_UrlRequestPtr request,
-                                          Cronet_UrlResponseInfoPtr info);
-// The app implements abstract interface Cronet_UrlRequestCallback by defining
-// custom functions for each method.
-typedef void (*Cronet_UrlRequestCallback_OnRedirectReceivedFunc)(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_String new_location_url);
-typedef void (*Cronet_UrlRequestCallback_OnResponseStartedFunc)(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info);
-typedef void (*Cronet_UrlRequestCallback_OnReadCompletedFunc)(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_BufferPtr buffer,
-    uint64_t bytes_read);
-typedef void (*Cronet_UrlRequestCallback_OnSucceededFunc)(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info);
-typedef void (*Cronet_UrlRequestCallback_OnFailedFunc)(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_ErrorPtr error);
-typedef void (*Cronet_UrlRequestCallback_OnCanceledFunc)(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info);
-// The app creates an instance of Cronet_UrlRequestCallback by providing custom
-// functions for each method.
-CRONET_EXPORT Cronet_UrlRequestCallbackPtr Cronet_UrlRequestCallback_CreateWith(
-    Cronet_UrlRequestCallback_OnRedirectReceivedFunc OnRedirectReceivedFunc,
-    Cronet_UrlRequestCallback_OnResponseStartedFunc OnResponseStartedFunc,
-    Cronet_UrlRequestCallback_OnReadCompletedFunc OnReadCompletedFunc,
-    Cronet_UrlRequestCallback_OnSucceededFunc OnSucceededFunc,
-    Cronet_UrlRequestCallback_OnFailedFunc OnFailedFunc,
-    Cronet_UrlRequestCallback_OnCanceledFunc OnCanceledFunc);
-
-///////////////////////
-// Concrete interface Cronet_UploadDataSink.
-
-// Create an instance of Cronet_UploadDataSink.
-CRONET_EXPORT Cronet_UploadDataSinkPtr Cronet_UploadDataSink_Create(void);
-// Destroy an instance of Cronet_UploadDataSink.
-CRONET_EXPORT void Cronet_UploadDataSink_Destroy(Cronet_UploadDataSinkPtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_UploadDataSink_SetClientContext(
-    Cronet_UploadDataSinkPtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_UploadDataSink_GetClientContext(Cronet_UploadDataSinkPtr self);
-// Concrete methods of Cronet_UploadDataSink implemented by Cronet.
-// The app calls them to manipulate Cronet_UploadDataSink.
-CRONET_EXPORT
-void Cronet_UploadDataSink_OnReadSucceeded(Cronet_UploadDataSinkPtr self,
-                                           uint64_t bytes_read,
-                                           bool final_chunk);
-CRONET_EXPORT
-void Cronet_UploadDataSink_OnReadError(Cronet_UploadDataSinkPtr self,
-                                       Cronet_String error_message);
-CRONET_EXPORT
-void Cronet_UploadDataSink_OnRewindSucceeded(Cronet_UploadDataSinkPtr self);
-CRONET_EXPORT
-void Cronet_UploadDataSink_OnRewindError(Cronet_UploadDataSinkPtr self,
-                                         Cronet_String error_message);
-// Concrete interface Cronet_UploadDataSink is implemented by Cronet.
-// The app can implement these for testing / mocking.
-typedef void (*Cronet_UploadDataSink_OnReadSucceededFunc)(
-    Cronet_UploadDataSinkPtr self,
-    uint64_t bytes_read,
-    bool final_chunk);
-typedef void (*Cronet_UploadDataSink_OnReadErrorFunc)(
-    Cronet_UploadDataSinkPtr self,
-    Cronet_String error_message);
-typedef void (*Cronet_UploadDataSink_OnRewindSucceededFunc)(
-    Cronet_UploadDataSinkPtr self);
-typedef void (*Cronet_UploadDataSink_OnRewindErrorFunc)(
-    Cronet_UploadDataSinkPtr self,
-    Cronet_String error_message);
-// Concrete interface Cronet_UploadDataSink is implemented by Cronet.
-// The app can use this for testing / mocking.
-CRONET_EXPORT Cronet_UploadDataSinkPtr Cronet_UploadDataSink_CreateWith(
-    Cronet_UploadDataSink_OnReadSucceededFunc OnReadSucceededFunc,
-    Cronet_UploadDataSink_OnReadErrorFunc OnReadErrorFunc,
-    Cronet_UploadDataSink_OnRewindSucceededFunc OnRewindSucceededFunc,
-    Cronet_UploadDataSink_OnRewindErrorFunc OnRewindErrorFunc);
-
-///////////////////////
-// Abstract interface Cronet_UploadDataProvider is implemented by the app.
-
-// There is no method to create a concrete implementation.
-
-// Destroy an instance of Cronet_UploadDataProvider.
-CRONET_EXPORT void Cronet_UploadDataProvider_Destroy(
-    Cronet_UploadDataProviderPtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_UploadDataProvider_SetClientContext(
-    Cronet_UploadDataProviderPtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_UploadDataProvider_GetClientContext(Cronet_UploadDataProviderPtr self);
-// Abstract interface Cronet_UploadDataProvider is implemented by the app.
-// The following concrete methods forward call to app implementation.
-// The app doesn't normally call them.
-CRONET_EXPORT
-int64_t Cronet_UploadDataProvider_GetLength(Cronet_UploadDataProviderPtr self);
-CRONET_EXPORT
-void Cronet_UploadDataProvider_Read(Cronet_UploadDataProviderPtr self,
-                                    Cronet_UploadDataSinkPtr upload_data_sink,
-                                    Cronet_BufferPtr buffer);
-CRONET_EXPORT
-void Cronet_UploadDataProvider_Rewind(
-    Cronet_UploadDataProviderPtr self,
-    Cronet_UploadDataSinkPtr upload_data_sink);
-CRONET_EXPORT
-void Cronet_UploadDataProvider_Close(Cronet_UploadDataProviderPtr self);
-// The app implements abstract interface Cronet_UploadDataProvider by defining
-// custom functions for each method.
-typedef int64_t (*Cronet_UploadDataProvider_GetLengthFunc)(
-    Cronet_UploadDataProviderPtr self);
-typedef void (*Cronet_UploadDataProvider_ReadFunc)(
-    Cronet_UploadDataProviderPtr self,
-    Cronet_UploadDataSinkPtr upload_data_sink,
-    Cronet_BufferPtr buffer);
-typedef void (*Cronet_UploadDataProvider_RewindFunc)(
-    Cronet_UploadDataProviderPtr self,
-    Cronet_UploadDataSinkPtr upload_data_sink);
-typedef void (*Cronet_UploadDataProvider_CloseFunc)(
-    Cronet_UploadDataProviderPtr self);
-// The app creates an instance of Cronet_UploadDataProvider by providing custom
-// functions for each method.
-CRONET_EXPORT Cronet_UploadDataProviderPtr Cronet_UploadDataProvider_CreateWith(
-    Cronet_UploadDataProvider_GetLengthFunc GetLengthFunc,
-    Cronet_UploadDataProvider_ReadFunc ReadFunc,
-    Cronet_UploadDataProvider_RewindFunc RewindFunc,
-    Cronet_UploadDataProvider_CloseFunc CloseFunc);
-
-///////////////////////
-// Concrete interface Cronet_UrlRequest.
-
-// Create an instance of Cronet_UrlRequest.
-CRONET_EXPORT Cronet_UrlRequestPtr Cronet_UrlRequest_Create(void);
-// Destroy an instance of Cronet_UrlRequest.
-CRONET_EXPORT void Cronet_UrlRequest_Destroy(Cronet_UrlRequestPtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_UrlRequest_SetClientContext(
-    Cronet_UrlRequestPtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_UrlRequest_GetClientContext(Cronet_UrlRequestPtr self);
-// Concrete methods of Cronet_UrlRequest implemented by Cronet.
-// The app calls them to manipulate Cronet_UrlRequest.
-CRONET_EXPORT
-Cronet_RESULT Cronet_UrlRequest_InitWithParams(
-    Cronet_UrlRequestPtr self,
-    Cronet_EnginePtr engine,
-    Cronet_String url,
-    Cronet_UrlRequestParamsPtr params,
-    Cronet_UrlRequestCallbackPtr callback,
-    Cronet_ExecutorPtr executor);
-CRONET_EXPORT
-Cronet_RESULT Cronet_UrlRequest_Start(Cronet_UrlRequestPtr self);
-CRONET_EXPORT
-Cronet_RESULT Cronet_UrlRequest_FollowRedirect(Cronet_UrlRequestPtr self);
-CRONET_EXPORT
-Cronet_RESULT Cronet_UrlRequest_Read(Cronet_UrlRequestPtr self,
-                                     Cronet_BufferPtr buffer);
-CRONET_EXPORT
-void Cronet_UrlRequest_Cancel(Cronet_UrlRequestPtr self);
-CRONET_EXPORT
-bool Cronet_UrlRequest_IsDone(Cronet_UrlRequestPtr self);
-CRONET_EXPORT
-void Cronet_UrlRequest_GetStatus(Cronet_UrlRequestPtr self,
-                                 Cronet_UrlRequestStatusListenerPtr listener);
-// Concrete interface Cronet_UrlRequest is implemented by Cronet.
-// The app can implement these for testing / mocking.
-typedef Cronet_RESULT (*Cronet_UrlRequest_InitWithParamsFunc)(
-    Cronet_UrlRequestPtr self,
-    Cronet_EnginePtr engine,
-    Cronet_String url,
-    Cronet_UrlRequestParamsPtr params,
-    Cronet_UrlRequestCallbackPtr callback,
-    Cronet_ExecutorPtr executor);
-typedef Cronet_RESULT (*Cronet_UrlRequest_StartFunc)(Cronet_UrlRequestPtr self);
-typedef Cronet_RESULT (*Cronet_UrlRequest_FollowRedirectFunc)(
-    Cronet_UrlRequestPtr self);
-typedef Cronet_RESULT (*Cronet_UrlRequest_ReadFunc)(Cronet_UrlRequestPtr self,
-                                                    Cronet_BufferPtr buffer);
-typedef void (*Cronet_UrlRequest_CancelFunc)(Cronet_UrlRequestPtr self);
-typedef bool (*Cronet_UrlRequest_IsDoneFunc)(Cronet_UrlRequestPtr self);
-typedef void (*Cronet_UrlRequest_GetStatusFunc)(
-    Cronet_UrlRequestPtr self,
-    Cronet_UrlRequestStatusListenerPtr listener);
-// Concrete interface Cronet_UrlRequest is implemented by Cronet.
-// The app can use this for testing / mocking.
-CRONET_EXPORT Cronet_UrlRequestPtr Cronet_UrlRequest_CreateWith(
-    Cronet_UrlRequest_InitWithParamsFunc InitWithParamsFunc,
-    Cronet_UrlRequest_StartFunc StartFunc,
-    Cronet_UrlRequest_FollowRedirectFunc FollowRedirectFunc,
-    Cronet_UrlRequest_ReadFunc ReadFunc,
-    Cronet_UrlRequest_CancelFunc CancelFunc,
-    Cronet_UrlRequest_IsDoneFunc IsDoneFunc,
-    Cronet_UrlRequest_GetStatusFunc GetStatusFunc);
-
-///////////////////////
-// Abstract interface Cronet_RequestFinishedInfoListener is implemented by the
-// app.
-
-// There is no method to create a concrete implementation.
-
-// Destroy an instance of Cronet_RequestFinishedInfoListener.
-CRONET_EXPORT void Cronet_RequestFinishedInfoListener_Destroy(
-    Cronet_RequestFinishedInfoListenerPtr self);
-// Set and get app-specific Cronet_ClientContext.
-CRONET_EXPORT void Cronet_RequestFinishedInfoListener_SetClientContext(
-    Cronet_RequestFinishedInfoListenerPtr self,
-    Cronet_ClientContext client_context);
-CRONET_EXPORT Cronet_ClientContext
-Cronet_RequestFinishedInfoListener_GetClientContext(
-    Cronet_RequestFinishedInfoListenerPtr self);
-// Abstract interface Cronet_RequestFinishedInfoListener is implemented by the
-// app. The following concrete methods forward call to app implementation. The
-// app doesn't normally call them.
-CRONET_EXPORT
-void Cronet_RequestFinishedInfoListener_OnRequestFinished(
-    Cronet_RequestFinishedInfoListenerPtr self,
-    Cronet_RequestFinishedInfoPtr request_info,
-    Cronet_UrlResponseInfoPtr response_info,
-    Cronet_ErrorPtr error);
-// The app implements abstract interface Cronet_RequestFinishedInfoListener by
-// defining custom functions for each method.
-typedef void (*Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc)(
-    Cronet_RequestFinishedInfoListenerPtr self,
-    Cronet_RequestFinishedInfoPtr request_info,
-    Cronet_UrlResponseInfoPtr response_info,
-    Cronet_ErrorPtr error);
-// The app creates an instance of Cronet_RequestFinishedInfoListener by
-// providing custom functions for each method.
-CRONET_EXPORT Cronet_RequestFinishedInfoListenerPtr
-Cronet_RequestFinishedInfoListener_CreateWith(
-    Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc
-        OnRequestFinishedFunc);
-
-///////////////////////
-// Struct Cronet_Error.
-CRONET_EXPORT Cronet_ErrorPtr Cronet_Error_Create(void);
-CRONET_EXPORT void Cronet_Error_Destroy(Cronet_ErrorPtr self);
-// Cronet_Error setters.
-CRONET_EXPORT
-void Cronet_Error_error_code_set(Cronet_ErrorPtr self,
-                                 const Cronet_Error_ERROR_CODE error_code);
-CRONET_EXPORT
-void Cronet_Error_message_set(Cronet_ErrorPtr self,
-                              const Cronet_String message);
-CRONET_EXPORT
-void Cronet_Error_internal_error_code_set(Cronet_ErrorPtr self,
-                                          const int32_t internal_error_code);
-CRONET_EXPORT
-void Cronet_Error_immediately_retryable_set(Cronet_ErrorPtr self,
-                                            const bool immediately_retryable);
-CRONET_EXPORT
-void Cronet_Error_quic_detailed_error_code_set(
-    Cronet_ErrorPtr self,
-    const int32_t quic_detailed_error_code);
-// Cronet_Error getters.
-CRONET_EXPORT
-Cronet_Error_ERROR_CODE Cronet_Error_error_code_get(const Cronet_ErrorPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_Error_message_get(const Cronet_ErrorPtr self);
-CRONET_EXPORT
-int32_t Cronet_Error_internal_error_code_get(const Cronet_ErrorPtr self);
-CRONET_EXPORT
-bool Cronet_Error_immediately_retryable_get(const Cronet_ErrorPtr self);
-CRONET_EXPORT
-int32_t Cronet_Error_quic_detailed_error_code_get(const Cronet_ErrorPtr self);
-
-///////////////////////
-// Struct Cronet_QuicHint.
-CRONET_EXPORT Cronet_QuicHintPtr Cronet_QuicHint_Create(void);
-CRONET_EXPORT void Cronet_QuicHint_Destroy(Cronet_QuicHintPtr self);
-// Cronet_QuicHint setters.
-CRONET_EXPORT
-void Cronet_QuicHint_host_set(Cronet_QuicHintPtr self,
-                              const Cronet_String host);
-CRONET_EXPORT
-void Cronet_QuicHint_port_set(Cronet_QuicHintPtr self, const int32_t port);
-CRONET_EXPORT
-void Cronet_QuicHint_alternate_port_set(Cronet_QuicHintPtr self,
-                                        const int32_t alternate_port);
-// Cronet_QuicHint getters.
-CRONET_EXPORT
-Cronet_String Cronet_QuicHint_host_get(const Cronet_QuicHintPtr self);
-CRONET_EXPORT
-int32_t Cronet_QuicHint_port_get(const Cronet_QuicHintPtr self);
-CRONET_EXPORT
-int32_t Cronet_QuicHint_alternate_port_get(const Cronet_QuicHintPtr self);
-
-///////////////////////
-// Struct Cronet_PublicKeyPins.
-CRONET_EXPORT Cronet_PublicKeyPinsPtr Cronet_PublicKeyPins_Create(void);
-CRONET_EXPORT void Cronet_PublicKeyPins_Destroy(Cronet_PublicKeyPinsPtr self);
-// Cronet_PublicKeyPins setters.
-CRONET_EXPORT
-void Cronet_PublicKeyPins_host_set(Cronet_PublicKeyPinsPtr self,
-                                   const Cronet_String host);
-CRONET_EXPORT
-void Cronet_PublicKeyPins_pins_sha256_add(Cronet_PublicKeyPinsPtr self,
-                                          const Cronet_String element);
-CRONET_EXPORT
-void Cronet_PublicKeyPins_include_subdomains_set(Cronet_PublicKeyPinsPtr self,
-                                                 const bool include_subdomains);
-CRONET_EXPORT
-void Cronet_PublicKeyPins_expiration_date_set(Cronet_PublicKeyPinsPtr self,
-                                              const int64_t expiration_date);
-// Cronet_PublicKeyPins getters.
-CRONET_EXPORT
-Cronet_String Cronet_PublicKeyPins_host_get(const Cronet_PublicKeyPinsPtr self);
-CRONET_EXPORT
-uint32_t Cronet_PublicKeyPins_pins_sha256_size(
-    const Cronet_PublicKeyPinsPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_PublicKeyPins_pins_sha256_at(
-    const Cronet_PublicKeyPinsPtr self,
-    uint32_t index);
-CRONET_EXPORT
-void Cronet_PublicKeyPins_pins_sha256_clear(Cronet_PublicKeyPinsPtr self);
-CRONET_EXPORT
-bool Cronet_PublicKeyPins_include_subdomains_get(
-    const Cronet_PublicKeyPinsPtr self);
-CRONET_EXPORT
-int64_t Cronet_PublicKeyPins_expiration_date_get(
-    const Cronet_PublicKeyPinsPtr self);
-
-///////////////////////
-// Struct Cronet_EngineParams.
-CRONET_EXPORT Cronet_EngineParamsPtr Cronet_EngineParams_Create(void);
-CRONET_EXPORT void Cronet_EngineParams_Destroy(Cronet_EngineParamsPtr self);
-// Cronet_EngineParams setters.
-CRONET_EXPORT
-void Cronet_EngineParams_enable_check_result_set(
-    Cronet_EngineParamsPtr self,
-    const bool enable_check_result);
-CRONET_EXPORT
-void Cronet_EngineParams_user_agent_set(Cronet_EngineParamsPtr self,
-                                        const Cronet_String user_agent);
-CRONET_EXPORT
-void Cronet_EngineParams_accept_language_set(
-    Cronet_EngineParamsPtr self,
-    const Cronet_String accept_language);
-CRONET_EXPORT
-void Cronet_EngineParams_storage_path_set(Cronet_EngineParamsPtr self,
-                                          const Cronet_String storage_path);
-CRONET_EXPORT
-void Cronet_EngineParams_enable_quic_set(Cronet_EngineParamsPtr self,
-                                         const bool enable_quic);
-CRONET_EXPORT
-void Cronet_EngineParams_enable_http2_set(Cronet_EngineParamsPtr self,
-                                          const bool enable_http2);
-CRONET_EXPORT
-void Cronet_EngineParams_enable_brotli_set(Cronet_EngineParamsPtr self,
-                                           const bool enable_brotli);
-CRONET_EXPORT
-void Cronet_EngineParams_http_cache_mode_set(
-    Cronet_EngineParamsPtr self,
-    const Cronet_EngineParams_HTTP_CACHE_MODE http_cache_mode);
-CRONET_EXPORT
-void Cronet_EngineParams_http_cache_max_size_set(
-    Cronet_EngineParamsPtr self,
-    const int64_t http_cache_max_size);
-CRONET_EXPORT
-void Cronet_EngineParams_quic_hints_add(Cronet_EngineParamsPtr self,
-                                        const Cronet_QuicHintPtr element);
-CRONET_EXPORT
-void Cronet_EngineParams_public_key_pins_add(
-    Cronet_EngineParamsPtr self,
-    const Cronet_PublicKeyPinsPtr element);
-CRONET_EXPORT
-void Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set(
-    Cronet_EngineParamsPtr self,
-    const bool enable_public_key_pinning_bypass_for_local_trust_anchors);
-CRONET_EXPORT
-void Cronet_EngineParams_network_thread_priority_set(
-    Cronet_EngineParamsPtr self,
-    const double network_thread_priority);
-CRONET_EXPORT
-void Cronet_EngineParams_experimental_options_set(
-    Cronet_EngineParamsPtr self,
-    const Cronet_String experimental_options);
-// Cronet_EngineParams getters.
-CRONET_EXPORT
-bool Cronet_EngineParams_enable_check_result_get(
-    const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_EngineParams_user_agent_get(
-    const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_EngineParams_accept_language_get(
-    const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_EngineParams_storage_path_get(
-    const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-bool Cronet_EngineParams_enable_quic_get(const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-bool Cronet_EngineParams_enable_http2_get(const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-bool Cronet_EngineParams_enable_brotli_get(const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-Cronet_EngineParams_HTTP_CACHE_MODE Cronet_EngineParams_http_cache_mode_get(
-    const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-int64_t Cronet_EngineParams_http_cache_max_size_get(
-    const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-uint32_t Cronet_EngineParams_quic_hints_size(const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-Cronet_QuicHintPtr Cronet_EngineParams_quic_hints_at(
-    const Cronet_EngineParamsPtr self,
-    uint32_t index);
-CRONET_EXPORT
-void Cronet_EngineParams_quic_hints_clear(Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-uint32_t Cronet_EngineParams_public_key_pins_size(
-    const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-Cronet_PublicKeyPinsPtr Cronet_EngineParams_public_key_pins_at(
-    const Cronet_EngineParamsPtr self,
-    uint32_t index);
-CRONET_EXPORT
-void Cronet_EngineParams_public_key_pins_clear(Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-bool Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get(
-    const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-double Cronet_EngineParams_network_thread_priority_get(
-    const Cronet_EngineParamsPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_EngineParams_experimental_options_get(
-    const Cronet_EngineParamsPtr self);
-
-///////////////////////
-// Struct Cronet_HttpHeader.
-CRONET_EXPORT Cronet_HttpHeaderPtr Cronet_HttpHeader_Create(void);
-CRONET_EXPORT void Cronet_HttpHeader_Destroy(Cronet_HttpHeaderPtr self);
-// Cronet_HttpHeader setters.
-CRONET_EXPORT
-void Cronet_HttpHeader_name_set(Cronet_HttpHeaderPtr self,
-                                const Cronet_String name);
-CRONET_EXPORT
-void Cronet_HttpHeader_value_set(Cronet_HttpHeaderPtr self,
-                                 const Cronet_String value);
-// Cronet_HttpHeader getters.
-CRONET_EXPORT
-Cronet_String Cronet_HttpHeader_name_get(const Cronet_HttpHeaderPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_HttpHeader_value_get(const Cronet_HttpHeaderPtr self);
-
-///////////////////////
-// Struct Cronet_UrlResponseInfo.
-CRONET_EXPORT Cronet_UrlResponseInfoPtr Cronet_UrlResponseInfo_Create(void);
-CRONET_EXPORT void Cronet_UrlResponseInfo_Destroy(
-    Cronet_UrlResponseInfoPtr self);
-// Cronet_UrlResponseInfo setters.
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_url_set(Cronet_UrlResponseInfoPtr self,
-                                    const Cronet_String url);
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_url_chain_add(Cronet_UrlResponseInfoPtr self,
-                                          const Cronet_String element);
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_http_status_code_set(
-    Cronet_UrlResponseInfoPtr self,
-    const int32_t http_status_code);
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_http_status_text_set(
-    Cronet_UrlResponseInfoPtr self,
-    const Cronet_String http_status_text);
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_all_headers_list_add(
-    Cronet_UrlResponseInfoPtr self,
-    const Cronet_HttpHeaderPtr element);
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_was_cached_set(Cronet_UrlResponseInfoPtr self,
-                                           const bool was_cached);
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_negotiated_protocol_set(
-    Cronet_UrlResponseInfoPtr self,
-    const Cronet_String negotiated_protocol);
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_proxy_server_set(Cronet_UrlResponseInfoPtr self,
-                                             const Cronet_String proxy_server);
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_received_byte_count_set(
-    Cronet_UrlResponseInfoPtr self,
-    const int64_t received_byte_count);
-// Cronet_UrlResponseInfo getters.
-CRONET_EXPORT
-Cronet_String Cronet_UrlResponseInfo_url_get(
-    const Cronet_UrlResponseInfoPtr self);
-CRONET_EXPORT
-uint32_t Cronet_UrlResponseInfo_url_chain_size(
-    const Cronet_UrlResponseInfoPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_UrlResponseInfo_url_chain_at(
-    const Cronet_UrlResponseInfoPtr self,
-    uint32_t index);
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_url_chain_clear(Cronet_UrlResponseInfoPtr self);
-CRONET_EXPORT
-int32_t Cronet_UrlResponseInfo_http_status_code_get(
-    const Cronet_UrlResponseInfoPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_UrlResponseInfo_http_status_text_get(
-    const Cronet_UrlResponseInfoPtr self);
-CRONET_EXPORT
-uint32_t Cronet_UrlResponseInfo_all_headers_list_size(
-    const Cronet_UrlResponseInfoPtr self);
-CRONET_EXPORT
-Cronet_HttpHeaderPtr Cronet_UrlResponseInfo_all_headers_list_at(
-    const Cronet_UrlResponseInfoPtr self,
-    uint32_t index);
-CRONET_EXPORT
-void Cronet_UrlResponseInfo_all_headers_list_clear(
-    Cronet_UrlResponseInfoPtr self);
-CRONET_EXPORT
-bool Cronet_UrlResponseInfo_was_cached_get(
-    const Cronet_UrlResponseInfoPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_UrlResponseInfo_negotiated_protocol_get(
-    const Cronet_UrlResponseInfoPtr self);
-CRONET_EXPORT
-Cronet_String Cronet_UrlResponseInfo_proxy_server_get(
-    const Cronet_UrlResponseInfoPtr self);
-CRONET_EXPORT
-int64_t Cronet_UrlResponseInfo_received_byte_count_get(
-    const Cronet_UrlResponseInfoPtr self);
-
-///////////////////////
-// Struct Cronet_UrlRequestParams.
-CRONET_EXPORT Cronet_UrlRequestParamsPtr Cronet_UrlRequestParams_Create(void);
-CRONET_EXPORT void Cronet_UrlRequestParams_Destroy(
-    Cronet_UrlRequestParamsPtr self);
-// Cronet_UrlRequestParams setters.
-CRONET_EXPORT
-void Cronet_UrlRequestParams_http_method_set(Cronet_UrlRequestParamsPtr self,
-                                             const Cronet_String http_method);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_request_headers_add(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_HttpHeaderPtr element);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_disable_cache_set(Cronet_UrlRequestParamsPtr self,
-                                               const bool disable_cache);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_priority_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_UrlRequestParams_REQUEST_PRIORITY priority);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_upload_data_provider_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_UploadDataProviderPtr upload_data_provider);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_upload_data_provider_executor_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_ExecutorPtr upload_data_provider_executor);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_allow_direct_executor_set(
-    Cronet_UrlRequestParamsPtr self,
-    const bool allow_direct_executor);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_annotations_add(Cronet_UrlRequestParamsPtr self,
-                                             const Cronet_RawDataPtr element);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_request_finished_listener_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_RequestFinishedInfoListenerPtr request_finished_listener);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_request_finished_executor_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_ExecutorPtr request_finished_executor);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_idempotency_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_UrlRequestParams_IDEMPOTENCY idempotency);
-// Cronet_UrlRequestParams getters.
-CRONET_EXPORT
-Cronet_String Cronet_UrlRequestParams_http_method_get(
-    const Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-uint32_t Cronet_UrlRequestParams_request_headers_size(
-    const Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-Cronet_HttpHeaderPtr Cronet_UrlRequestParams_request_headers_at(
-    const Cronet_UrlRequestParamsPtr self,
-    uint32_t index);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_request_headers_clear(
-    Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-bool Cronet_UrlRequestParams_disable_cache_get(
-    const Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-Cronet_UrlRequestParams_REQUEST_PRIORITY Cronet_UrlRequestParams_priority_get(
-    const Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-Cronet_UploadDataProviderPtr Cronet_UrlRequestParams_upload_data_provider_get(
-    const Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-Cronet_ExecutorPtr Cronet_UrlRequestParams_upload_data_provider_executor_get(
-    const Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-bool Cronet_UrlRequestParams_allow_direct_executor_get(
-    const Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-uint32_t Cronet_UrlRequestParams_annotations_size(
-    const Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-Cronet_RawDataPtr Cronet_UrlRequestParams_annotations_at(
-    const Cronet_UrlRequestParamsPtr self,
-    uint32_t index);
-CRONET_EXPORT
-void Cronet_UrlRequestParams_annotations_clear(Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-Cronet_RequestFinishedInfoListenerPtr
-Cronet_UrlRequestParams_request_finished_listener_get(
-    const Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-Cronet_ExecutorPtr Cronet_UrlRequestParams_request_finished_executor_get(
-    const Cronet_UrlRequestParamsPtr self);
-CRONET_EXPORT
-Cronet_UrlRequestParams_IDEMPOTENCY Cronet_UrlRequestParams_idempotency_get(
-    const Cronet_UrlRequestParamsPtr self);
-
-///////////////////////
-// Struct Cronet_DateTime.
-CRONET_EXPORT Cronet_DateTimePtr Cronet_DateTime_Create(void);
-CRONET_EXPORT void Cronet_DateTime_Destroy(Cronet_DateTimePtr self);
-// Cronet_DateTime setters.
-CRONET_EXPORT
-void Cronet_DateTime_value_set(Cronet_DateTimePtr self, const int64_t value);
-// Cronet_DateTime getters.
-CRONET_EXPORT
-int64_t Cronet_DateTime_value_get(const Cronet_DateTimePtr self);
-
-///////////////////////
-// Struct Cronet_Metrics.
-CRONET_EXPORT Cronet_MetricsPtr Cronet_Metrics_Create(void);
-CRONET_EXPORT void Cronet_Metrics_Destroy(Cronet_MetricsPtr self);
-// Cronet_Metrics setters.
-CRONET_EXPORT
-void Cronet_Metrics_request_start_set(Cronet_MetricsPtr self,
-                                      const Cronet_DateTimePtr request_start);
-// Move data from |request_start|. The caller retains ownership of
-// |request_start| and must destroy it.
-void Cronet_Metrics_request_start_move(Cronet_MetricsPtr self,
-                                       Cronet_DateTimePtr request_start);
-CRONET_EXPORT
-void Cronet_Metrics_dns_start_set(Cronet_MetricsPtr self,
-                                  const Cronet_DateTimePtr dns_start);
-// Move data from |dns_start|. The caller retains ownership of |dns_start| and
-// must destroy it.
-void Cronet_Metrics_dns_start_move(Cronet_MetricsPtr self,
-                                   Cronet_DateTimePtr dns_start);
-CRONET_EXPORT
-void Cronet_Metrics_dns_end_set(Cronet_MetricsPtr self,
-                                const Cronet_DateTimePtr dns_end);
-// Move data from |dns_end|. The caller retains ownership of |dns_end| and must
-// destroy it.
-void Cronet_Metrics_dns_end_move(Cronet_MetricsPtr self,
-                                 Cronet_DateTimePtr dns_end);
-CRONET_EXPORT
-void Cronet_Metrics_connect_start_set(Cronet_MetricsPtr self,
-                                      const Cronet_DateTimePtr connect_start);
-// Move data from |connect_start|. The caller retains ownership of
-// |connect_start| and must destroy it.
-void Cronet_Metrics_connect_start_move(Cronet_MetricsPtr self,
-                                       Cronet_DateTimePtr connect_start);
-CRONET_EXPORT
-void Cronet_Metrics_connect_end_set(Cronet_MetricsPtr self,
-                                    const Cronet_DateTimePtr connect_end);
-// Move data from |connect_end|. The caller retains ownership of |connect_end|
-// and must destroy it.
-void Cronet_Metrics_connect_end_move(Cronet_MetricsPtr self,
-                                     Cronet_DateTimePtr connect_end);
-CRONET_EXPORT
-void Cronet_Metrics_ssl_start_set(Cronet_MetricsPtr self,
-                                  const Cronet_DateTimePtr ssl_start);
-// Move data from |ssl_start|. The caller retains ownership of |ssl_start| and
-// must destroy it.
-void Cronet_Metrics_ssl_start_move(Cronet_MetricsPtr self,
-                                   Cronet_DateTimePtr ssl_start);
-CRONET_EXPORT
-void Cronet_Metrics_ssl_end_set(Cronet_MetricsPtr self,
-                                const Cronet_DateTimePtr ssl_end);
-// Move data from |ssl_end|. The caller retains ownership of |ssl_end| and must
-// destroy it.
-void Cronet_Metrics_ssl_end_move(Cronet_MetricsPtr self,
-                                 Cronet_DateTimePtr ssl_end);
-CRONET_EXPORT
-void Cronet_Metrics_sending_start_set(Cronet_MetricsPtr self,
-                                      const Cronet_DateTimePtr sending_start);
-// Move data from |sending_start|. The caller retains ownership of
-// |sending_start| and must destroy it.
-void Cronet_Metrics_sending_start_move(Cronet_MetricsPtr self,
-                                       Cronet_DateTimePtr sending_start);
-CRONET_EXPORT
-void Cronet_Metrics_sending_end_set(Cronet_MetricsPtr self,
-                                    const Cronet_DateTimePtr sending_end);
-// Move data from |sending_end|. The caller retains ownership of |sending_end|
-// and must destroy it.
-void Cronet_Metrics_sending_end_move(Cronet_MetricsPtr self,
-                                     Cronet_DateTimePtr sending_end);
-CRONET_EXPORT
-void Cronet_Metrics_push_start_set(Cronet_MetricsPtr self,
-                                   const Cronet_DateTimePtr push_start);
-// Move data from |push_start|. The caller retains ownership of |push_start| and
-// must destroy it.
-void Cronet_Metrics_push_start_move(Cronet_MetricsPtr self,
-                                    Cronet_DateTimePtr push_start);
-CRONET_EXPORT
-void Cronet_Metrics_push_end_set(Cronet_MetricsPtr self,
-                                 const Cronet_DateTimePtr push_end);
-// Move data from |push_end|. The caller retains ownership of |push_end| and
-// must destroy it.
-void Cronet_Metrics_push_end_move(Cronet_MetricsPtr self,
-                                  Cronet_DateTimePtr push_end);
-CRONET_EXPORT
-void Cronet_Metrics_response_start_set(Cronet_MetricsPtr self,
-                                       const Cronet_DateTimePtr response_start);
-// Move data from |response_start|. The caller retains ownership of
-// |response_start| and must destroy it.
-void Cronet_Metrics_response_start_move(Cronet_MetricsPtr self,
-                                        Cronet_DateTimePtr response_start);
-CRONET_EXPORT
-void Cronet_Metrics_request_end_set(Cronet_MetricsPtr self,
-                                    const Cronet_DateTimePtr request_end);
-// Move data from |request_end|. The caller retains ownership of |request_end|
-// and must destroy it.
-void Cronet_Metrics_request_end_move(Cronet_MetricsPtr self,
-                                     Cronet_DateTimePtr request_end);
-CRONET_EXPORT
-void Cronet_Metrics_socket_reused_set(Cronet_MetricsPtr self,
-                                      const bool socket_reused);
-CRONET_EXPORT
-void Cronet_Metrics_sent_byte_count_set(Cronet_MetricsPtr self,
-                                        const int64_t sent_byte_count);
-CRONET_EXPORT
-void Cronet_Metrics_received_byte_count_set(Cronet_MetricsPtr self,
-                                            const int64_t received_byte_count);
-// Cronet_Metrics getters.
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_request_start_get(
-    const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_dns_start_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_dns_end_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_connect_start_get(
-    const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_connect_end_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_ssl_start_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_ssl_end_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_sending_start_get(
-    const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_sending_end_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_push_start_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_push_end_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_response_start_get(
-    const Cronet_MetricsPtr self);
-CRONET_EXPORT
-Cronet_DateTimePtr Cronet_Metrics_request_end_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-bool Cronet_Metrics_socket_reused_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-int64_t Cronet_Metrics_sent_byte_count_get(const Cronet_MetricsPtr self);
-CRONET_EXPORT
-int64_t Cronet_Metrics_received_byte_count_get(const Cronet_MetricsPtr self);
-
-///////////////////////
-// Struct Cronet_RequestFinishedInfo.
-CRONET_EXPORT Cronet_RequestFinishedInfoPtr
-Cronet_RequestFinishedInfo_Create(void);
-CRONET_EXPORT void Cronet_RequestFinishedInfo_Destroy(
-    Cronet_RequestFinishedInfoPtr self);
-// Cronet_RequestFinishedInfo setters.
-CRONET_EXPORT
-void Cronet_RequestFinishedInfo_metrics_set(Cronet_RequestFinishedInfoPtr self,
-                                            const Cronet_MetricsPtr metrics);
-// Move data from |metrics|. The caller retains ownership of |metrics| and must
-// destroy it.
-void Cronet_RequestFinishedInfo_metrics_move(Cronet_RequestFinishedInfoPtr self,
-                                             Cronet_MetricsPtr metrics);
-CRONET_EXPORT
-void Cronet_RequestFinishedInfo_annotations_add(
-    Cronet_RequestFinishedInfoPtr self,
-    const Cronet_RawDataPtr element);
-CRONET_EXPORT
-void Cronet_RequestFinishedInfo_finished_reason_set(
-    Cronet_RequestFinishedInfoPtr self,
-    const Cronet_RequestFinishedInfo_FINISHED_REASON finished_reason);
-// Cronet_RequestFinishedInfo getters.
-CRONET_EXPORT
-Cronet_MetricsPtr Cronet_RequestFinishedInfo_metrics_get(
-    const Cronet_RequestFinishedInfoPtr self);
-CRONET_EXPORT
-uint32_t Cronet_RequestFinishedInfo_annotations_size(
-    const Cronet_RequestFinishedInfoPtr self);
-CRONET_EXPORT
-Cronet_RawDataPtr Cronet_RequestFinishedInfo_annotations_at(
-    const Cronet_RequestFinishedInfoPtr self,
-    uint32_t index);
-CRONET_EXPORT
-void Cronet_RequestFinishedInfo_annotations_clear(
-    Cronet_RequestFinishedInfoPtr self);
-CRONET_EXPORT
-Cronet_RequestFinishedInfo_FINISHED_REASON
-Cronet_RequestFinishedInfo_finished_reason_get(
-    const Cronet_RequestFinishedInfoPtr self);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif  // COMPONENTS_CRONET_NATIVE_GENERATED_CRONET_IDL_C_H_
diff --git a/components/cronet/native/generated/cronet.idl_impl_interface.cc b/components/cronet/native/generated/cronet.idl_impl_interface.cc
deleted file mode 100644
index 703e4bde2cf3e..0000000000000
--- a/components/cronet/native/generated/cronet.idl_impl_interface.cc
+++ /dev/null
@@ -1,997 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-/* DO NOT EDIT. Generated from components/cronet/native/generated/cronet.idl */
-
-#include "components/cronet/native/generated/cronet.idl_impl_interface.h"
-
-#include "base/check.h"
-
-// C functions of Cronet_Buffer that forward calls to C++ implementation.
-void Cronet_Buffer_Destroy(Cronet_BufferPtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_Buffer_SetClientContext(Cronet_BufferPtr self,
-                                    Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_Buffer_GetClientContext(Cronet_BufferPtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-void Cronet_Buffer_InitWithDataAndCallback(Cronet_BufferPtr self,
-                                           Cronet_RawDataPtr data,
-                                           uint64_t size,
-                                           Cronet_BufferCallbackPtr callback) {
-  DCHECK(self);
-  self->InitWithDataAndCallback(data, size, callback);
-}
-
-void Cronet_Buffer_InitWithAlloc(Cronet_BufferPtr self, uint64_t size) {
-  DCHECK(self);
-  self->InitWithAlloc(size);
-}
-
-uint64_t Cronet_Buffer_GetSize(Cronet_BufferPtr self) {
-  DCHECK(self);
-  return self->GetSize();
-}
-
-Cronet_RawDataPtr Cronet_Buffer_GetData(Cronet_BufferPtr self) {
-  DCHECK(self);
-  return self->GetData();
-}
-
-// Implementation of Cronet_Buffer that forwards calls to C functions
-// implemented by the app.
-class Cronet_BufferStub : public Cronet_Buffer {
- public:
-  Cronet_BufferStub(
-      Cronet_Buffer_InitWithDataAndCallbackFunc InitWithDataAndCallbackFunc,
-      Cronet_Buffer_InitWithAllocFunc InitWithAllocFunc,
-      Cronet_Buffer_GetSizeFunc GetSizeFunc,
-      Cronet_Buffer_GetDataFunc GetDataFunc)
-      : InitWithDataAndCallbackFunc_(InitWithDataAndCallbackFunc),
-        InitWithAllocFunc_(InitWithAllocFunc),
-        GetSizeFunc_(GetSizeFunc),
-        GetDataFunc_(GetDataFunc) {}
-
-  Cronet_BufferStub(const Cronet_BufferStub&) = delete;
-  Cronet_BufferStub& operator=(const Cronet_BufferStub&) = delete;
-
-  ~Cronet_BufferStub() override {}
-
- protected:
-  void InitWithDataAndCallback(Cronet_RawDataPtr data,
-                               uint64_t size,
-                               Cronet_BufferCallbackPtr callback) override {
-    InitWithDataAndCallbackFunc_(this, data, size, callback);
-  }
-
-  void InitWithAlloc(uint64_t size) override { InitWithAllocFunc_(this, size); }
-
-  uint64_t GetSize() override { return GetSizeFunc_(this); }
-
-  Cronet_RawDataPtr GetData() override { return GetDataFunc_(this); }
-
- private:
-  const Cronet_Buffer_InitWithDataAndCallbackFunc InitWithDataAndCallbackFunc_;
-  const Cronet_Buffer_InitWithAllocFunc InitWithAllocFunc_;
-  const Cronet_Buffer_GetSizeFunc GetSizeFunc_;
-  const Cronet_Buffer_GetDataFunc GetDataFunc_;
-};
-
-Cronet_BufferPtr Cronet_Buffer_CreateWith(
-    Cronet_Buffer_InitWithDataAndCallbackFunc InitWithDataAndCallbackFunc,
-    Cronet_Buffer_InitWithAllocFunc InitWithAllocFunc,
-    Cronet_Buffer_GetSizeFunc GetSizeFunc,
-    Cronet_Buffer_GetDataFunc GetDataFunc) {
-  return new Cronet_BufferStub(InitWithDataAndCallbackFunc, InitWithAllocFunc,
-                               GetSizeFunc, GetDataFunc);
-}
-
-// C functions of Cronet_BufferCallback that forward calls to C++
-// implementation.
-void Cronet_BufferCallback_Destroy(Cronet_BufferCallbackPtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_BufferCallback_SetClientContext(
-    Cronet_BufferCallbackPtr self,
-    Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_BufferCallback_GetClientContext(
-    Cronet_BufferCallbackPtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-void Cronet_BufferCallback_OnDestroy(Cronet_BufferCallbackPtr self,
-                                     Cronet_BufferPtr buffer) {
-  DCHECK(self);
-  self->OnDestroy(buffer);
-}
-
-// Implementation of Cronet_BufferCallback that forwards calls to C functions
-// implemented by the app.
-class Cronet_BufferCallbackStub : public Cronet_BufferCallback {
- public:
-  explicit Cronet_BufferCallbackStub(
-      Cronet_BufferCallback_OnDestroyFunc OnDestroyFunc)
-      : OnDestroyFunc_(OnDestroyFunc) {}
-
-  Cronet_BufferCallbackStub(const Cronet_BufferCallbackStub&) = delete;
-  Cronet_BufferCallbackStub& operator=(const Cronet_BufferCallbackStub&) =
-      delete;
-
-  ~Cronet_BufferCallbackStub() override {}
-
- protected:
-  void OnDestroy(Cronet_BufferPtr buffer) override {
-    OnDestroyFunc_(this, buffer);
-  }
-
- private:
-  const Cronet_BufferCallback_OnDestroyFunc OnDestroyFunc_;
-};
-
-Cronet_BufferCallbackPtr Cronet_BufferCallback_CreateWith(
-    Cronet_BufferCallback_OnDestroyFunc OnDestroyFunc) {
-  return new Cronet_BufferCallbackStub(OnDestroyFunc);
-}
-
-// C functions of Cronet_Runnable that forward calls to C++ implementation.
-void Cronet_Runnable_Destroy(Cronet_RunnablePtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_Runnable_SetClientContext(Cronet_RunnablePtr self,
-                                      Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_Runnable_GetClientContext(Cronet_RunnablePtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-void Cronet_Runnable_Run(Cronet_RunnablePtr self) {
-  DCHECK(self);
-  self->Run();
-}
-
-// Implementation of Cronet_Runnable that forwards calls to C functions
-// implemented by the app.
-class Cronet_RunnableStub : public Cronet_Runnable {
- public:
-  explicit Cronet_RunnableStub(Cronet_Runnable_RunFunc RunFunc)
-      : RunFunc_(RunFunc) {}
-
-  Cronet_RunnableStub(const Cronet_RunnableStub&) = delete;
-  Cronet_RunnableStub& operator=(const Cronet_RunnableStub&) = delete;
-
-  ~Cronet_RunnableStub() override {}
-
- protected:
-  void Run() override { RunFunc_(this); }
-
- private:
-  const Cronet_Runnable_RunFunc RunFunc_;
-};
-
-Cronet_RunnablePtr Cronet_Runnable_CreateWith(Cronet_Runnable_RunFunc RunFunc) {
-  return new Cronet_RunnableStub(RunFunc);
-}
-
-// C functions of Cronet_Executor that forward calls to C++ implementation.
-void Cronet_Executor_Destroy(Cronet_ExecutorPtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_Executor_SetClientContext(Cronet_ExecutorPtr self,
-                                      Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_Executor_GetClientContext(Cronet_ExecutorPtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-void Cronet_Executor_Execute(Cronet_ExecutorPtr self,
-                             Cronet_RunnablePtr command) {
-  DCHECK(self);
-  self->Execute(command);
-}
-
-// Implementation of Cronet_Executor that forwards calls to C functions
-// implemented by the app.
-class Cronet_ExecutorStub : public Cronet_Executor {
- public:
-  explicit Cronet_ExecutorStub(Cronet_Executor_ExecuteFunc ExecuteFunc)
-      : ExecuteFunc_(ExecuteFunc) {}
-
-  Cronet_ExecutorStub(const Cronet_ExecutorStub&) = delete;
-  Cronet_ExecutorStub& operator=(const Cronet_ExecutorStub&) = delete;
-
-  ~Cronet_ExecutorStub() override {}
-
- protected:
-  void Execute(Cronet_RunnablePtr command) override {
-    ExecuteFunc_(this, command);
-  }
-
- private:
-  const Cronet_Executor_ExecuteFunc ExecuteFunc_;
-};
-
-Cronet_ExecutorPtr Cronet_Executor_CreateWith(
-    Cronet_Executor_ExecuteFunc ExecuteFunc) {
-  return new Cronet_ExecutorStub(ExecuteFunc);
-}
-
-// C functions of Cronet_Engine that forward calls to C++ implementation.
-void Cronet_Engine_Destroy(Cronet_EnginePtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_Engine_SetClientContext(Cronet_EnginePtr self,
-                                    Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_Engine_GetClientContext(Cronet_EnginePtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-Cronet_RESULT Cronet_Engine_StartWithParams(Cronet_EnginePtr self,
-                                            Cronet_EngineParamsPtr params) {
-  DCHECK(self);
-  return self->StartWithParams(params);
-}
-
-bool Cronet_Engine_StartNetLogToFile(Cronet_EnginePtr self,
-                                     Cronet_String file_name,
-                                     bool log_all) {
-  DCHECK(self);
-  return self->StartNetLogToFile(file_name, log_all);
-}
-
-void Cronet_Engine_StopNetLog(Cronet_EnginePtr self) {
-  DCHECK(self);
-  self->StopNetLog();
-}
-
-Cronet_RESULT Cronet_Engine_Shutdown(Cronet_EnginePtr self) {
-  DCHECK(self);
-  return self->Shutdown();
-}
-
-Cronet_String Cronet_Engine_GetVersionString(Cronet_EnginePtr self) {
-  DCHECK(self);
-  return self->GetVersionString();
-}
-
-Cronet_String Cronet_Engine_GetDefaultUserAgent(Cronet_EnginePtr self) {
-  DCHECK(self);
-  return self->GetDefaultUserAgent();
-}
-
-void Cronet_Engine_AddRequestFinishedListener(
-    Cronet_EnginePtr self,
-    Cronet_RequestFinishedInfoListenerPtr listener,
-    Cronet_ExecutorPtr executor) {
-  DCHECK(self);
-  self->AddRequestFinishedListener(listener, executor);
-}
-
-void Cronet_Engine_RemoveRequestFinishedListener(
-    Cronet_EnginePtr self,
-    Cronet_RequestFinishedInfoListenerPtr listener) {
-  DCHECK(self);
-  self->RemoveRequestFinishedListener(listener);
-}
-
-// Implementation of Cronet_Engine that forwards calls to C functions
-// implemented by the app.
-class Cronet_EngineStub : public Cronet_Engine {
- public:
-  Cronet_EngineStub(
-      Cronet_Engine_StartWithParamsFunc StartWithParamsFunc,
-      Cronet_Engine_StartNetLogToFileFunc StartNetLogToFileFunc,
-      Cronet_Engine_StopNetLogFunc StopNetLogFunc,
-      Cronet_Engine_ShutdownFunc ShutdownFunc,
-      Cronet_Engine_GetVersionStringFunc GetVersionStringFunc,
-      Cronet_Engine_GetDefaultUserAgentFunc GetDefaultUserAgentFunc,
-      Cronet_Engine_AddRequestFinishedListenerFunc
-          AddRequestFinishedListenerFunc,
-      Cronet_Engine_RemoveRequestFinishedListenerFunc
-          RemoveRequestFinishedListenerFunc)
-      : StartWithParamsFunc_(StartWithParamsFunc),
-        StartNetLogToFileFunc_(StartNetLogToFileFunc),
-        StopNetLogFunc_(StopNetLogFunc),
-        ShutdownFunc_(ShutdownFunc),
-        GetVersionStringFunc_(GetVersionStringFunc),
-        GetDefaultUserAgentFunc_(GetDefaultUserAgentFunc),
-        AddRequestFinishedListenerFunc_(AddRequestFinishedListenerFunc),
-        RemoveRequestFinishedListenerFunc_(RemoveRequestFinishedListenerFunc) {}
-
-  Cronet_EngineStub(const Cronet_EngineStub&) = delete;
-  Cronet_EngineStub& operator=(const Cronet_EngineStub&) = delete;
-
-  ~Cronet_EngineStub() override {}
-
- protected:
-  Cronet_RESULT StartWithParams(Cronet_EngineParamsPtr params) override {
-    return StartWithParamsFunc_(this, params);
-  }
-
-  bool StartNetLogToFile(Cronet_String file_name, bool log_all) override {
-    return StartNetLogToFileFunc_(this, file_name, log_all);
-  }
-
-  void StopNetLog() override { StopNetLogFunc_(this); }
-
-  Cronet_RESULT Shutdown() override { return ShutdownFunc_(this); }
-
-  Cronet_String GetVersionString() override {
-    return GetVersionStringFunc_(this);
-  }
-
-  Cronet_String GetDefaultUserAgent() override {
-    return GetDefaultUserAgentFunc_(this);
-  }
-
-  void AddRequestFinishedListener(
-      Cronet_RequestFinishedInfoListenerPtr listener,
-      Cronet_ExecutorPtr executor) override {
-    AddRequestFinishedListenerFunc_(this, listener, executor);
-  }
-
-  void RemoveRequestFinishedListener(
-      Cronet_RequestFinishedInfoListenerPtr listener) override {
-    RemoveRequestFinishedListenerFunc_(this, listener);
-  }
-
- private:
-  const Cronet_Engine_StartWithParamsFunc StartWithParamsFunc_;
-  const Cronet_Engine_StartNetLogToFileFunc StartNetLogToFileFunc_;
-  const Cronet_Engine_StopNetLogFunc StopNetLogFunc_;
-  const Cronet_Engine_ShutdownFunc ShutdownFunc_;
-  const Cronet_Engine_GetVersionStringFunc GetVersionStringFunc_;
-  const Cronet_Engine_GetDefaultUserAgentFunc GetDefaultUserAgentFunc_;
-  const Cronet_Engine_AddRequestFinishedListenerFunc
-      AddRequestFinishedListenerFunc_;
-  const Cronet_Engine_RemoveRequestFinishedListenerFunc
-      RemoveRequestFinishedListenerFunc_;
-};
-
-Cronet_EnginePtr Cronet_Engine_CreateWith(
-    Cronet_Engine_StartWithParamsFunc StartWithParamsFunc,
-    Cronet_Engine_StartNetLogToFileFunc StartNetLogToFileFunc,
-    Cronet_Engine_StopNetLogFunc StopNetLogFunc,
-    Cronet_Engine_ShutdownFunc ShutdownFunc,
-    Cronet_Engine_GetVersionStringFunc GetVersionStringFunc,
-    Cronet_Engine_GetDefaultUserAgentFunc GetDefaultUserAgentFunc,
-    Cronet_Engine_AddRequestFinishedListenerFunc AddRequestFinishedListenerFunc,
-    Cronet_Engine_RemoveRequestFinishedListenerFunc
-        RemoveRequestFinishedListenerFunc) {
-  return new Cronet_EngineStub(
-      StartWithParamsFunc, StartNetLogToFileFunc, StopNetLogFunc, ShutdownFunc,
-      GetVersionStringFunc, GetDefaultUserAgentFunc,
-      AddRequestFinishedListenerFunc, RemoveRequestFinishedListenerFunc);
-}
-
-// C functions of Cronet_UrlRequestStatusListener that forward calls to C++
-// implementation.
-void Cronet_UrlRequestStatusListener_Destroy(
-    Cronet_UrlRequestStatusListenerPtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_UrlRequestStatusListener_SetClientContext(
-    Cronet_UrlRequestStatusListenerPtr self,
-    Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_UrlRequestStatusListener_GetClientContext(
-    Cronet_UrlRequestStatusListenerPtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-void Cronet_UrlRequestStatusListener_OnStatus(
-    Cronet_UrlRequestStatusListenerPtr self,
-    Cronet_UrlRequestStatusListener_Status status) {
-  DCHECK(self);
-  self->OnStatus(status);
-}
-
-// Implementation of Cronet_UrlRequestStatusListener that forwards calls to C
-// functions implemented by the app.
-class Cronet_UrlRequestStatusListenerStub
-    : public Cronet_UrlRequestStatusListener {
- public:
-  explicit Cronet_UrlRequestStatusListenerStub(
-      Cronet_UrlRequestStatusListener_OnStatusFunc OnStatusFunc)
-      : OnStatusFunc_(OnStatusFunc) {}
-
-  Cronet_UrlRequestStatusListenerStub(
-      const Cronet_UrlRequestStatusListenerStub&) = delete;
-  Cronet_UrlRequestStatusListenerStub& operator=(
-      const Cronet_UrlRequestStatusListenerStub&) = delete;
-
-  ~Cronet_UrlRequestStatusListenerStub() override {}
-
- protected:
-  void OnStatus(Cronet_UrlRequestStatusListener_Status status) override {
-    OnStatusFunc_(this, status);
-  }
-
- private:
-  const Cronet_UrlRequestStatusListener_OnStatusFunc OnStatusFunc_;
-};
-
-Cronet_UrlRequestStatusListenerPtr Cronet_UrlRequestStatusListener_CreateWith(
-    Cronet_UrlRequestStatusListener_OnStatusFunc OnStatusFunc) {
-  return new Cronet_UrlRequestStatusListenerStub(OnStatusFunc);
-}
-
-// C functions of Cronet_UrlRequestCallback that forward calls to C++
-// implementation.
-void Cronet_UrlRequestCallback_Destroy(Cronet_UrlRequestCallbackPtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_UrlRequestCallback_SetClientContext(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_UrlRequestCallback_GetClientContext(
-    Cronet_UrlRequestCallbackPtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-void Cronet_UrlRequestCallback_OnRedirectReceived(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_String new_location_url) {
-  DCHECK(self);
-  self->OnRedirectReceived(request, info, new_location_url);
-}
-
-void Cronet_UrlRequestCallback_OnResponseStarted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info) {
-  DCHECK(self);
-  self->OnResponseStarted(request, info);
-}
-
-void Cronet_UrlRequestCallback_OnReadCompleted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_BufferPtr buffer,
-    uint64_t bytes_read) {
-  DCHECK(self);
-  self->OnReadCompleted(request, info, buffer, bytes_read);
-}
-
-void Cronet_UrlRequestCallback_OnSucceeded(Cronet_UrlRequestCallbackPtr self,
-                                           Cronet_UrlRequestPtr request,
-                                           Cronet_UrlResponseInfoPtr info) {
-  DCHECK(self);
-  self->OnSucceeded(request, info);
-}
-
-void Cronet_UrlRequestCallback_OnFailed(Cronet_UrlRequestCallbackPtr self,
-                                        Cronet_UrlRequestPtr request,
-                                        Cronet_UrlResponseInfoPtr info,
-                                        Cronet_ErrorPtr error) {
-  DCHECK(self);
-  self->OnFailed(request, info, error);
-}
-
-void Cronet_UrlRequestCallback_OnCanceled(Cronet_UrlRequestCallbackPtr self,
-                                          Cronet_UrlRequestPtr request,
-                                          Cronet_UrlResponseInfoPtr info) {
-  DCHECK(self);
-  self->OnCanceled(request, info);
-}
-
-// Implementation of Cronet_UrlRequestCallback that forwards calls to C
-// functions implemented by the app.
-class Cronet_UrlRequestCallbackStub : public Cronet_UrlRequestCallback {
- public:
-  Cronet_UrlRequestCallbackStub(
-      Cronet_UrlRequestCallback_OnRedirectReceivedFunc OnRedirectReceivedFunc,
-      Cronet_UrlRequestCallback_OnResponseStartedFunc OnResponseStartedFunc,
-      Cronet_UrlRequestCallback_OnReadCompletedFunc OnReadCompletedFunc,
-      Cronet_UrlRequestCallback_OnSucceededFunc OnSucceededFunc,
-      Cronet_UrlRequestCallback_OnFailedFunc OnFailedFunc,
-      Cronet_UrlRequestCallback_OnCanceledFunc OnCanceledFunc)
-      : OnRedirectReceivedFunc_(OnRedirectReceivedFunc),
-        OnResponseStartedFunc_(OnResponseStartedFunc),
-        OnReadCompletedFunc_(OnReadCompletedFunc),
-        OnSucceededFunc_(OnSucceededFunc),
-        OnFailedFunc_(OnFailedFunc),
-        OnCanceledFunc_(OnCanceledFunc) {}
-
-  Cronet_UrlRequestCallbackStub(const Cronet_UrlRequestCallbackStub&) = delete;
-  Cronet_UrlRequestCallbackStub& operator=(
-      const Cronet_UrlRequestCallbackStub&) = delete;
-
-  ~Cronet_UrlRequestCallbackStub() override {}
-
- protected:
-  void OnRedirectReceived(Cronet_UrlRequestPtr request,
-                          Cronet_UrlResponseInfoPtr info,
-                          Cronet_String new_location_url) override {
-    OnRedirectReceivedFunc_(this, request, info, new_location_url);
-  }
-
-  void OnResponseStarted(Cronet_UrlRequestPtr request,
-                         Cronet_UrlResponseInfoPtr info) override {
-    OnResponseStartedFunc_(this, request, info);
-  }
-
-  void OnReadCompleted(Cronet_UrlRequestPtr request,
-                       Cronet_UrlResponseInfoPtr info,
-                       Cronet_BufferPtr buffer,
-                       uint64_t bytes_read) override {
-    OnReadCompletedFunc_(this, request, info, buffer, bytes_read);
-  }
-
-  void OnSucceeded(Cronet_UrlRequestPtr request,
-                   Cronet_UrlResponseInfoPtr info) override {
-    OnSucceededFunc_(this, request, info);
-  }
-
-  void OnFailed(Cronet_UrlRequestPtr request,
-                Cronet_UrlResponseInfoPtr info,
-                Cronet_ErrorPtr error) override {
-    OnFailedFunc_(this, request, info, error);
-  }
-
-  void OnCanceled(Cronet_UrlRequestPtr request,
-                  Cronet_UrlResponseInfoPtr info) override {
-    OnCanceledFunc_(this, request, info);
-  }
-
- private:
-  const Cronet_UrlRequestCallback_OnRedirectReceivedFunc
-      OnRedirectReceivedFunc_;
-  const Cronet_UrlRequestCallback_OnResponseStartedFunc OnResponseStartedFunc_;
-  const Cronet_UrlRequestCallback_OnReadCompletedFunc OnReadCompletedFunc_;
-  const Cronet_UrlRequestCallback_OnSucceededFunc OnSucceededFunc_;
-  const Cronet_UrlRequestCallback_OnFailedFunc OnFailedFunc_;
-  const Cronet_UrlRequestCallback_OnCanceledFunc OnCanceledFunc_;
-};
-
-Cronet_UrlRequestCallbackPtr Cronet_UrlRequestCallback_CreateWith(
-    Cronet_UrlRequestCallback_OnRedirectReceivedFunc OnRedirectReceivedFunc,
-    Cronet_UrlRequestCallback_OnResponseStartedFunc OnResponseStartedFunc,
-    Cronet_UrlRequestCallback_OnReadCompletedFunc OnReadCompletedFunc,
-    Cronet_UrlRequestCallback_OnSucceededFunc OnSucceededFunc,
-    Cronet_UrlRequestCallback_OnFailedFunc OnFailedFunc,
-    Cronet_UrlRequestCallback_OnCanceledFunc OnCanceledFunc) {
-  return new Cronet_UrlRequestCallbackStub(
-      OnRedirectReceivedFunc, OnResponseStartedFunc, OnReadCompletedFunc,
-      OnSucceededFunc, OnFailedFunc, OnCanceledFunc);
-}
-
-// C functions of Cronet_UploadDataSink that forward calls to C++
-// implementation.
-void Cronet_UploadDataSink_Destroy(Cronet_UploadDataSinkPtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_UploadDataSink_SetClientContext(
-    Cronet_UploadDataSinkPtr self,
-    Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_UploadDataSink_GetClientContext(
-    Cronet_UploadDataSinkPtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-void Cronet_UploadDataSink_OnReadSucceeded(Cronet_UploadDataSinkPtr self,
-                                           uint64_t bytes_read,
-                                           bool final_chunk) {
-  DCHECK(self);
-  self->OnReadSucceeded(bytes_read, final_chunk);
-}
-
-void Cronet_UploadDataSink_OnReadError(Cronet_UploadDataSinkPtr self,
-                                       Cronet_String error_message) {
-  DCHECK(self);
-  self->OnReadError(error_message);
-}
-
-void Cronet_UploadDataSink_OnRewindSucceeded(Cronet_UploadDataSinkPtr self) {
-  DCHECK(self);
-  self->OnRewindSucceeded();
-}
-
-void Cronet_UploadDataSink_OnRewindError(Cronet_UploadDataSinkPtr self,
-                                         Cronet_String error_message) {
-  DCHECK(self);
-  self->OnRewindError(error_message);
-}
-
-// Implementation of Cronet_UploadDataSink that forwards calls to C functions
-// implemented by the app.
-class Cronet_UploadDataSinkStub : public Cronet_UploadDataSink {
- public:
-  Cronet_UploadDataSinkStub(
-      Cronet_UploadDataSink_OnReadSucceededFunc OnReadSucceededFunc,
-      Cronet_UploadDataSink_OnReadErrorFunc OnReadErrorFunc,
-      Cronet_UploadDataSink_OnRewindSucceededFunc OnRewindSucceededFunc,
-      Cronet_UploadDataSink_OnRewindErrorFunc OnRewindErrorFunc)
-      : OnReadSucceededFunc_(OnReadSucceededFunc),
-        OnReadErrorFunc_(OnReadErrorFunc),
-        OnRewindSucceededFunc_(OnRewindSucceededFunc),
-        OnRewindErrorFunc_(OnRewindErrorFunc) {}
-
-  Cronet_UploadDataSinkStub(const Cronet_UploadDataSinkStub&) = delete;
-  Cronet_UploadDataSinkStub& operator=(const Cronet_UploadDataSinkStub&) =
-      delete;
-
-  ~Cronet_UploadDataSinkStub() override {}
-
- protected:
-  void OnReadSucceeded(uint64_t bytes_read, bool final_chunk) override {
-    OnReadSucceededFunc_(this, bytes_read, final_chunk);
-  }
-
-  void OnReadError(Cronet_String error_message) override {
-    OnReadErrorFunc_(this, error_message);
-  }
-
-  void OnRewindSucceeded() override { OnRewindSucceededFunc_(this); }
-
-  void OnRewindError(Cronet_String error_message) override {
-    OnRewindErrorFunc_(this, error_message);
-  }
-
- private:
-  const Cronet_UploadDataSink_OnReadSucceededFunc OnReadSucceededFunc_;
-  const Cronet_UploadDataSink_OnReadErrorFunc OnReadErrorFunc_;
-  const Cronet_UploadDataSink_OnRewindSucceededFunc OnRewindSucceededFunc_;
-  const Cronet_UploadDataSink_OnRewindErrorFunc OnRewindErrorFunc_;
-};
-
-Cronet_UploadDataSinkPtr Cronet_UploadDataSink_CreateWith(
-    Cronet_UploadDataSink_OnReadSucceededFunc OnReadSucceededFunc,
-    Cronet_UploadDataSink_OnReadErrorFunc OnReadErrorFunc,
-    Cronet_UploadDataSink_OnRewindSucceededFunc OnRewindSucceededFunc,
-    Cronet_UploadDataSink_OnRewindErrorFunc OnRewindErrorFunc) {
-  return new Cronet_UploadDataSinkStub(OnReadSucceededFunc, OnReadErrorFunc,
-                                       OnRewindSucceededFunc,
-                                       OnRewindErrorFunc);
-}
-
-// C functions of Cronet_UploadDataProvider that forward calls to C++
-// implementation.
-void Cronet_UploadDataProvider_Destroy(Cronet_UploadDataProviderPtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_UploadDataProvider_SetClientContext(
-    Cronet_UploadDataProviderPtr self,
-    Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_UploadDataProvider_GetClientContext(
-    Cronet_UploadDataProviderPtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-int64_t Cronet_UploadDataProvider_GetLength(Cronet_UploadDataProviderPtr self) {
-  DCHECK(self);
-  return self->GetLength();
-}
-
-void Cronet_UploadDataProvider_Read(Cronet_UploadDataProviderPtr self,
-                                    Cronet_UploadDataSinkPtr upload_data_sink,
-                                    Cronet_BufferPtr buffer) {
-  DCHECK(self);
-  self->Read(upload_data_sink, buffer);
-}
-
-void Cronet_UploadDataProvider_Rewind(
-    Cronet_UploadDataProviderPtr self,
-    Cronet_UploadDataSinkPtr upload_data_sink) {
-  DCHECK(self);
-  self->Rewind(upload_data_sink);
-}
-
-void Cronet_UploadDataProvider_Close(Cronet_UploadDataProviderPtr self) {
-  DCHECK(self);
-  self->Close();
-}
-
-// Implementation of Cronet_UploadDataProvider that forwards calls to C
-// functions implemented by the app.
-class Cronet_UploadDataProviderStub : public Cronet_UploadDataProvider {
- public:
-  Cronet_UploadDataProviderStub(
-      Cronet_UploadDataProvider_GetLengthFunc GetLengthFunc,
-      Cronet_UploadDataProvider_ReadFunc ReadFunc,
-      Cronet_UploadDataProvider_RewindFunc RewindFunc,
-      Cronet_UploadDataProvider_CloseFunc CloseFunc)
-      : GetLengthFunc_(GetLengthFunc),
-        ReadFunc_(ReadFunc),
-        RewindFunc_(RewindFunc),
-        CloseFunc_(CloseFunc) {}
-
-  Cronet_UploadDataProviderStub(const Cronet_UploadDataProviderStub&) = delete;
-  Cronet_UploadDataProviderStub& operator=(
-      const Cronet_UploadDataProviderStub&) = delete;
-
-  ~Cronet_UploadDataProviderStub() override {}
-
- protected:
-  int64_t GetLength() override { return GetLengthFunc_(this); }
-
-  void Read(Cronet_UploadDataSinkPtr upload_data_sink,
-            Cronet_BufferPtr buffer) override {
-    ReadFunc_(this, upload_data_sink, buffer);
-  }
-
-  void Rewind(Cronet_UploadDataSinkPtr upload_data_sink) override {
-    RewindFunc_(this, upload_data_sink);
-  }
-
-  void Close() override { CloseFunc_(this); }
-
- private:
-  const Cronet_UploadDataProvider_GetLengthFunc GetLengthFunc_;
-  const Cronet_UploadDataProvider_ReadFunc ReadFunc_;
-  const Cronet_UploadDataProvider_RewindFunc RewindFunc_;
-  const Cronet_UploadDataProvider_CloseFunc CloseFunc_;
-};
-
-Cronet_UploadDataProviderPtr Cronet_UploadDataProvider_CreateWith(
-    Cronet_UploadDataProvider_GetLengthFunc GetLengthFunc,
-    Cronet_UploadDataProvider_ReadFunc ReadFunc,
-    Cronet_UploadDataProvider_RewindFunc RewindFunc,
-    Cronet_UploadDataProvider_CloseFunc CloseFunc) {
-  return new Cronet_UploadDataProviderStub(GetLengthFunc, ReadFunc, RewindFunc,
-                                           CloseFunc);
-}
-
-// C functions of Cronet_UrlRequest that forward calls to C++ implementation.
-void Cronet_UrlRequest_Destroy(Cronet_UrlRequestPtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_UrlRequest_SetClientContext(Cronet_UrlRequestPtr self,
-                                        Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_UrlRequest_GetClientContext(
-    Cronet_UrlRequestPtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-Cronet_RESULT Cronet_UrlRequest_InitWithParams(
-    Cronet_UrlRequestPtr self,
-    Cronet_EnginePtr engine,
-    Cronet_String url,
-    Cronet_UrlRequestParamsPtr params,
-    Cronet_UrlRequestCallbackPtr callback,
-    Cronet_ExecutorPtr executor) {
-  DCHECK(self);
-  return self->InitWithParams(engine, url, params, callback, executor);
-}
-
-Cronet_RESULT Cronet_UrlRequest_Start(Cronet_UrlRequestPtr self) {
-  DCHECK(self);
-  return self->Start();
-}
-
-Cronet_RESULT Cronet_UrlRequest_FollowRedirect(Cronet_UrlRequestPtr self) {
-  DCHECK(self);
-  return self->FollowRedirect();
-}
-
-Cronet_RESULT Cronet_UrlRequest_Read(Cronet_UrlRequestPtr self,
-                                     Cronet_BufferPtr buffer) {
-  DCHECK(self);
-  return self->Read(buffer);
-}
-
-void Cronet_UrlRequest_Cancel(Cronet_UrlRequestPtr self) {
-  DCHECK(self);
-  self->Cancel();
-}
-
-bool Cronet_UrlRequest_IsDone(Cronet_UrlRequestPtr self) {
-  DCHECK(self);
-  return self->IsDone();
-}
-
-void Cronet_UrlRequest_GetStatus(Cronet_UrlRequestPtr self,
-                                 Cronet_UrlRequestStatusListenerPtr listener) {
-  DCHECK(self);
-  self->GetStatus(listener);
-}
-
-// Implementation of Cronet_UrlRequest that forwards calls to C functions
-// implemented by the app.
-class Cronet_UrlRequestStub : public Cronet_UrlRequest {
- public:
-  Cronet_UrlRequestStub(Cronet_UrlRequest_InitWithParamsFunc InitWithParamsFunc,
-                        Cronet_UrlRequest_StartFunc StartFunc,
-                        Cronet_UrlRequest_FollowRedirectFunc FollowRedirectFunc,
-                        Cronet_UrlRequest_ReadFunc ReadFunc,
-                        Cronet_UrlRequest_CancelFunc CancelFunc,
-                        Cronet_UrlRequest_IsDoneFunc IsDoneFunc,
-                        Cronet_UrlRequest_GetStatusFunc GetStatusFunc)
-      : InitWithParamsFunc_(InitWithParamsFunc),
-        StartFunc_(StartFunc),
-        FollowRedirectFunc_(FollowRedirectFunc),
-        ReadFunc_(ReadFunc),
-        CancelFunc_(CancelFunc),
-        IsDoneFunc_(IsDoneFunc),
-        GetStatusFunc_(GetStatusFunc) {}
-
-  Cronet_UrlRequestStub(const Cronet_UrlRequestStub&) = delete;
-  Cronet_UrlRequestStub& operator=(const Cronet_UrlRequestStub&) = delete;
-
-  ~Cronet_UrlRequestStub() override {}
-
- protected:
-  Cronet_RESULT InitWithParams(Cronet_EnginePtr engine,
-                               Cronet_String url,
-                               Cronet_UrlRequestParamsPtr params,
-                               Cronet_UrlRequestCallbackPtr callback,
-                               Cronet_ExecutorPtr executor) override {
-    return InitWithParamsFunc_(this, engine, url, params, callback, executor);
-  }
-
-  Cronet_RESULT Start() override { return StartFunc_(this); }
-
-  Cronet_RESULT FollowRedirect() override { return FollowRedirectFunc_(this); }
-
-  Cronet_RESULT Read(Cronet_BufferPtr buffer) override {
-    return ReadFunc_(this, buffer);
-  }
-
-  void Cancel() override { CancelFunc_(this); }
-
-  bool IsDone() override { return IsDoneFunc_(this); }
-
-  void GetStatus(Cronet_UrlRequestStatusListenerPtr listener) override {
-    GetStatusFunc_(this, listener);
-  }
-
- private:
-  const Cronet_UrlRequest_InitWithParamsFunc InitWithParamsFunc_;
-  const Cronet_UrlRequest_StartFunc StartFunc_;
-  const Cronet_UrlRequest_FollowRedirectFunc FollowRedirectFunc_;
-  const Cronet_UrlRequest_ReadFunc ReadFunc_;
-  const Cronet_UrlRequest_CancelFunc CancelFunc_;
-  const Cronet_UrlRequest_IsDoneFunc IsDoneFunc_;
-  const Cronet_UrlRequest_GetStatusFunc GetStatusFunc_;
-};
-
-Cronet_UrlRequestPtr Cronet_UrlRequest_CreateWith(
-    Cronet_UrlRequest_InitWithParamsFunc InitWithParamsFunc,
-    Cronet_UrlRequest_StartFunc StartFunc,
-    Cronet_UrlRequest_FollowRedirectFunc FollowRedirectFunc,
-    Cronet_UrlRequest_ReadFunc ReadFunc,
-    Cronet_UrlRequest_CancelFunc CancelFunc,
-    Cronet_UrlRequest_IsDoneFunc IsDoneFunc,
-    Cronet_UrlRequest_GetStatusFunc GetStatusFunc) {
-  return new Cronet_UrlRequestStub(InitWithParamsFunc, StartFunc,
-                                   FollowRedirectFunc, ReadFunc, CancelFunc,
-                                   IsDoneFunc, GetStatusFunc);
-}
-
-// C functions of Cronet_RequestFinishedInfoListener that forward calls to C++
-// implementation.
-void Cronet_RequestFinishedInfoListener_Destroy(
-    Cronet_RequestFinishedInfoListenerPtr self) {
-  DCHECK(self);
-  return delete self;
-}
-
-void Cronet_RequestFinishedInfoListener_SetClientContext(
-    Cronet_RequestFinishedInfoListenerPtr self,
-    Cronet_ClientContext client_context) {
-  DCHECK(self);
-  self->set_client_context(client_context);
-}
-
-Cronet_ClientContext Cronet_RequestFinishedInfoListener_GetClientContext(
-    Cronet_RequestFinishedInfoListenerPtr self) {
-  DCHECK(self);
-  return self->client_context();
-}
-
-void Cronet_RequestFinishedInfoListener_OnRequestFinished(
-    Cronet_RequestFinishedInfoListenerPtr self,
-    Cronet_RequestFinishedInfoPtr request_info,
-    Cronet_UrlResponseInfoPtr response_info,
-    Cronet_ErrorPtr error) {
-  DCHECK(self);
-  self->OnRequestFinished(request_info, response_info, error);
-}
-
-// Implementation of Cronet_RequestFinishedInfoListener that forwards calls to C
-// functions implemented by the app.
-class Cronet_RequestFinishedInfoListenerStub
-    : public Cronet_RequestFinishedInfoListener {
- public:
-  explicit Cronet_RequestFinishedInfoListenerStub(
-      Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc
-          OnRequestFinishedFunc)
-      : OnRequestFinishedFunc_(OnRequestFinishedFunc) {}
-
-  Cronet_RequestFinishedInfoListenerStub(
-      const Cronet_RequestFinishedInfoListenerStub&) = delete;
-  Cronet_RequestFinishedInfoListenerStub& operator=(
-      const Cronet_RequestFinishedInfoListenerStub&) = delete;
-
-  ~Cronet_RequestFinishedInfoListenerStub() override {}
-
- protected:
-  void OnRequestFinished(Cronet_RequestFinishedInfoPtr request_info,
-                         Cronet_UrlResponseInfoPtr response_info,
-                         Cronet_ErrorPtr error) override {
-    OnRequestFinishedFunc_(this, request_info, response_info, error);
-  }
-
- private:
-  const Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc
-      OnRequestFinishedFunc_;
-};
-
-Cronet_RequestFinishedInfoListenerPtr
-Cronet_RequestFinishedInfoListener_CreateWith(
-    Cronet_RequestFinishedInfoListener_OnRequestFinishedFunc
-        OnRequestFinishedFunc) {
-  return new Cronet_RequestFinishedInfoListenerStub(OnRequestFinishedFunc);
-}
diff --git a/components/cronet/native/generated/cronet.idl_impl_interface.h b/components/cronet/native/generated/cronet.idl_impl_interface.h
deleted file mode 100644
index 3af3b6d271601..0000000000000
--- a/components/cronet/native/generated/cronet.idl_impl_interface.h
+++ /dev/null
@@ -1,276 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-/* DO NOT EDIT. Generated from components/cronet/native/generated/cronet.idl */
-
-#ifndef COMPONENTS_CRONET_NATIVE_GENERATED_CRONET_IDL_IMPL_INTERFACE_H_
-#define COMPONENTS_CRONET_NATIVE_GENERATED_CRONET_IDL_IMPL_INTERFACE_H_
-
-#include "components/cronet/native/generated/cronet.idl_c.h"
-
-struct Cronet_Buffer {
-  Cronet_Buffer() = default;
-
-  Cronet_Buffer(const Cronet_Buffer&) = delete;
-  Cronet_Buffer& operator=(const Cronet_Buffer&) = delete;
-
-  virtual ~Cronet_Buffer() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual void InitWithDataAndCallback(Cronet_RawDataPtr data,
-                                       uint64_t size,
-                                       Cronet_BufferCallbackPtr callback) = 0;
-  virtual void InitWithAlloc(uint64_t size) = 0;
-  virtual uint64_t GetSize() = 0;
-  virtual Cronet_RawDataPtr GetData() = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-struct Cronet_BufferCallback {
-  Cronet_BufferCallback() = default;
-
-  Cronet_BufferCallback(const Cronet_BufferCallback&) = delete;
-  Cronet_BufferCallback& operator=(const Cronet_BufferCallback&) = delete;
-
-  virtual ~Cronet_BufferCallback() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual void OnDestroy(Cronet_BufferPtr buffer) = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-struct Cronet_Runnable {
-  Cronet_Runnable() = default;
-
-  Cronet_Runnable(const Cronet_Runnable&) = delete;
-  Cronet_Runnable& operator=(const Cronet_Runnable&) = delete;
-
-  virtual ~Cronet_Runnable() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual void Run() = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-struct Cronet_Executor {
-  Cronet_Executor() = default;
-
-  Cronet_Executor(const Cronet_Executor&) = delete;
-  Cronet_Executor& operator=(const Cronet_Executor&) = delete;
-
-  virtual ~Cronet_Executor() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual void Execute(Cronet_RunnablePtr command) = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-struct Cronet_Engine {
-  Cronet_Engine() = default;
-
-  Cronet_Engine(const Cronet_Engine&) = delete;
-  Cronet_Engine& operator=(const Cronet_Engine&) = delete;
-
-  virtual ~Cronet_Engine() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual Cronet_RESULT StartWithParams(Cronet_EngineParamsPtr params) = 0;
-  virtual bool StartNetLogToFile(Cronet_String file_name, bool log_all) = 0;
-  virtual void StopNetLog() = 0;
-  virtual Cronet_RESULT Shutdown() = 0;
-  virtual Cronet_String GetVersionString() = 0;
-  virtual Cronet_String GetDefaultUserAgent() = 0;
-  virtual void AddRequestFinishedListener(
-      Cronet_RequestFinishedInfoListenerPtr listener,
-      Cronet_ExecutorPtr executor) = 0;
-  virtual void RemoveRequestFinishedListener(
-      Cronet_RequestFinishedInfoListenerPtr listener) = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-struct Cronet_UrlRequestStatusListener {
-  Cronet_UrlRequestStatusListener() = default;
-
-  Cronet_UrlRequestStatusListener(const Cronet_UrlRequestStatusListener&) =
-      delete;
-  Cronet_UrlRequestStatusListener& operator=(
-      const Cronet_UrlRequestStatusListener&) = delete;
-
-  virtual ~Cronet_UrlRequestStatusListener() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual void OnStatus(Cronet_UrlRequestStatusListener_Status status) = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-struct Cronet_UrlRequestCallback {
-  Cronet_UrlRequestCallback() = default;
-
-  Cronet_UrlRequestCallback(const Cronet_UrlRequestCallback&) = delete;
-  Cronet_UrlRequestCallback& operator=(const Cronet_UrlRequestCallback&) =
-      delete;
-
-  virtual ~Cronet_UrlRequestCallback() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual void OnRedirectReceived(Cronet_UrlRequestPtr request,
-                                  Cronet_UrlResponseInfoPtr info,
-                                  Cronet_String new_location_url) = 0;
-  virtual void OnResponseStarted(Cronet_UrlRequestPtr request,
-                                 Cronet_UrlResponseInfoPtr info) = 0;
-  virtual void OnReadCompleted(Cronet_UrlRequestPtr request,
-                               Cronet_UrlResponseInfoPtr info,
-                               Cronet_BufferPtr buffer,
-                               uint64_t bytes_read) = 0;
-  virtual void OnSucceeded(Cronet_UrlRequestPtr request,
-                           Cronet_UrlResponseInfoPtr info) = 0;
-  virtual void OnFailed(Cronet_UrlRequestPtr request,
-                        Cronet_UrlResponseInfoPtr info,
-                        Cronet_ErrorPtr error) = 0;
-  virtual void OnCanceled(Cronet_UrlRequestPtr request,
-                          Cronet_UrlResponseInfoPtr info) = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-struct Cronet_UploadDataSink {
-  Cronet_UploadDataSink() = default;
-
-  Cronet_UploadDataSink(const Cronet_UploadDataSink&) = delete;
-  Cronet_UploadDataSink& operator=(const Cronet_UploadDataSink&) = delete;
-
-  virtual ~Cronet_UploadDataSink() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual void OnReadSucceeded(uint64_t bytes_read, bool final_chunk) = 0;
-  virtual void OnReadError(Cronet_String error_message) = 0;
-  virtual void OnRewindSucceeded() = 0;
-  virtual void OnRewindError(Cronet_String error_message) = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-struct Cronet_UploadDataProvider {
-  Cronet_UploadDataProvider() = default;
-
-  Cronet_UploadDataProvider(const Cronet_UploadDataProvider&) = delete;
-  Cronet_UploadDataProvider& operator=(const Cronet_UploadDataProvider&) =
-      delete;
-
-  virtual ~Cronet_UploadDataProvider() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual int64_t GetLength() = 0;
-  virtual void Read(Cronet_UploadDataSinkPtr upload_data_sink,
-                    Cronet_BufferPtr buffer) = 0;
-  virtual void Rewind(Cronet_UploadDataSinkPtr upload_data_sink) = 0;
-  virtual void Close() = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-struct Cronet_UrlRequest {
-  Cronet_UrlRequest() = default;
-
-  Cronet_UrlRequest(const Cronet_UrlRequest&) = delete;
-  Cronet_UrlRequest& operator=(const Cronet_UrlRequest&) = delete;
-
-  virtual ~Cronet_UrlRequest() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual Cronet_RESULT InitWithParams(Cronet_EnginePtr engine,
-                                       Cronet_String url,
-                                       Cronet_UrlRequestParamsPtr params,
-                                       Cronet_UrlRequestCallbackPtr callback,
-                                       Cronet_ExecutorPtr executor) = 0;
-  virtual Cronet_RESULT Start() = 0;
-  virtual Cronet_RESULT FollowRedirect() = 0;
-  virtual Cronet_RESULT Read(Cronet_BufferPtr buffer) = 0;
-  virtual void Cancel() = 0;
-  virtual bool IsDone() = 0;
-  virtual void GetStatus(Cronet_UrlRequestStatusListenerPtr listener) = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-struct Cronet_RequestFinishedInfoListener {
-  Cronet_RequestFinishedInfoListener() = default;
-
-  Cronet_RequestFinishedInfoListener(
-      const Cronet_RequestFinishedInfoListener&) = delete;
-  Cronet_RequestFinishedInfoListener& operator=(
-      const Cronet_RequestFinishedInfoListener&) = delete;
-
-  virtual ~Cronet_RequestFinishedInfoListener() = default;
-
-  void set_client_context(Cronet_ClientContext client_context) {
-    client_context_ = client_context;
-  }
-  Cronet_ClientContext client_context() const { return client_context_; }
-
-  virtual void OnRequestFinished(Cronet_RequestFinishedInfoPtr request_info,
-                                 Cronet_UrlResponseInfoPtr response_info,
-                                 Cronet_ErrorPtr error) = 0;
-
- private:
-  Cronet_ClientContext client_context_ = nullptr;
-};
-
-#endif  // COMPONENTS_CRONET_NATIVE_GENERATED_CRONET_IDL_IMPL_INTERFACE_H_
diff --git a/components/cronet/native/generated/cronet.idl_impl_interface_unittest.cc b/components/cronet/native/generated/cronet.idl_impl_interface_unittest.cc
deleted file mode 100644
index 296c8cfac9032..0000000000000
--- a/components/cronet/native/generated/cronet.idl_impl_interface_unittest.cc
+++ /dev/null
@@ -1,849 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-/* DO NOT EDIT. Generated from components/cronet/native/generated/cronet.idl */
-
-#include "components/cronet/native/generated/cronet.idl_c.h"
-
-#include "base/check.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-// Test of Cronet_Buffer interface.
-class Cronet_BufferTest : public ::testing::Test {
- public:
-  Cronet_BufferTest(const Cronet_BufferTest&) = delete;
-  Cronet_BufferTest& operator=(const Cronet_BufferTest&) = delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_BufferTest() = default;
-  ~Cronet_BufferTest() override = default;
-
- public:
-  bool InitWithDataAndCallback_called_ = false;
-  bool InitWithAlloc_called_ = false;
-  bool GetSize_called_ = false;
-  bool GetData_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_Buffer methods for testing.
-void TestCronet_Buffer_InitWithDataAndCallback(
-    Cronet_BufferPtr self,
-    Cronet_RawDataPtr data,
-    uint64_t size,
-    Cronet_BufferCallbackPtr callback) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Buffer_GetClientContext(self);
-  auto* test = static_cast<Cronet_BufferTest*>(client_context);
-  CHECK(test);
-  test->InitWithDataAndCallback_called_ = true;
-}
-void TestCronet_Buffer_InitWithAlloc(Cronet_BufferPtr self, uint64_t size) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Buffer_GetClientContext(self);
-  auto* test = static_cast<Cronet_BufferTest*>(client_context);
-  CHECK(test);
-  test->InitWithAlloc_called_ = true;
-}
-uint64_t TestCronet_Buffer_GetSize(Cronet_BufferPtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Buffer_GetClientContext(self);
-  auto* test = static_cast<Cronet_BufferTest*>(client_context);
-  CHECK(test);
-  test->GetSize_called_ = true;
-
-  return static_cast<uint64_t>(0);
-}
-Cronet_RawDataPtr TestCronet_Buffer_GetData(Cronet_BufferPtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Buffer_GetClientContext(self);
-  auto* test = static_cast<Cronet_BufferTest*>(client_context);
-  CHECK(test);
-  test->GetData_called_ = true;
-
-  return static_cast<Cronet_RawDataPtr>(0);
-}
-}  // namespace
-
-// Test that Cronet_Buffer stub forwards function calls as expected.
-TEST_F(Cronet_BufferTest, TestCreate) {
-  Cronet_BufferPtr test = Cronet_Buffer_CreateWith(
-      TestCronet_Buffer_InitWithDataAndCallback,
-      TestCronet_Buffer_InitWithAlloc, TestCronet_Buffer_GetSize,
-      TestCronet_Buffer_GetData);
-  CHECK(test);
-  Cronet_Buffer_SetClientContext(test, this);
-  CHECK(!InitWithDataAndCallback_called_);
-  CHECK(!InitWithAlloc_called_);
-  Cronet_Buffer_GetSize(test);
-  CHECK(GetSize_called_);
-  Cronet_Buffer_GetData(test);
-  CHECK(GetData_called_);
-
-  Cronet_Buffer_Destroy(test);
-}
-
-// Test of Cronet_BufferCallback interface.
-class Cronet_BufferCallbackTest : public ::testing::Test {
- public:
-  Cronet_BufferCallbackTest(const Cronet_BufferCallbackTest&) = delete;
-  Cronet_BufferCallbackTest& operator=(const Cronet_BufferCallbackTest&) =
-      delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_BufferCallbackTest() = default;
-  ~Cronet_BufferCallbackTest() override = default;
-
- public:
-  bool OnDestroy_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_BufferCallback methods for testing.
-void TestCronet_BufferCallback_OnDestroy(Cronet_BufferCallbackPtr self,
-                                         Cronet_BufferPtr buffer) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_BufferCallback_GetClientContext(self);
-  auto* test = static_cast<Cronet_BufferCallbackTest*>(client_context);
-  CHECK(test);
-  test->OnDestroy_called_ = true;
-}
-}  // namespace
-
-// Test that Cronet_BufferCallback stub forwards function calls as expected.
-TEST_F(Cronet_BufferCallbackTest, TestCreate) {
-  Cronet_BufferCallbackPtr test =
-      Cronet_BufferCallback_CreateWith(TestCronet_BufferCallback_OnDestroy);
-  CHECK(test);
-  Cronet_BufferCallback_SetClientContext(test, this);
-  CHECK(!OnDestroy_called_);
-
-  Cronet_BufferCallback_Destroy(test);
-}
-
-// Test of Cronet_Runnable interface.
-class Cronet_RunnableTest : public ::testing::Test {
- public:
-  Cronet_RunnableTest(const Cronet_RunnableTest&) = delete;
-  Cronet_RunnableTest& operator=(const Cronet_RunnableTest&) = delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_RunnableTest() = default;
-  ~Cronet_RunnableTest() override = default;
-
- public:
-  bool Run_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_Runnable methods for testing.
-void TestCronet_Runnable_Run(Cronet_RunnablePtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Runnable_GetClientContext(self);
-  auto* test = static_cast<Cronet_RunnableTest*>(client_context);
-  CHECK(test);
-  test->Run_called_ = true;
-}
-}  // namespace
-
-// Test that Cronet_Runnable stub forwards function calls as expected.
-TEST_F(Cronet_RunnableTest, TestCreate) {
-  Cronet_RunnablePtr test = Cronet_Runnable_CreateWith(TestCronet_Runnable_Run);
-  CHECK(test);
-  Cronet_Runnable_SetClientContext(test, this);
-  Cronet_Runnable_Run(test);
-  CHECK(Run_called_);
-
-  Cronet_Runnable_Destroy(test);
-}
-
-// Test of Cronet_Executor interface.
-class Cronet_ExecutorTest : public ::testing::Test {
- public:
-  Cronet_ExecutorTest(const Cronet_ExecutorTest&) = delete;
-  Cronet_ExecutorTest& operator=(const Cronet_ExecutorTest&) = delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_ExecutorTest() = default;
-  ~Cronet_ExecutorTest() override = default;
-
- public:
-  bool Execute_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_Executor methods for testing.
-void TestCronet_Executor_Execute(Cronet_ExecutorPtr self,
-                                 Cronet_RunnablePtr command) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Executor_GetClientContext(self);
-  auto* test = static_cast<Cronet_ExecutorTest*>(client_context);
-  CHECK(test);
-  test->Execute_called_ = true;
-}
-}  // namespace
-
-// Test that Cronet_Executor stub forwards function calls as expected.
-TEST_F(Cronet_ExecutorTest, TestCreate) {
-  Cronet_ExecutorPtr test =
-      Cronet_Executor_CreateWith(TestCronet_Executor_Execute);
-  CHECK(test);
-  Cronet_Executor_SetClientContext(test, this);
-  CHECK(!Execute_called_);
-
-  Cronet_Executor_Destroy(test);
-}
-
-// Test of Cronet_Engine interface.
-class Cronet_EngineTest : public ::testing::Test {
- public:
-  Cronet_EngineTest(const Cronet_EngineTest&) = delete;
-  Cronet_EngineTest& operator=(const Cronet_EngineTest&) = delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_EngineTest() = default;
-  ~Cronet_EngineTest() override = default;
-
- public:
-  bool StartWithParams_called_ = false;
-  bool StartNetLogToFile_called_ = false;
-  bool StopNetLog_called_ = false;
-  bool Shutdown_called_ = false;
-  bool GetVersionString_called_ = false;
-  bool GetDefaultUserAgent_called_ = false;
-  bool AddRequestFinishedListener_called_ = false;
-  bool RemoveRequestFinishedListener_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_Engine methods for testing.
-Cronet_RESULT TestCronet_Engine_StartWithParams(Cronet_EnginePtr self,
-                                                Cronet_EngineParamsPtr params) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Engine_GetClientContext(self);
-  auto* test = static_cast<Cronet_EngineTest*>(client_context);
-  CHECK(test);
-  test->StartWithParams_called_ = true;
-
-  return static_cast<Cronet_RESULT>(0);
-}
-bool TestCronet_Engine_StartNetLogToFile(Cronet_EnginePtr self,
-                                         Cronet_String file_name,
-                                         bool log_all) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Engine_GetClientContext(self);
-  auto* test = static_cast<Cronet_EngineTest*>(client_context);
-  CHECK(test);
-  test->StartNetLogToFile_called_ = true;
-
-  return static_cast<bool>(0);
-}
-void TestCronet_Engine_StopNetLog(Cronet_EnginePtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Engine_GetClientContext(self);
-  auto* test = static_cast<Cronet_EngineTest*>(client_context);
-  CHECK(test);
-  test->StopNetLog_called_ = true;
-}
-Cronet_RESULT TestCronet_Engine_Shutdown(Cronet_EnginePtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Engine_GetClientContext(self);
-  auto* test = static_cast<Cronet_EngineTest*>(client_context);
-  CHECK(test);
-  test->Shutdown_called_ = true;
-
-  return static_cast<Cronet_RESULT>(0);
-}
-Cronet_String TestCronet_Engine_GetVersionString(Cronet_EnginePtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Engine_GetClientContext(self);
-  auto* test = static_cast<Cronet_EngineTest*>(client_context);
-  CHECK(test);
-  test->GetVersionString_called_ = true;
-
-  return static_cast<Cronet_String>(0);
-}
-Cronet_String TestCronet_Engine_GetDefaultUserAgent(Cronet_EnginePtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Engine_GetClientContext(self);
-  auto* test = static_cast<Cronet_EngineTest*>(client_context);
-  CHECK(test);
-  test->GetDefaultUserAgent_called_ = true;
-
-  return static_cast<Cronet_String>(0);
-}
-void TestCronet_Engine_AddRequestFinishedListener(
-    Cronet_EnginePtr self,
-    Cronet_RequestFinishedInfoListenerPtr listener,
-    Cronet_ExecutorPtr executor) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Engine_GetClientContext(self);
-  auto* test = static_cast<Cronet_EngineTest*>(client_context);
-  CHECK(test);
-  test->AddRequestFinishedListener_called_ = true;
-}
-void TestCronet_Engine_RemoveRequestFinishedListener(
-    Cronet_EnginePtr self,
-    Cronet_RequestFinishedInfoListenerPtr listener) {
-  CHECK(self);
-  Cronet_ClientContext client_context = Cronet_Engine_GetClientContext(self);
-  auto* test = static_cast<Cronet_EngineTest*>(client_context);
-  CHECK(test);
-  test->RemoveRequestFinishedListener_called_ = true;
-}
-}  // namespace
-
-// Test that Cronet_Engine stub forwards function calls as expected.
-TEST_F(Cronet_EngineTest, TestCreate) {
-  Cronet_EnginePtr test = Cronet_Engine_CreateWith(
-      TestCronet_Engine_StartWithParams, TestCronet_Engine_StartNetLogToFile,
-      TestCronet_Engine_StopNetLog, TestCronet_Engine_Shutdown,
-      TestCronet_Engine_GetVersionString, TestCronet_Engine_GetDefaultUserAgent,
-      TestCronet_Engine_AddRequestFinishedListener,
-      TestCronet_Engine_RemoveRequestFinishedListener);
-  CHECK(test);
-  Cronet_Engine_SetClientContext(test, this);
-  CHECK(!StartWithParams_called_);
-  CHECK(!StartNetLogToFile_called_);
-  Cronet_Engine_StopNetLog(test);
-  CHECK(StopNetLog_called_);
-  Cronet_Engine_Shutdown(test);
-  CHECK(Shutdown_called_);
-  Cronet_Engine_GetVersionString(test);
-  CHECK(GetVersionString_called_);
-  Cronet_Engine_GetDefaultUserAgent(test);
-  CHECK(GetDefaultUserAgent_called_);
-  CHECK(!AddRequestFinishedListener_called_);
-  CHECK(!RemoveRequestFinishedListener_called_);
-
-  Cronet_Engine_Destroy(test);
-}
-
-// Test of Cronet_UrlRequestStatusListener interface.
-class Cronet_UrlRequestStatusListenerTest : public ::testing::Test {
- public:
-  Cronet_UrlRequestStatusListenerTest(
-      const Cronet_UrlRequestStatusListenerTest&) = delete;
-  Cronet_UrlRequestStatusListenerTest& operator=(
-      const Cronet_UrlRequestStatusListenerTest&) = delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_UrlRequestStatusListenerTest() = default;
-  ~Cronet_UrlRequestStatusListenerTest() override = default;
-
- public:
-  bool OnStatus_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_UrlRequestStatusListener methods for testing.
-void TestCronet_UrlRequestStatusListener_OnStatus(
-    Cronet_UrlRequestStatusListenerPtr self,
-    Cronet_UrlRequestStatusListener_Status status) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequestStatusListener_GetClientContext(self);
-  auto* test =
-      static_cast<Cronet_UrlRequestStatusListenerTest*>(client_context);
-  CHECK(test);
-  test->OnStatus_called_ = true;
-}
-}  // namespace
-
-// Test that Cronet_UrlRequestStatusListener stub forwards function calls as
-// expected.
-TEST_F(Cronet_UrlRequestStatusListenerTest, TestCreate) {
-  Cronet_UrlRequestStatusListenerPtr test =
-      Cronet_UrlRequestStatusListener_CreateWith(
-          TestCronet_UrlRequestStatusListener_OnStatus);
-  CHECK(test);
-  Cronet_UrlRequestStatusListener_SetClientContext(test, this);
-  CHECK(!OnStatus_called_);
-
-  Cronet_UrlRequestStatusListener_Destroy(test);
-}
-
-// Test of Cronet_UrlRequestCallback interface.
-class Cronet_UrlRequestCallbackTest : public ::testing::Test {
- public:
-  Cronet_UrlRequestCallbackTest(const Cronet_UrlRequestCallbackTest&) = delete;
-  Cronet_UrlRequestCallbackTest& operator=(
-      const Cronet_UrlRequestCallbackTest&) = delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_UrlRequestCallbackTest() = default;
-  ~Cronet_UrlRequestCallbackTest() override = default;
-
- public:
-  bool OnRedirectReceived_called_ = false;
-  bool OnResponseStarted_called_ = false;
-  bool OnReadCompleted_called_ = false;
-  bool OnSucceeded_called_ = false;
-  bool OnFailed_called_ = false;
-  bool OnCanceled_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_UrlRequestCallback methods for testing.
-void TestCronet_UrlRequestCallback_OnRedirectReceived(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_String new_location_url) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequestCallback_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestCallbackTest*>(client_context);
-  CHECK(test);
-  test->OnRedirectReceived_called_ = true;
-}
-void TestCronet_UrlRequestCallback_OnResponseStarted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequestCallback_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestCallbackTest*>(client_context);
-  CHECK(test);
-  test->OnResponseStarted_called_ = true;
-}
-void TestCronet_UrlRequestCallback_OnReadCompleted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_BufferPtr buffer,
-    uint64_t bytes_read) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequestCallback_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestCallbackTest*>(client_context);
-  CHECK(test);
-  test->OnReadCompleted_called_ = true;
-}
-void TestCronet_UrlRequestCallback_OnSucceeded(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequestCallback_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestCallbackTest*>(client_context);
-  CHECK(test);
-  test->OnSucceeded_called_ = true;
-}
-void TestCronet_UrlRequestCallback_OnFailed(Cronet_UrlRequestCallbackPtr self,
-                                            Cronet_UrlRequestPtr request,
-                                            Cronet_UrlResponseInfoPtr info,
-                                            Cronet_ErrorPtr error) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequestCallback_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestCallbackTest*>(client_context);
-  CHECK(test);
-  test->OnFailed_called_ = true;
-}
-void TestCronet_UrlRequestCallback_OnCanceled(Cronet_UrlRequestCallbackPtr self,
-                                              Cronet_UrlRequestPtr request,
-                                              Cronet_UrlResponseInfoPtr info) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequestCallback_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestCallbackTest*>(client_context);
-  CHECK(test);
-  test->OnCanceled_called_ = true;
-}
-}  // namespace
-
-// Test that Cronet_UrlRequestCallback stub forwards function calls as expected.
-TEST_F(Cronet_UrlRequestCallbackTest, TestCreate) {
-  Cronet_UrlRequestCallbackPtr test = Cronet_UrlRequestCallback_CreateWith(
-      TestCronet_UrlRequestCallback_OnRedirectReceived,
-      TestCronet_UrlRequestCallback_OnResponseStarted,
-      TestCronet_UrlRequestCallback_OnReadCompleted,
-      TestCronet_UrlRequestCallback_OnSucceeded,
-      TestCronet_UrlRequestCallback_OnFailed,
-      TestCronet_UrlRequestCallback_OnCanceled);
-  CHECK(test);
-  Cronet_UrlRequestCallback_SetClientContext(test, this);
-  CHECK(!OnRedirectReceived_called_);
-  CHECK(!OnResponseStarted_called_);
-  CHECK(!OnReadCompleted_called_);
-  CHECK(!OnSucceeded_called_);
-  CHECK(!OnFailed_called_);
-  CHECK(!OnCanceled_called_);
-
-  Cronet_UrlRequestCallback_Destroy(test);
-}
-
-// Test of Cronet_UploadDataSink interface.
-class Cronet_UploadDataSinkTest : public ::testing::Test {
- public:
-  Cronet_UploadDataSinkTest(const Cronet_UploadDataSinkTest&) = delete;
-  Cronet_UploadDataSinkTest& operator=(const Cronet_UploadDataSinkTest&) =
-      delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_UploadDataSinkTest() = default;
-  ~Cronet_UploadDataSinkTest() override = default;
-
- public:
-  bool OnReadSucceeded_called_ = false;
-  bool OnReadError_called_ = false;
-  bool OnRewindSucceeded_called_ = false;
-  bool OnRewindError_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_UploadDataSink methods for testing.
-void TestCronet_UploadDataSink_OnReadSucceeded(Cronet_UploadDataSinkPtr self,
-                                               uint64_t bytes_read,
-                                               bool final_chunk) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UploadDataSink_GetClientContext(self);
-  auto* test = static_cast<Cronet_UploadDataSinkTest*>(client_context);
-  CHECK(test);
-  test->OnReadSucceeded_called_ = true;
-}
-void TestCronet_UploadDataSink_OnReadError(Cronet_UploadDataSinkPtr self,
-                                           Cronet_String error_message) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UploadDataSink_GetClientContext(self);
-  auto* test = static_cast<Cronet_UploadDataSinkTest*>(client_context);
-  CHECK(test);
-  test->OnReadError_called_ = true;
-}
-void TestCronet_UploadDataSink_OnRewindSucceeded(
-    Cronet_UploadDataSinkPtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UploadDataSink_GetClientContext(self);
-  auto* test = static_cast<Cronet_UploadDataSinkTest*>(client_context);
-  CHECK(test);
-  test->OnRewindSucceeded_called_ = true;
-}
-void TestCronet_UploadDataSink_OnRewindError(Cronet_UploadDataSinkPtr self,
-                                             Cronet_String error_message) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UploadDataSink_GetClientContext(self);
-  auto* test = static_cast<Cronet_UploadDataSinkTest*>(client_context);
-  CHECK(test);
-  test->OnRewindError_called_ = true;
-}
-}  // namespace
-
-// Test that Cronet_UploadDataSink stub forwards function calls as expected.
-TEST_F(Cronet_UploadDataSinkTest, TestCreate) {
-  Cronet_UploadDataSinkPtr test = Cronet_UploadDataSink_CreateWith(
-      TestCronet_UploadDataSink_OnReadSucceeded,
-      TestCronet_UploadDataSink_OnReadError,
-      TestCronet_UploadDataSink_OnRewindSucceeded,
-      TestCronet_UploadDataSink_OnRewindError);
-  CHECK(test);
-  Cronet_UploadDataSink_SetClientContext(test, this);
-  CHECK(!OnReadSucceeded_called_);
-  CHECK(!OnReadError_called_);
-  Cronet_UploadDataSink_OnRewindSucceeded(test);
-  CHECK(OnRewindSucceeded_called_);
-  CHECK(!OnRewindError_called_);
-
-  Cronet_UploadDataSink_Destroy(test);
-}
-
-// Test of Cronet_UploadDataProvider interface.
-class Cronet_UploadDataProviderTest : public ::testing::Test {
- public:
-  Cronet_UploadDataProviderTest(const Cronet_UploadDataProviderTest&) = delete;
-  Cronet_UploadDataProviderTest& operator=(
-      const Cronet_UploadDataProviderTest&) = delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_UploadDataProviderTest() = default;
-  ~Cronet_UploadDataProviderTest() override = default;
-
- public:
-  bool GetLength_called_ = false;
-  bool Read_called_ = false;
-  bool Rewind_called_ = false;
-  bool Close_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_UploadDataProvider methods for testing.
-int64_t TestCronet_UploadDataProvider_GetLength(
-    Cronet_UploadDataProviderPtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UploadDataProvider_GetClientContext(self);
-  auto* test = static_cast<Cronet_UploadDataProviderTest*>(client_context);
-  CHECK(test);
-  test->GetLength_called_ = true;
-
-  return static_cast<int64_t>(0);
-}
-void TestCronet_UploadDataProvider_Read(
-    Cronet_UploadDataProviderPtr self,
-    Cronet_UploadDataSinkPtr upload_data_sink,
-    Cronet_BufferPtr buffer) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UploadDataProvider_GetClientContext(self);
-  auto* test = static_cast<Cronet_UploadDataProviderTest*>(client_context);
-  CHECK(test);
-  test->Read_called_ = true;
-}
-void TestCronet_UploadDataProvider_Rewind(
-    Cronet_UploadDataProviderPtr self,
-    Cronet_UploadDataSinkPtr upload_data_sink) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UploadDataProvider_GetClientContext(self);
-  auto* test = static_cast<Cronet_UploadDataProviderTest*>(client_context);
-  CHECK(test);
-  test->Rewind_called_ = true;
-}
-void TestCronet_UploadDataProvider_Close(Cronet_UploadDataProviderPtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UploadDataProvider_GetClientContext(self);
-  auto* test = static_cast<Cronet_UploadDataProviderTest*>(client_context);
-  CHECK(test);
-  test->Close_called_ = true;
-}
-}  // namespace
-
-// Test that Cronet_UploadDataProvider stub forwards function calls as expected.
-TEST_F(Cronet_UploadDataProviderTest, TestCreate) {
-  Cronet_UploadDataProviderPtr test = Cronet_UploadDataProvider_CreateWith(
-      TestCronet_UploadDataProvider_GetLength,
-      TestCronet_UploadDataProvider_Read, TestCronet_UploadDataProvider_Rewind,
-      TestCronet_UploadDataProvider_Close);
-  CHECK(test);
-  Cronet_UploadDataProvider_SetClientContext(test, this);
-  Cronet_UploadDataProvider_GetLength(test);
-  CHECK(GetLength_called_);
-  CHECK(!Read_called_);
-  CHECK(!Rewind_called_);
-  Cronet_UploadDataProvider_Close(test);
-  CHECK(Close_called_);
-
-  Cronet_UploadDataProvider_Destroy(test);
-}
-
-// Test of Cronet_UrlRequest interface.
-class Cronet_UrlRequestTest : public ::testing::Test {
- public:
-  Cronet_UrlRequestTest(const Cronet_UrlRequestTest&) = delete;
-  Cronet_UrlRequestTest& operator=(const Cronet_UrlRequestTest&) = delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_UrlRequestTest() = default;
-  ~Cronet_UrlRequestTest() override = default;
-
- public:
-  bool InitWithParams_called_ = false;
-  bool Start_called_ = false;
-  bool FollowRedirect_called_ = false;
-  bool Read_called_ = false;
-  bool Cancel_called_ = false;
-  bool IsDone_called_ = false;
-  bool GetStatus_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_UrlRequest methods for testing.
-Cronet_RESULT TestCronet_UrlRequest_InitWithParams(
-    Cronet_UrlRequestPtr self,
-    Cronet_EnginePtr engine,
-    Cronet_String url,
-    Cronet_UrlRequestParamsPtr params,
-    Cronet_UrlRequestCallbackPtr callback,
-    Cronet_ExecutorPtr executor) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequest_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestTest*>(client_context);
-  CHECK(test);
-  test->InitWithParams_called_ = true;
-
-  return static_cast<Cronet_RESULT>(0);
-}
-Cronet_RESULT TestCronet_UrlRequest_Start(Cronet_UrlRequestPtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequest_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestTest*>(client_context);
-  CHECK(test);
-  test->Start_called_ = true;
-
-  return static_cast<Cronet_RESULT>(0);
-}
-Cronet_RESULT TestCronet_UrlRequest_FollowRedirect(Cronet_UrlRequestPtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequest_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestTest*>(client_context);
-  CHECK(test);
-  test->FollowRedirect_called_ = true;
-
-  return static_cast<Cronet_RESULT>(0);
-}
-Cronet_RESULT TestCronet_UrlRequest_Read(Cronet_UrlRequestPtr self,
-                                         Cronet_BufferPtr buffer) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequest_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestTest*>(client_context);
-  CHECK(test);
-  test->Read_called_ = true;
-
-  return static_cast<Cronet_RESULT>(0);
-}
-void TestCronet_UrlRequest_Cancel(Cronet_UrlRequestPtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequest_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestTest*>(client_context);
-  CHECK(test);
-  test->Cancel_called_ = true;
-}
-bool TestCronet_UrlRequest_IsDone(Cronet_UrlRequestPtr self) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequest_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestTest*>(client_context);
-  CHECK(test);
-  test->IsDone_called_ = true;
-
-  return static_cast<bool>(0);
-}
-void TestCronet_UrlRequest_GetStatus(
-    Cronet_UrlRequestPtr self,
-    Cronet_UrlRequestStatusListenerPtr listener) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_UrlRequest_GetClientContext(self);
-  auto* test = static_cast<Cronet_UrlRequestTest*>(client_context);
-  CHECK(test);
-  test->GetStatus_called_ = true;
-}
-}  // namespace
-
-// Test that Cronet_UrlRequest stub forwards function calls as expected.
-TEST_F(Cronet_UrlRequestTest, TestCreate) {
-  Cronet_UrlRequestPtr test = Cronet_UrlRequest_CreateWith(
-      TestCronet_UrlRequest_InitWithParams, TestCronet_UrlRequest_Start,
-      TestCronet_UrlRequest_FollowRedirect, TestCronet_UrlRequest_Read,
-      TestCronet_UrlRequest_Cancel, TestCronet_UrlRequest_IsDone,
-      TestCronet_UrlRequest_GetStatus);
-  CHECK(test);
-  Cronet_UrlRequest_SetClientContext(test, this);
-  CHECK(!InitWithParams_called_);
-  Cronet_UrlRequest_Start(test);
-  CHECK(Start_called_);
-  Cronet_UrlRequest_FollowRedirect(test);
-  CHECK(FollowRedirect_called_);
-  CHECK(!Read_called_);
-  Cronet_UrlRequest_Cancel(test);
-  CHECK(Cancel_called_);
-  Cronet_UrlRequest_IsDone(test);
-  CHECK(IsDone_called_);
-  CHECK(!GetStatus_called_);
-
-  Cronet_UrlRequest_Destroy(test);
-}
-
-// Test of Cronet_RequestFinishedInfoListener interface.
-class Cronet_RequestFinishedInfoListenerTest : public ::testing::Test {
- public:
-  Cronet_RequestFinishedInfoListenerTest(
-      const Cronet_RequestFinishedInfoListenerTest&) = delete;
-  Cronet_RequestFinishedInfoListenerTest& operator=(
-      const Cronet_RequestFinishedInfoListenerTest&) = delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  Cronet_RequestFinishedInfoListenerTest() = default;
-  ~Cronet_RequestFinishedInfoListenerTest() override = default;
-
- public:
-  bool OnRequestFinished_called_ = false;
-};
-
-namespace {
-// Implementation of Cronet_RequestFinishedInfoListener methods for testing.
-void TestCronet_RequestFinishedInfoListener_OnRequestFinished(
-    Cronet_RequestFinishedInfoListenerPtr self,
-    Cronet_RequestFinishedInfoPtr request_info,
-    Cronet_UrlResponseInfoPtr response_info,
-    Cronet_ErrorPtr error) {
-  CHECK(self);
-  Cronet_ClientContext client_context =
-      Cronet_RequestFinishedInfoListener_GetClientContext(self);
-  auto* test =
-      static_cast<Cronet_RequestFinishedInfoListenerTest*>(client_context);
-  CHECK(test);
-  test->OnRequestFinished_called_ = true;
-}
-}  // namespace
-
-// Test that Cronet_RequestFinishedInfoListener stub forwards function calls as
-// expected.
-TEST_F(Cronet_RequestFinishedInfoListenerTest, TestCreate) {
-  Cronet_RequestFinishedInfoListenerPtr test =
-      Cronet_RequestFinishedInfoListener_CreateWith(
-          TestCronet_RequestFinishedInfoListener_OnRequestFinished);
-  CHECK(test);
-  Cronet_RequestFinishedInfoListener_SetClientContext(test, this);
-  CHECK(!OnRequestFinished_called_);
-
-  Cronet_RequestFinishedInfoListener_Destroy(test);
-}
diff --git a/components/cronet/native/generated/cronet.idl_impl_struct.cc b/components/cronet/native/generated/cronet.idl_impl_struct.cc
deleted file mode 100644
index 61667e399148b..0000000000000
--- a/components/cronet/native/generated/cronet.idl_impl_struct.cc
+++ /dev/null
@@ -1,1273 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-/* DO NOT EDIT. Generated from components/cronet/native/generated/cronet.idl */
-
-#include "components/cronet/native/generated/cronet.idl_impl_struct.h"
-
-#include <utility>
-
-#include "base/check.h"
-
-// Struct Cronet_Error.
-Cronet_Error::Cronet_Error() = default;
-
-Cronet_Error::Cronet_Error(const Cronet_Error& from) = default;
-
-Cronet_Error::Cronet_Error(Cronet_Error&& from) = default;
-
-Cronet_Error::~Cronet_Error() = default;
-
-Cronet_ErrorPtr Cronet_Error_Create() {
-  return new Cronet_Error();
-}
-
-void Cronet_Error_Destroy(Cronet_ErrorPtr self) {
-  delete self;
-}
-
-// Struct Cronet_Error setters.
-void Cronet_Error_error_code_set(Cronet_ErrorPtr self,
-                                 const Cronet_Error_ERROR_CODE error_code) {
-  DCHECK(self);
-  self->error_code = error_code;
-}
-
-void Cronet_Error_message_set(Cronet_ErrorPtr self,
-                              const Cronet_String message) {
-  DCHECK(self);
-  self->message = message;
-}
-
-void Cronet_Error_internal_error_code_set(Cronet_ErrorPtr self,
-                                          const int32_t internal_error_code) {
-  DCHECK(self);
-  self->internal_error_code = internal_error_code;
-}
-
-void Cronet_Error_immediately_retryable_set(Cronet_ErrorPtr self,
-                                            const bool immediately_retryable) {
-  DCHECK(self);
-  self->immediately_retryable = immediately_retryable;
-}
-
-void Cronet_Error_quic_detailed_error_code_set(
-    Cronet_ErrorPtr self,
-    const int32_t quic_detailed_error_code) {
-  DCHECK(self);
-  self->quic_detailed_error_code = quic_detailed_error_code;
-}
-
-// Struct Cronet_Error getters.
-Cronet_Error_ERROR_CODE Cronet_Error_error_code_get(
-    const Cronet_ErrorPtr self) {
-  DCHECK(self);
-  return self->error_code;
-}
-
-Cronet_String Cronet_Error_message_get(const Cronet_ErrorPtr self) {
-  DCHECK(self);
-  return self->message.c_str();
-}
-
-int32_t Cronet_Error_internal_error_code_get(const Cronet_ErrorPtr self) {
-  DCHECK(self);
-  return self->internal_error_code;
-}
-
-bool Cronet_Error_immediately_retryable_get(const Cronet_ErrorPtr self) {
-  DCHECK(self);
-  return self->immediately_retryable;
-}
-
-int32_t Cronet_Error_quic_detailed_error_code_get(const Cronet_ErrorPtr self) {
-  DCHECK(self);
-  return self->quic_detailed_error_code;
-}
-
-// Struct Cronet_QuicHint.
-Cronet_QuicHint::Cronet_QuicHint() = default;
-
-Cronet_QuicHint::Cronet_QuicHint(const Cronet_QuicHint& from) = default;
-
-Cronet_QuicHint::Cronet_QuicHint(Cronet_QuicHint&& from) = default;
-
-Cronet_QuicHint::~Cronet_QuicHint() = default;
-
-Cronet_QuicHintPtr Cronet_QuicHint_Create() {
-  return new Cronet_QuicHint();
-}
-
-void Cronet_QuicHint_Destroy(Cronet_QuicHintPtr self) {
-  delete self;
-}
-
-// Struct Cronet_QuicHint setters.
-void Cronet_QuicHint_host_set(Cronet_QuicHintPtr self,
-                              const Cronet_String host) {
-  DCHECK(self);
-  self->host = host;
-}
-
-void Cronet_QuicHint_port_set(Cronet_QuicHintPtr self, const int32_t port) {
-  DCHECK(self);
-  self->port = port;
-}
-
-void Cronet_QuicHint_alternate_port_set(Cronet_QuicHintPtr self,
-                                        const int32_t alternate_port) {
-  DCHECK(self);
-  self->alternate_port = alternate_port;
-}
-
-// Struct Cronet_QuicHint getters.
-Cronet_String Cronet_QuicHint_host_get(const Cronet_QuicHintPtr self) {
-  DCHECK(self);
-  return self->host.c_str();
-}
-
-int32_t Cronet_QuicHint_port_get(const Cronet_QuicHintPtr self) {
-  DCHECK(self);
-  return self->port;
-}
-
-int32_t Cronet_QuicHint_alternate_port_get(const Cronet_QuicHintPtr self) {
-  DCHECK(self);
-  return self->alternate_port;
-}
-
-// Struct Cronet_PublicKeyPins.
-Cronet_PublicKeyPins::Cronet_PublicKeyPins() = default;
-
-Cronet_PublicKeyPins::Cronet_PublicKeyPins(const Cronet_PublicKeyPins& from) =
-    default;
-
-Cronet_PublicKeyPins::Cronet_PublicKeyPins(Cronet_PublicKeyPins&& from) =
-    default;
-
-Cronet_PublicKeyPins::~Cronet_PublicKeyPins() = default;
-
-Cronet_PublicKeyPinsPtr Cronet_PublicKeyPins_Create() {
-  return new Cronet_PublicKeyPins();
-}
-
-void Cronet_PublicKeyPins_Destroy(Cronet_PublicKeyPinsPtr self) {
-  delete self;
-}
-
-// Struct Cronet_PublicKeyPins setters.
-void Cronet_PublicKeyPins_host_set(Cronet_PublicKeyPinsPtr self,
-                                   const Cronet_String host) {
-  DCHECK(self);
-  self->host = host;
-}
-
-void Cronet_PublicKeyPins_pins_sha256_add(Cronet_PublicKeyPinsPtr self,
-                                          const Cronet_String element) {
-  DCHECK(self);
-  self->pins_sha256.push_back(element);
-}
-
-void Cronet_PublicKeyPins_include_subdomains_set(
-    Cronet_PublicKeyPinsPtr self,
-    const bool include_subdomains) {
-  DCHECK(self);
-  self->include_subdomains = include_subdomains;
-}
-
-void Cronet_PublicKeyPins_expiration_date_set(Cronet_PublicKeyPinsPtr self,
-                                              const int64_t expiration_date) {
-  DCHECK(self);
-  self->expiration_date = expiration_date;
-}
-
-// Struct Cronet_PublicKeyPins getters.
-Cronet_String Cronet_PublicKeyPins_host_get(
-    const Cronet_PublicKeyPinsPtr self) {
-  DCHECK(self);
-  return self->host.c_str();
-}
-
-uint32_t Cronet_PublicKeyPins_pins_sha256_size(Cronet_PublicKeyPinsPtr self) {
-  DCHECK(self);
-  return self->pins_sha256.size();
-}
-Cronet_String Cronet_PublicKeyPins_pins_sha256_at(
-    const Cronet_PublicKeyPinsPtr self,
-    uint32_t index) {
-  DCHECK(self);
-  DCHECK(index < self->pins_sha256.size());
-  return self->pins_sha256[index].c_str();
-}
-void Cronet_PublicKeyPins_pins_sha256_clear(Cronet_PublicKeyPinsPtr self) {
-  DCHECK(self);
-  self->pins_sha256.clear();
-}
-
-bool Cronet_PublicKeyPins_include_subdomains_get(
-    const Cronet_PublicKeyPinsPtr self) {
-  DCHECK(self);
-  return self->include_subdomains;
-}
-
-int64_t Cronet_PublicKeyPins_expiration_date_get(
-    const Cronet_PublicKeyPinsPtr self) {
-  DCHECK(self);
-  return self->expiration_date;
-}
-
-// Struct Cronet_EngineParams.
-Cronet_EngineParams::Cronet_EngineParams() = default;
-
-Cronet_EngineParams::Cronet_EngineParams(const Cronet_EngineParams& from) =
-    default;
-
-Cronet_EngineParams::Cronet_EngineParams(Cronet_EngineParams&& from) = default;
-
-Cronet_EngineParams::~Cronet_EngineParams() = default;
-
-Cronet_EngineParamsPtr Cronet_EngineParams_Create() {
-  return new Cronet_EngineParams();
-}
-
-void Cronet_EngineParams_Destroy(Cronet_EngineParamsPtr self) {
-  delete self;
-}
-
-// Struct Cronet_EngineParams setters.
-void Cronet_EngineParams_enable_check_result_set(
-    Cronet_EngineParamsPtr self,
-    const bool enable_check_result) {
-  DCHECK(self);
-  self->enable_check_result = enable_check_result;
-}
-
-void Cronet_EngineParams_user_agent_set(Cronet_EngineParamsPtr self,
-                                        const Cronet_String user_agent) {
-  DCHECK(self);
-  self->user_agent = user_agent;
-}
-
-void Cronet_EngineParams_accept_language_set(
-    Cronet_EngineParamsPtr self,
-    const Cronet_String accept_language) {
-  DCHECK(self);
-  self->accept_language = accept_language;
-}
-
-void Cronet_EngineParams_storage_path_set(Cronet_EngineParamsPtr self,
-                                          const Cronet_String storage_path) {
-  DCHECK(self);
-  self->storage_path = storage_path;
-}
-
-void Cronet_EngineParams_enable_quic_set(Cronet_EngineParamsPtr self,
-                                         const bool enable_quic) {
-  DCHECK(self);
-  self->enable_quic = enable_quic;
-}
-
-void Cronet_EngineParams_enable_http2_set(Cronet_EngineParamsPtr self,
-                                          const bool enable_http2) {
-  DCHECK(self);
-  self->enable_http2 = enable_http2;
-}
-
-void Cronet_EngineParams_enable_brotli_set(Cronet_EngineParamsPtr self,
-                                           const bool enable_brotli) {
-  DCHECK(self);
-  self->enable_brotli = enable_brotli;
-}
-
-void Cronet_EngineParams_http_cache_mode_set(
-    Cronet_EngineParamsPtr self,
-    const Cronet_EngineParams_HTTP_CACHE_MODE http_cache_mode) {
-  DCHECK(self);
-  self->http_cache_mode = http_cache_mode;
-}
-
-void Cronet_EngineParams_http_cache_max_size_set(
-    Cronet_EngineParamsPtr self,
-    const int64_t http_cache_max_size) {
-  DCHECK(self);
-  self->http_cache_max_size = http_cache_max_size;
-}
-
-void Cronet_EngineParams_quic_hints_add(Cronet_EngineParamsPtr self,
-                                        const Cronet_QuicHintPtr element) {
-  DCHECK(self);
-  self->quic_hints.push_back(*element);
-}
-
-void Cronet_EngineParams_public_key_pins_add(
-    Cronet_EngineParamsPtr self,
-    const Cronet_PublicKeyPinsPtr element) {
-  DCHECK(self);
-  self->public_key_pins.push_back(*element);
-}
-
-void Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set(
-    Cronet_EngineParamsPtr self,
-    const bool enable_public_key_pinning_bypass_for_local_trust_anchors) {
-  DCHECK(self);
-  self->enable_public_key_pinning_bypass_for_local_trust_anchors =
-      enable_public_key_pinning_bypass_for_local_trust_anchors;
-}
-
-void Cronet_EngineParams_network_thread_priority_set(
-    Cronet_EngineParamsPtr self,
-    const double network_thread_priority) {
-  DCHECK(self);
-  self->network_thread_priority = network_thread_priority;
-}
-
-void Cronet_EngineParams_experimental_options_set(
-    Cronet_EngineParamsPtr self,
-    const Cronet_String experimental_options) {
-  DCHECK(self);
-  self->experimental_options = experimental_options;
-}
-
-// Struct Cronet_EngineParams getters.
-bool Cronet_EngineParams_enable_check_result_get(
-    const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->enable_check_result;
-}
-
-Cronet_String Cronet_EngineParams_user_agent_get(
-    const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->user_agent.c_str();
-}
-
-Cronet_String Cronet_EngineParams_accept_language_get(
-    const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->accept_language.c_str();
-}
-
-Cronet_String Cronet_EngineParams_storage_path_get(
-    const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->storage_path.c_str();
-}
-
-bool Cronet_EngineParams_enable_quic_get(const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->enable_quic;
-}
-
-bool Cronet_EngineParams_enable_http2_get(const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->enable_http2;
-}
-
-bool Cronet_EngineParams_enable_brotli_get(const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->enable_brotli;
-}
-
-Cronet_EngineParams_HTTP_CACHE_MODE Cronet_EngineParams_http_cache_mode_get(
-    const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->http_cache_mode;
-}
-
-int64_t Cronet_EngineParams_http_cache_max_size_get(
-    const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->http_cache_max_size;
-}
-
-uint32_t Cronet_EngineParams_quic_hints_size(Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->quic_hints.size();
-}
-Cronet_QuicHintPtr Cronet_EngineParams_quic_hints_at(
-    const Cronet_EngineParamsPtr self,
-    uint32_t index) {
-  DCHECK(self);
-  DCHECK(index < self->quic_hints.size());
-  return &(self->quic_hints[index]);
-}
-void Cronet_EngineParams_quic_hints_clear(Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  self->quic_hints.clear();
-}
-
-uint32_t Cronet_EngineParams_public_key_pins_size(Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->public_key_pins.size();
-}
-Cronet_PublicKeyPinsPtr Cronet_EngineParams_public_key_pins_at(
-    const Cronet_EngineParamsPtr self,
-    uint32_t index) {
-  DCHECK(self);
-  DCHECK(index < self->public_key_pins.size());
-  return &(self->public_key_pins[index]);
-}
-void Cronet_EngineParams_public_key_pins_clear(Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  self->public_key_pins.clear();
-}
-
-bool Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get(
-    const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->enable_public_key_pinning_bypass_for_local_trust_anchors;
-}
-
-double Cronet_EngineParams_network_thread_priority_get(
-    const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->network_thread_priority;
-}
-
-Cronet_String Cronet_EngineParams_experimental_options_get(
-    const Cronet_EngineParamsPtr self) {
-  DCHECK(self);
-  return self->experimental_options.c_str();
-}
-
-// Struct Cronet_HttpHeader.
-Cronet_HttpHeader::Cronet_HttpHeader() = default;
-
-Cronet_HttpHeader::Cronet_HttpHeader(const Cronet_HttpHeader& from) = default;
-
-Cronet_HttpHeader::Cronet_HttpHeader(Cronet_HttpHeader&& from) = default;
-
-Cronet_HttpHeader::~Cronet_HttpHeader() = default;
-
-Cronet_HttpHeaderPtr Cronet_HttpHeader_Create() {
-  return new Cronet_HttpHeader();
-}
-
-void Cronet_HttpHeader_Destroy(Cronet_HttpHeaderPtr self) {
-  delete self;
-}
-
-// Struct Cronet_HttpHeader setters.
-void Cronet_HttpHeader_name_set(Cronet_HttpHeaderPtr self,
-                                const Cronet_String name) {
-  DCHECK(self);
-  self->name = name;
-}
-
-void Cronet_HttpHeader_value_set(Cronet_HttpHeaderPtr self,
-                                 const Cronet_String value) {
-  DCHECK(self);
-  self->value = value;
-}
-
-// Struct Cronet_HttpHeader getters.
-Cronet_String Cronet_HttpHeader_name_get(const Cronet_HttpHeaderPtr self) {
-  DCHECK(self);
-  return self->name.c_str();
-}
-
-Cronet_String Cronet_HttpHeader_value_get(const Cronet_HttpHeaderPtr self) {
-  DCHECK(self);
-  return self->value.c_str();
-}
-
-// Struct Cronet_UrlResponseInfo.
-Cronet_UrlResponseInfo::Cronet_UrlResponseInfo() = default;
-
-Cronet_UrlResponseInfo::Cronet_UrlResponseInfo(
-    const Cronet_UrlResponseInfo& from) = default;
-
-Cronet_UrlResponseInfo::Cronet_UrlResponseInfo(Cronet_UrlResponseInfo&& from) =
-    default;
-
-Cronet_UrlResponseInfo::~Cronet_UrlResponseInfo() = default;
-
-Cronet_UrlResponseInfoPtr Cronet_UrlResponseInfo_Create() {
-  return new Cronet_UrlResponseInfo();
-}
-
-void Cronet_UrlResponseInfo_Destroy(Cronet_UrlResponseInfoPtr self) {
-  delete self;
-}
-
-// Struct Cronet_UrlResponseInfo setters.
-void Cronet_UrlResponseInfo_url_set(Cronet_UrlResponseInfoPtr self,
-                                    const Cronet_String url) {
-  DCHECK(self);
-  self->url = url;
-}
-
-void Cronet_UrlResponseInfo_url_chain_add(Cronet_UrlResponseInfoPtr self,
-                                          const Cronet_String element) {
-  DCHECK(self);
-  self->url_chain.push_back(element);
-}
-
-void Cronet_UrlResponseInfo_http_status_code_set(
-    Cronet_UrlResponseInfoPtr self,
-    const int32_t http_status_code) {
-  DCHECK(self);
-  self->http_status_code = http_status_code;
-}
-
-void Cronet_UrlResponseInfo_http_status_text_set(
-    Cronet_UrlResponseInfoPtr self,
-    const Cronet_String http_status_text) {
-  DCHECK(self);
-  self->http_status_text = http_status_text;
-}
-
-void Cronet_UrlResponseInfo_all_headers_list_add(
-    Cronet_UrlResponseInfoPtr self,
-    const Cronet_HttpHeaderPtr element) {
-  DCHECK(self);
-  self->all_headers_list.push_back(*element);
-}
-
-void Cronet_UrlResponseInfo_was_cached_set(Cronet_UrlResponseInfoPtr self,
-                                           const bool was_cached) {
-  DCHECK(self);
-  self->was_cached = was_cached;
-}
-
-void Cronet_UrlResponseInfo_negotiated_protocol_set(
-    Cronet_UrlResponseInfoPtr self,
-    const Cronet_String negotiated_protocol) {
-  DCHECK(self);
-  self->negotiated_protocol = negotiated_protocol;
-}
-
-void Cronet_UrlResponseInfo_proxy_server_set(Cronet_UrlResponseInfoPtr self,
-                                             const Cronet_String proxy_server) {
-  DCHECK(self);
-  self->proxy_server = proxy_server;
-}
-
-void Cronet_UrlResponseInfo_received_byte_count_set(
-    Cronet_UrlResponseInfoPtr self,
-    const int64_t received_byte_count) {
-  DCHECK(self);
-  self->received_byte_count = received_byte_count;
-}
-
-// Struct Cronet_UrlResponseInfo getters.
-Cronet_String Cronet_UrlResponseInfo_url_get(
-    const Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  return self->url.c_str();
-}
-
-uint32_t Cronet_UrlResponseInfo_url_chain_size(Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  return self->url_chain.size();
-}
-Cronet_String Cronet_UrlResponseInfo_url_chain_at(
-    const Cronet_UrlResponseInfoPtr self,
-    uint32_t index) {
-  DCHECK(self);
-  DCHECK(index < self->url_chain.size());
-  return self->url_chain[index].c_str();
-}
-void Cronet_UrlResponseInfo_url_chain_clear(Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  self->url_chain.clear();
-}
-
-int32_t Cronet_UrlResponseInfo_http_status_code_get(
-    const Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  return self->http_status_code;
-}
-
-Cronet_String Cronet_UrlResponseInfo_http_status_text_get(
-    const Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  return self->http_status_text.c_str();
-}
-
-uint32_t Cronet_UrlResponseInfo_all_headers_list_size(
-    Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  return self->all_headers_list.size();
-}
-Cronet_HttpHeaderPtr Cronet_UrlResponseInfo_all_headers_list_at(
-    const Cronet_UrlResponseInfoPtr self,
-    uint32_t index) {
-  DCHECK(self);
-  DCHECK(index < self->all_headers_list.size());
-  return &(self->all_headers_list[index]);
-}
-void Cronet_UrlResponseInfo_all_headers_list_clear(
-    Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  self->all_headers_list.clear();
-}
-
-bool Cronet_UrlResponseInfo_was_cached_get(
-    const Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  return self->was_cached;
-}
-
-Cronet_String Cronet_UrlResponseInfo_negotiated_protocol_get(
-    const Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  return self->negotiated_protocol.c_str();
-}
-
-Cronet_String Cronet_UrlResponseInfo_proxy_server_get(
-    const Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  return self->proxy_server.c_str();
-}
-
-int64_t Cronet_UrlResponseInfo_received_byte_count_get(
-    const Cronet_UrlResponseInfoPtr self) {
-  DCHECK(self);
-  return self->received_byte_count;
-}
-
-// Struct Cronet_UrlRequestParams.
-Cronet_UrlRequestParams::Cronet_UrlRequestParams() = default;
-
-Cronet_UrlRequestParams::Cronet_UrlRequestParams(
-    const Cronet_UrlRequestParams& from) = default;
-
-Cronet_UrlRequestParams::Cronet_UrlRequestParams(
-    Cronet_UrlRequestParams&& from) = default;
-
-Cronet_UrlRequestParams::~Cronet_UrlRequestParams() = default;
-
-Cronet_UrlRequestParamsPtr Cronet_UrlRequestParams_Create() {
-  return new Cronet_UrlRequestParams();
-}
-
-void Cronet_UrlRequestParams_Destroy(Cronet_UrlRequestParamsPtr self) {
-  delete self;
-}
-
-// Struct Cronet_UrlRequestParams setters.
-void Cronet_UrlRequestParams_http_method_set(Cronet_UrlRequestParamsPtr self,
-                                             const Cronet_String http_method) {
-  DCHECK(self);
-  self->http_method = http_method;
-}
-
-void Cronet_UrlRequestParams_request_headers_add(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_HttpHeaderPtr element) {
-  DCHECK(self);
-  self->request_headers.push_back(*element);
-}
-
-void Cronet_UrlRequestParams_disable_cache_set(Cronet_UrlRequestParamsPtr self,
-                                               const bool disable_cache) {
-  DCHECK(self);
-  self->disable_cache = disable_cache;
-}
-
-void Cronet_UrlRequestParams_priority_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_UrlRequestParams_REQUEST_PRIORITY priority) {
-  DCHECK(self);
-  self->priority = priority;
-}
-
-void Cronet_UrlRequestParams_upload_data_provider_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_UploadDataProviderPtr upload_data_provider) {
-  DCHECK(self);
-  self->upload_data_provider = upload_data_provider;
-}
-
-void Cronet_UrlRequestParams_upload_data_provider_executor_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_ExecutorPtr upload_data_provider_executor) {
-  DCHECK(self);
-  self->upload_data_provider_executor = upload_data_provider_executor;
-}
-
-void Cronet_UrlRequestParams_allow_direct_executor_set(
-    Cronet_UrlRequestParamsPtr self,
-    const bool allow_direct_executor) {
-  DCHECK(self);
-  self->allow_direct_executor = allow_direct_executor;
-}
-
-void Cronet_UrlRequestParams_annotations_add(Cronet_UrlRequestParamsPtr self,
-                                             const Cronet_RawDataPtr element) {
-  DCHECK(self);
-  self->annotations.push_back(element);
-}
-
-void Cronet_UrlRequestParams_request_finished_listener_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_RequestFinishedInfoListenerPtr request_finished_listener) {
-  DCHECK(self);
-  self->request_finished_listener = request_finished_listener;
-}
-
-void Cronet_UrlRequestParams_request_finished_executor_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_ExecutorPtr request_finished_executor) {
-  DCHECK(self);
-  self->request_finished_executor = request_finished_executor;
-}
-
-void Cronet_UrlRequestParams_idempotency_set(
-    Cronet_UrlRequestParamsPtr self,
-    const Cronet_UrlRequestParams_IDEMPOTENCY idempotency) {
-  DCHECK(self);
-  self->idempotency = idempotency;
-}
-
-// Struct Cronet_UrlRequestParams getters.
-Cronet_String Cronet_UrlRequestParams_http_method_get(
-    const Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->http_method.c_str();
-}
-
-uint32_t Cronet_UrlRequestParams_request_headers_size(
-    Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->request_headers.size();
-}
-Cronet_HttpHeaderPtr Cronet_UrlRequestParams_request_headers_at(
-    const Cronet_UrlRequestParamsPtr self,
-    uint32_t index) {
-  DCHECK(self);
-  DCHECK(index < self->request_headers.size());
-  return &(self->request_headers[index]);
-}
-void Cronet_UrlRequestParams_request_headers_clear(
-    Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  self->request_headers.clear();
-}
-
-bool Cronet_UrlRequestParams_disable_cache_get(
-    const Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->disable_cache;
-}
-
-Cronet_UrlRequestParams_REQUEST_PRIORITY Cronet_UrlRequestParams_priority_get(
-    const Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->priority;
-}
-
-Cronet_UploadDataProviderPtr Cronet_UrlRequestParams_upload_data_provider_get(
-    const Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->upload_data_provider;
-}
-
-Cronet_ExecutorPtr Cronet_UrlRequestParams_upload_data_provider_executor_get(
-    const Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->upload_data_provider_executor;
-}
-
-bool Cronet_UrlRequestParams_allow_direct_executor_get(
-    const Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->allow_direct_executor;
-}
-
-uint32_t Cronet_UrlRequestParams_annotations_size(
-    Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->annotations.size();
-}
-Cronet_RawDataPtr Cronet_UrlRequestParams_annotations_at(
-    const Cronet_UrlRequestParamsPtr self,
-    uint32_t index) {
-  DCHECK(self);
-  DCHECK(index < self->annotations.size());
-  return self->annotations[index];
-}
-void Cronet_UrlRequestParams_annotations_clear(
-    Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  self->annotations.clear();
-}
-
-Cronet_RequestFinishedInfoListenerPtr
-Cronet_UrlRequestParams_request_finished_listener_get(
-    const Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->request_finished_listener;
-}
-
-Cronet_ExecutorPtr Cronet_UrlRequestParams_request_finished_executor_get(
-    const Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->request_finished_executor;
-}
-
-Cronet_UrlRequestParams_IDEMPOTENCY Cronet_UrlRequestParams_idempotency_get(
-    const Cronet_UrlRequestParamsPtr self) {
-  DCHECK(self);
-  return self->idempotency;
-}
-
-// Struct Cronet_DateTime.
-Cronet_DateTime::Cronet_DateTime() = default;
-
-Cronet_DateTime::Cronet_DateTime(const Cronet_DateTime& from) = default;
-
-Cronet_DateTime::Cronet_DateTime(Cronet_DateTime&& from) = default;
-
-Cronet_DateTime::~Cronet_DateTime() = default;
-
-Cronet_DateTimePtr Cronet_DateTime_Create() {
-  return new Cronet_DateTime();
-}
-
-void Cronet_DateTime_Destroy(Cronet_DateTimePtr self) {
-  delete self;
-}
-
-// Struct Cronet_DateTime setters.
-void Cronet_DateTime_value_set(Cronet_DateTimePtr self, const int64_t value) {
-  DCHECK(self);
-  self->value = value;
-}
-
-// Struct Cronet_DateTime getters.
-int64_t Cronet_DateTime_value_get(const Cronet_DateTimePtr self) {
-  DCHECK(self);
-  return self->value;
-}
-
-// Struct Cronet_Metrics.
-Cronet_Metrics::Cronet_Metrics() = default;
-
-Cronet_Metrics::Cronet_Metrics(const Cronet_Metrics& from) = default;
-
-Cronet_Metrics::Cronet_Metrics(Cronet_Metrics&& from) = default;
-
-Cronet_Metrics::~Cronet_Metrics() = default;
-
-Cronet_MetricsPtr Cronet_Metrics_Create() {
-  return new Cronet_Metrics();
-}
-
-void Cronet_Metrics_Destroy(Cronet_MetricsPtr self) {
-  delete self;
-}
-
-// Struct Cronet_Metrics setters.
-void Cronet_Metrics_request_start_set(Cronet_MetricsPtr self,
-                                      const Cronet_DateTimePtr request_start) {
-  DCHECK(self);
-  self->request_start.reset();
-  if (request_start != nullptr)
-    self->request_start.emplace(*request_start);
-}
-void Cronet_Metrics_request_start_move(Cronet_MetricsPtr self,
-                                       Cronet_DateTimePtr request_start) {
-  DCHECK(self);
-  self->request_start.reset();
-  if (request_start != nullptr)
-    self->request_start.emplace(std::move(*request_start));
-}
-
-void Cronet_Metrics_dns_start_set(Cronet_MetricsPtr self,
-                                  const Cronet_DateTimePtr dns_start) {
-  DCHECK(self);
-  self->dns_start.reset();
-  if (dns_start != nullptr)
-    self->dns_start.emplace(*dns_start);
-}
-void Cronet_Metrics_dns_start_move(Cronet_MetricsPtr self,
-                                   Cronet_DateTimePtr dns_start) {
-  DCHECK(self);
-  self->dns_start.reset();
-  if (dns_start != nullptr)
-    self->dns_start.emplace(std::move(*dns_start));
-}
-
-void Cronet_Metrics_dns_end_set(Cronet_MetricsPtr self,
-                                const Cronet_DateTimePtr dns_end) {
-  DCHECK(self);
-  self->dns_end.reset();
-  if (dns_end != nullptr)
-    self->dns_end.emplace(*dns_end);
-}
-void Cronet_Metrics_dns_end_move(Cronet_MetricsPtr self,
-                                 Cronet_DateTimePtr dns_end) {
-  DCHECK(self);
-  self->dns_end.reset();
-  if (dns_end != nullptr)
-    self->dns_end.emplace(std::move(*dns_end));
-}
-
-void Cronet_Metrics_connect_start_set(Cronet_MetricsPtr self,
-                                      const Cronet_DateTimePtr connect_start) {
-  DCHECK(self);
-  self->connect_start.reset();
-  if (connect_start != nullptr)
-    self->connect_start.emplace(*connect_start);
-}
-void Cronet_Metrics_connect_start_move(Cronet_MetricsPtr self,
-                                       Cronet_DateTimePtr connect_start) {
-  DCHECK(self);
-  self->connect_start.reset();
-  if (connect_start != nullptr)
-    self->connect_start.emplace(std::move(*connect_start));
-}
-
-void Cronet_Metrics_connect_end_set(Cronet_MetricsPtr self,
-                                    const Cronet_DateTimePtr connect_end) {
-  DCHECK(self);
-  self->connect_end.reset();
-  if (connect_end != nullptr)
-    self->connect_end.emplace(*connect_end);
-}
-void Cronet_Metrics_connect_end_move(Cronet_MetricsPtr self,
-                                     Cronet_DateTimePtr connect_end) {
-  DCHECK(self);
-  self->connect_end.reset();
-  if (connect_end != nullptr)
-    self->connect_end.emplace(std::move(*connect_end));
-}
-
-void Cronet_Metrics_ssl_start_set(Cronet_MetricsPtr self,
-                                  const Cronet_DateTimePtr ssl_start) {
-  DCHECK(self);
-  self->ssl_start.reset();
-  if (ssl_start != nullptr)
-    self->ssl_start.emplace(*ssl_start);
-}
-void Cronet_Metrics_ssl_start_move(Cronet_MetricsPtr self,
-                                   Cronet_DateTimePtr ssl_start) {
-  DCHECK(self);
-  self->ssl_start.reset();
-  if (ssl_start != nullptr)
-    self->ssl_start.emplace(std::move(*ssl_start));
-}
-
-void Cronet_Metrics_ssl_end_set(Cronet_MetricsPtr self,
-                                const Cronet_DateTimePtr ssl_end) {
-  DCHECK(self);
-  self->ssl_end.reset();
-  if (ssl_end != nullptr)
-    self->ssl_end.emplace(*ssl_end);
-}
-void Cronet_Metrics_ssl_end_move(Cronet_MetricsPtr self,
-                                 Cronet_DateTimePtr ssl_end) {
-  DCHECK(self);
-  self->ssl_end.reset();
-  if (ssl_end != nullptr)
-    self->ssl_end.emplace(std::move(*ssl_end));
-}
-
-void Cronet_Metrics_sending_start_set(Cronet_MetricsPtr self,
-                                      const Cronet_DateTimePtr sending_start) {
-  DCHECK(self);
-  self->sending_start.reset();
-  if (sending_start != nullptr)
-    self->sending_start.emplace(*sending_start);
-}
-void Cronet_Metrics_sending_start_move(Cronet_MetricsPtr self,
-                                       Cronet_DateTimePtr sending_start) {
-  DCHECK(self);
-  self->sending_start.reset();
-  if (sending_start != nullptr)
-    self->sending_start.emplace(std::move(*sending_start));
-}
-
-void Cronet_Metrics_sending_end_set(Cronet_MetricsPtr self,
-                                    const Cronet_DateTimePtr sending_end) {
-  DCHECK(self);
-  self->sending_end.reset();
-  if (sending_end != nullptr)
-    self->sending_end.emplace(*sending_end);
-}
-void Cronet_Metrics_sending_end_move(Cronet_MetricsPtr self,
-                                     Cronet_DateTimePtr sending_end) {
-  DCHECK(self);
-  self->sending_end.reset();
-  if (sending_end != nullptr)
-    self->sending_end.emplace(std::move(*sending_end));
-}
-
-void Cronet_Metrics_push_start_set(Cronet_MetricsPtr self,
-                                   const Cronet_DateTimePtr push_start) {
-  DCHECK(self);
-  self->push_start.reset();
-  if (push_start != nullptr)
-    self->push_start.emplace(*push_start);
-}
-void Cronet_Metrics_push_start_move(Cronet_MetricsPtr self,
-                                    Cronet_DateTimePtr push_start) {
-  DCHECK(self);
-  self->push_start.reset();
-  if (push_start != nullptr)
-    self->push_start.emplace(std::move(*push_start));
-}
-
-void Cronet_Metrics_push_end_set(Cronet_MetricsPtr self,
-                                 const Cronet_DateTimePtr push_end) {
-  DCHECK(self);
-  self->push_end.reset();
-  if (push_end != nullptr)
-    self->push_end.emplace(*push_end);
-}
-void Cronet_Metrics_push_end_move(Cronet_MetricsPtr self,
-                                  Cronet_DateTimePtr push_end) {
-  DCHECK(self);
-  self->push_end.reset();
-  if (push_end != nullptr)
-    self->push_end.emplace(std::move(*push_end));
-}
-
-void Cronet_Metrics_response_start_set(
-    Cronet_MetricsPtr self,
-    const Cronet_DateTimePtr response_start) {
-  DCHECK(self);
-  self->response_start.reset();
-  if (response_start != nullptr)
-    self->response_start.emplace(*response_start);
-}
-void Cronet_Metrics_response_start_move(Cronet_MetricsPtr self,
-                                        Cronet_DateTimePtr response_start) {
-  DCHECK(self);
-  self->response_start.reset();
-  if (response_start != nullptr)
-    self->response_start.emplace(std::move(*response_start));
-}
-
-void Cronet_Metrics_request_end_set(Cronet_MetricsPtr self,
-                                    const Cronet_DateTimePtr request_end) {
-  DCHECK(self);
-  self->request_end.reset();
-  if (request_end != nullptr)
-    self->request_end.emplace(*request_end);
-}
-void Cronet_Metrics_request_end_move(Cronet_MetricsPtr self,
-                                     Cronet_DateTimePtr request_end) {
-  DCHECK(self);
-  self->request_end.reset();
-  if (request_end != nullptr)
-    self->request_end.emplace(std::move(*request_end));
-}
-
-void Cronet_Metrics_socket_reused_set(Cronet_MetricsPtr self,
-                                      const bool socket_reused) {
-  DCHECK(self);
-  self->socket_reused = socket_reused;
-}
-
-void Cronet_Metrics_sent_byte_count_set(Cronet_MetricsPtr self,
-                                        const int64_t sent_byte_count) {
-  DCHECK(self);
-  self->sent_byte_count = sent_byte_count;
-}
-
-void Cronet_Metrics_received_byte_count_set(Cronet_MetricsPtr self,
-                                            const int64_t received_byte_count) {
-  DCHECK(self);
-  self->received_byte_count = received_byte_count;
-}
-
-// Struct Cronet_Metrics getters.
-Cronet_DateTimePtr Cronet_Metrics_request_start_get(
-    const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->request_start == absl::nullopt)
-    return nullptr;
-  return &self->request_start.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_dns_start_get(const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->dns_start == absl::nullopt)
-    return nullptr;
-  return &self->dns_start.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_dns_end_get(const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->dns_end == absl::nullopt)
-    return nullptr;
-  return &self->dns_end.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_connect_start_get(
-    const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->connect_start == absl::nullopt)
-    return nullptr;
-  return &self->connect_start.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_connect_end_get(
-    const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->connect_end == absl::nullopt)
-    return nullptr;
-  return &self->connect_end.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_ssl_start_get(const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->ssl_start == absl::nullopt)
-    return nullptr;
-  return &self->ssl_start.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_ssl_end_get(const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->ssl_end == absl::nullopt)
-    return nullptr;
-  return &self->ssl_end.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_sending_start_get(
-    const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->sending_start == absl::nullopt)
-    return nullptr;
-  return &self->sending_start.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_sending_end_get(
-    const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->sending_end == absl::nullopt)
-    return nullptr;
-  return &self->sending_end.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_push_start_get(const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->push_start == absl::nullopt)
-    return nullptr;
-  return &self->push_start.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_push_end_get(const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->push_end == absl::nullopt)
-    return nullptr;
-  return &self->push_end.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_response_start_get(
-    const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->response_start == absl::nullopt)
-    return nullptr;
-  return &self->response_start.value();
-}
-
-Cronet_DateTimePtr Cronet_Metrics_request_end_get(
-    const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  if (self->request_end == absl::nullopt)
-    return nullptr;
-  return &self->request_end.value();
-}
-
-bool Cronet_Metrics_socket_reused_get(const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  return self->socket_reused;
-}
-
-int64_t Cronet_Metrics_sent_byte_count_get(const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  return self->sent_byte_count;
-}
-
-int64_t Cronet_Metrics_received_byte_count_get(const Cronet_MetricsPtr self) {
-  DCHECK(self);
-  return self->received_byte_count;
-}
-
-// Struct Cronet_RequestFinishedInfo.
-Cronet_RequestFinishedInfo::Cronet_RequestFinishedInfo() = default;
-
-Cronet_RequestFinishedInfo::Cronet_RequestFinishedInfo(
-    const Cronet_RequestFinishedInfo& from) = default;
-
-Cronet_RequestFinishedInfo::Cronet_RequestFinishedInfo(
-    Cronet_RequestFinishedInfo&& from) = default;
-
-Cronet_RequestFinishedInfo::~Cronet_RequestFinishedInfo() = default;
-
-Cronet_RequestFinishedInfoPtr Cronet_RequestFinishedInfo_Create() {
-  return new Cronet_RequestFinishedInfo();
-}
-
-void Cronet_RequestFinishedInfo_Destroy(Cronet_RequestFinishedInfoPtr self) {
-  delete self;
-}
-
-// Struct Cronet_RequestFinishedInfo setters.
-void Cronet_RequestFinishedInfo_metrics_set(Cronet_RequestFinishedInfoPtr self,
-                                            const Cronet_MetricsPtr metrics) {
-  DCHECK(self);
-  self->metrics.reset();
-  if (metrics != nullptr)
-    self->metrics.emplace(*metrics);
-}
-void Cronet_RequestFinishedInfo_metrics_move(Cronet_RequestFinishedInfoPtr self,
-                                             Cronet_MetricsPtr metrics) {
-  DCHECK(self);
-  self->metrics.reset();
-  if (metrics != nullptr)
-    self->metrics.emplace(std::move(*metrics));
-}
-
-void Cronet_RequestFinishedInfo_annotations_add(
-    Cronet_RequestFinishedInfoPtr self,
-    const Cronet_RawDataPtr element) {
-  DCHECK(self);
-  self->annotations.push_back(element);
-}
-
-void Cronet_RequestFinishedInfo_finished_reason_set(
-    Cronet_RequestFinishedInfoPtr self,
-    const Cronet_RequestFinishedInfo_FINISHED_REASON finished_reason) {
-  DCHECK(self);
-  self->finished_reason = finished_reason;
-}
-
-// Struct Cronet_RequestFinishedInfo getters.
-Cronet_MetricsPtr Cronet_RequestFinishedInfo_metrics_get(
-    const Cronet_RequestFinishedInfoPtr self) {
-  DCHECK(self);
-  if (self->metrics == absl::nullopt)
-    return nullptr;
-  return &self->metrics.value();
-}
-
-uint32_t Cronet_RequestFinishedInfo_annotations_size(
-    Cronet_RequestFinishedInfoPtr self) {
-  DCHECK(self);
-  return self->annotations.size();
-}
-Cronet_RawDataPtr Cronet_RequestFinishedInfo_annotations_at(
-    const Cronet_RequestFinishedInfoPtr self,
-    uint32_t index) {
-  DCHECK(self);
-  DCHECK(index < self->annotations.size());
-  return self->annotations[index];
-}
-void Cronet_RequestFinishedInfo_annotations_clear(
-    Cronet_RequestFinishedInfoPtr self) {
-  DCHECK(self);
-  self->annotations.clear();
-}
-
-Cronet_RequestFinishedInfo_FINISHED_REASON
-Cronet_RequestFinishedInfo_finished_reason_get(
-    const Cronet_RequestFinishedInfoPtr self) {
-  DCHECK(self);
-  return self->finished_reason;
-}
diff --git a/components/cronet/native/generated/cronet.idl_impl_struct.h b/components/cronet/native/generated/cronet.idl_impl_struct.h
deleted file mode 100644
index a665b85ac93cb..0000000000000
--- a/components/cronet/native/generated/cronet.idl_impl_struct.h
+++ /dev/null
@@ -1,231 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-/* DO NOT EDIT. Generated from components/cronet/native/generated/cronet.idl */
-
-#ifndef COMPONENTS_CRONET_NATIVE_GENERATED_CRONET_IDL_IMPL_STRUCT_H_
-#define COMPONENTS_CRONET_NATIVE_GENERATED_CRONET_IDL_IMPL_STRUCT_H_
-
-#include "components/cronet/native/generated/cronet.idl_c.h"
-
-#include <memory>
-#include <string>
-#include <vector>
-
-#include "third_party/abseil-cpp/absl/types/optional.h"
-
-// Struct Cronet_Error.
-struct Cronet_Error {
- public:
-  Cronet_Error();
-  explicit Cronet_Error(const Cronet_Error& from);
-
-  Cronet_Error& operator=(const Cronet_Error&) = delete;
-
-  explicit Cronet_Error(Cronet_Error&& from);
-
-  ~Cronet_Error();
-
-  Cronet_Error_ERROR_CODE error_code = Cronet_Error_ERROR_CODE_ERROR_CALLBACK;
-  std::string message;
-  int32_t internal_error_code = 0;
-  bool immediately_retryable = false;
-  int32_t quic_detailed_error_code = 0;
-};
-
-// Struct Cronet_QuicHint.
-struct Cronet_QuicHint {
- public:
-  Cronet_QuicHint();
-  explicit Cronet_QuicHint(const Cronet_QuicHint& from);
-
-  Cronet_QuicHint& operator=(const Cronet_QuicHint&) = delete;
-
-  explicit Cronet_QuicHint(Cronet_QuicHint&& from);
-
-  ~Cronet_QuicHint();
-
-  std::string host;
-  int32_t port = 0;
-  int32_t alternate_port = 0;
-};
-
-// Struct Cronet_PublicKeyPins.
-struct Cronet_PublicKeyPins {
- public:
-  Cronet_PublicKeyPins();
-  explicit Cronet_PublicKeyPins(const Cronet_PublicKeyPins& from);
-
-  Cronet_PublicKeyPins& operator=(const Cronet_PublicKeyPins&) = delete;
-
-  explicit Cronet_PublicKeyPins(Cronet_PublicKeyPins&& from);
-
-  ~Cronet_PublicKeyPins();
-
-  std::string host;
-  std::vector<std::string> pins_sha256;
-  bool include_subdomains = false;
-  int64_t expiration_date = 0;
-};
-
-// Struct Cronet_EngineParams.
-struct Cronet_EngineParams {
- public:
-  Cronet_EngineParams();
-  explicit Cronet_EngineParams(const Cronet_EngineParams& from);
-
-  Cronet_EngineParams& operator=(const Cronet_EngineParams&) = delete;
-
-  explicit Cronet_EngineParams(Cronet_EngineParams&& from);
-
-  ~Cronet_EngineParams();
-
-  bool enable_check_result = true;
-  std::string user_agent;
-  std::string accept_language;
-  std::string storage_path;
-  bool enable_quic = true;
-  bool enable_http2 = true;
-  bool enable_brotli = true;
-  Cronet_EngineParams_HTTP_CACHE_MODE http_cache_mode =
-      Cronet_EngineParams_HTTP_CACHE_MODE_DISABLED;
-  int64_t http_cache_max_size = 0;
-  std::vector<Cronet_QuicHint> quic_hints;
-  std::vector<Cronet_PublicKeyPins> public_key_pins;
-  bool enable_public_key_pinning_bypass_for_local_trust_anchors = true;
-  double network_thread_priority = std::numeric_limits<double>::quiet_NaN();
-  std::string experimental_options;
-};
-
-// Struct Cronet_HttpHeader.
-struct Cronet_HttpHeader {
- public:
-  Cronet_HttpHeader();
-  explicit Cronet_HttpHeader(const Cronet_HttpHeader& from);
-
-  Cronet_HttpHeader& operator=(const Cronet_HttpHeader&) = delete;
-
-  explicit Cronet_HttpHeader(Cronet_HttpHeader&& from);
-
-  ~Cronet_HttpHeader();
-
-  std::string name;
-  std::string value;
-};
-
-// Struct Cronet_UrlResponseInfo.
-struct Cronet_UrlResponseInfo {
- public:
-  Cronet_UrlResponseInfo();
-  explicit Cronet_UrlResponseInfo(const Cronet_UrlResponseInfo& from);
-
-  Cronet_UrlResponseInfo& operator=(const Cronet_UrlResponseInfo&) = delete;
-
-  explicit Cronet_UrlResponseInfo(Cronet_UrlResponseInfo&& from);
-
-  ~Cronet_UrlResponseInfo();
-
-  std::string url;
-  std::vector<std::string> url_chain;
-  int32_t http_status_code = 0;
-  std::string http_status_text;
-  std::vector<Cronet_HttpHeader> all_headers_list;
-  bool was_cached = false;
-  std::string negotiated_protocol;
-  std::string proxy_server;
-  int64_t received_byte_count = 0;
-};
-
-// Struct Cronet_UrlRequestParams.
-struct Cronet_UrlRequestParams {
- public:
-  Cronet_UrlRequestParams();
-  explicit Cronet_UrlRequestParams(const Cronet_UrlRequestParams& from);
-
-  Cronet_UrlRequestParams& operator=(const Cronet_UrlRequestParams&) = delete;
-
-  explicit Cronet_UrlRequestParams(Cronet_UrlRequestParams&& from);
-
-  ~Cronet_UrlRequestParams();
-
-  std::string http_method;
-  std::vector<Cronet_HttpHeader> request_headers;
-  bool disable_cache = false;
-  Cronet_UrlRequestParams_REQUEST_PRIORITY priority =
-      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_MEDIUM;
-  Cronet_UploadDataProviderPtr upload_data_provider = nullptr;
-  Cronet_ExecutorPtr upload_data_provider_executor = nullptr;
-  bool allow_direct_executor = false;
-  std::vector<Cronet_RawDataPtr> annotations;
-  Cronet_RequestFinishedInfoListenerPtr request_finished_listener = nullptr;
-  Cronet_ExecutorPtr request_finished_executor = nullptr;
-  Cronet_UrlRequestParams_IDEMPOTENCY idempotency =
-      Cronet_UrlRequestParams_IDEMPOTENCY_DEFAULT_IDEMPOTENCY;
-};
-
-// Struct Cronet_DateTime.
-struct Cronet_DateTime {
- public:
-  Cronet_DateTime();
-  explicit Cronet_DateTime(const Cronet_DateTime& from);
-
-  Cronet_DateTime& operator=(const Cronet_DateTime&) = delete;
-
-  explicit Cronet_DateTime(Cronet_DateTime&& from);
-
-  ~Cronet_DateTime();
-
-  int64_t value = 0;
-};
-
-// Struct Cronet_Metrics.
-struct Cronet_Metrics {
- public:
-  Cronet_Metrics();
-  explicit Cronet_Metrics(const Cronet_Metrics& from);
-
-  Cronet_Metrics& operator=(const Cronet_Metrics&) = delete;
-
-  explicit Cronet_Metrics(Cronet_Metrics&& from);
-
-  ~Cronet_Metrics();
-
-  absl::optional<Cronet_DateTime> request_start;
-  absl::optional<Cronet_DateTime> dns_start;
-  absl::optional<Cronet_DateTime> dns_end;
-  absl::optional<Cronet_DateTime> connect_start;
-  absl::optional<Cronet_DateTime> connect_end;
-  absl::optional<Cronet_DateTime> ssl_start;
-  absl::optional<Cronet_DateTime> ssl_end;
-  absl::optional<Cronet_DateTime> sending_start;
-  absl::optional<Cronet_DateTime> sending_end;
-  absl::optional<Cronet_DateTime> push_start;
-  absl::optional<Cronet_DateTime> push_end;
-  absl::optional<Cronet_DateTime> response_start;
-  absl::optional<Cronet_DateTime> request_end;
-  bool socket_reused = false;
-  int64_t sent_byte_count = -1;
-  int64_t received_byte_count = -1;
-};
-
-// Struct Cronet_RequestFinishedInfo.
-struct Cronet_RequestFinishedInfo {
- public:
-  Cronet_RequestFinishedInfo();
-  explicit Cronet_RequestFinishedInfo(const Cronet_RequestFinishedInfo& from);
-
-  Cronet_RequestFinishedInfo& operator=(const Cronet_RequestFinishedInfo&) =
-      delete;
-
-  explicit Cronet_RequestFinishedInfo(Cronet_RequestFinishedInfo&& from);
-
-  ~Cronet_RequestFinishedInfo();
-
-  absl::optional<Cronet_Metrics> metrics;
-  std::vector<Cronet_RawDataPtr> annotations;
-  Cronet_RequestFinishedInfo_FINISHED_REASON finished_reason =
-      Cronet_RequestFinishedInfo_FINISHED_REASON_SUCCEEDED;
-};
-
-#endif  // COMPONENTS_CRONET_NATIVE_GENERATED_CRONET_IDL_IMPL_STRUCT_H_
diff --git a/components/cronet/native/generated/cronet.idl_impl_struct_unittest.cc b/components/cronet/native/generated/cronet.idl_impl_struct_unittest.cc
deleted file mode 100644
index 11991a5a9ba48..0000000000000
--- a/components/cronet/native/generated/cronet.idl_impl_struct_unittest.cc
+++ /dev/null
@@ -1,511 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-/* DO NOT EDIT. Generated from components/cronet/native/generated/cronet.idl */
-
-#include "components/cronet/native/generated/cronet.idl_c.h"
-
-#include <math.h>
-
-#include "testing/gtest/include/gtest/gtest.h"
-
-class CronetStructTest : public ::testing::Test {
- public:
-  CronetStructTest(const CronetStructTest&) = delete;
-  CronetStructTest& operator=(const CronetStructTest&) = delete;
-
- protected:
-  void SetUp() override {}
-
-  void TearDown() override {}
-
-  CronetStructTest() {}
-  ~CronetStructTest() override {}
-};
-
-// Test Struct Cronet_Error setters and getters.
-TEST_F(CronetStructTest, TestCronet_Error) {
-  Cronet_ErrorPtr first = Cronet_Error_Create();
-  Cronet_ErrorPtr second = Cronet_Error_Create();
-
-  // Copy values from |first| to |second|.
-  Cronet_Error_error_code_set(second, Cronet_Error_error_code_get(first));
-  EXPECT_EQ(Cronet_Error_error_code_get(first),
-            Cronet_Error_error_code_get(second));
-  Cronet_Error_message_set(second, Cronet_Error_message_get(first));
-  EXPECT_STREQ(Cronet_Error_message_get(first),
-               Cronet_Error_message_get(second));
-  Cronet_Error_internal_error_code_set(
-      second, Cronet_Error_internal_error_code_get(first));
-  EXPECT_EQ(Cronet_Error_internal_error_code_get(first),
-            Cronet_Error_internal_error_code_get(second));
-  Cronet_Error_immediately_retryable_set(
-      second, Cronet_Error_immediately_retryable_get(first));
-  EXPECT_EQ(Cronet_Error_immediately_retryable_get(first),
-            Cronet_Error_immediately_retryable_get(second));
-  Cronet_Error_quic_detailed_error_code_set(
-      second, Cronet_Error_quic_detailed_error_code_get(first));
-  EXPECT_EQ(Cronet_Error_quic_detailed_error_code_get(first),
-            Cronet_Error_quic_detailed_error_code_get(second));
-  Cronet_Error_Destroy(first);
-  Cronet_Error_Destroy(second);
-}
-
-// Test Struct Cronet_QuicHint setters and getters.
-TEST_F(CronetStructTest, TestCronet_QuicHint) {
-  Cronet_QuicHintPtr first = Cronet_QuicHint_Create();
-  Cronet_QuicHintPtr second = Cronet_QuicHint_Create();
-
-  // Copy values from |first| to |second|.
-  Cronet_QuicHint_host_set(second, Cronet_QuicHint_host_get(first));
-  EXPECT_STREQ(Cronet_QuicHint_host_get(first),
-               Cronet_QuicHint_host_get(second));
-  Cronet_QuicHint_port_set(second, Cronet_QuicHint_port_get(first));
-  EXPECT_EQ(Cronet_QuicHint_port_get(first), Cronet_QuicHint_port_get(second));
-  Cronet_QuicHint_alternate_port_set(second,
-                                     Cronet_QuicHint_alternate_port_get(first));
-  EXPECT_EQ(Cronet_QuicHint_alternate_port_get(first),
-            Cronet_QuicHint_alternate_port_get(second));
-  Cronet_QuicHint_Destroy(first);
-  Cronet_QuicHint_Destroy(second);
-}
-
-// Test Struct Cronet_PublicKeyPins setters and getters.
-TEST_F(CronetStructTest, TestCronet_PublicKeyPins) {
-  Cronet_PublicKeyPinsPtr first = Cronet_PublicKeyPins_Create();
-  Cronet_PublicKeyPinsPtr second = Cronet_PublicKeyPins_Create();
-
-  // Copy values from |first| to |second|.
-  Cronet_PublicKeyPins_host_set(second, Cronet_PublicKeyPins_host_get(first));
-  EXPECT_STREQ(Cronet_PublicKeyPins_host_get(first),
-               Cronet_PublicKeyPins_host_get(second));
-  // TODO(mef): Test array |pins_sha256|.
-  Cronet_PublicKeyPins_include_subdomains_set(
-      second, Cronet_PublicKeyPins_include_subdomains_get(first));
-  EXPECT_EQ(Cronet_PublicKeyPins_include_subdomains_get(first),
-            Cronet_PublicKeyPins_include_subdomains_get(second));
-  Cronet_PublicKeyPins_expiration_date_set(
-      second, Cronet_PublicKeyPins_expiration_date_get(first));
-  EXPECT_EQ(Cronet_PublicKeyPins_expiration_date_get(first),
-            Cronet_PublicKeyPins_expiration_date_get(second));
-  Cronet_PublicKeyPins_Destroy(first);
-  Cronet_PublicKeyPins_Destroy(second);
-}
-
-// Test Struct Cronet_EngineParams setters and getters.
-TEST_F(CronetStructTest, TestCronet_EngineParams) {
-  Cronet_EngineParamsPtr first = Cronet_EngineParams_Create();
-  Cronet_EngineParamsPtr second = Cronet_EngineParams_Create();
-
-  // Copy values from |first| to |second|.
-  Cronet_EngineParams_enable_check_result_set(
-      second, Cronet_EngineParams_enable_check_result_get(first));
-  EXPECT_EQ(Cronet_EngineParams_enable_check_result_get(first),
-            Cronet_EngineParams_enable_check_result_get(second));
-  Cronet_EngineParams_user_agent_set(second,
-                                     Cronet_EngineParams_user_agent_get(first));
-  EXPECT_STREQ(Cronet_EngineParams_user_agent_get(first),
-               Cronet_EngineParams_user_agent_get(second));
-  Cronet_EngineParams_accept_language_set(
-      second, Cronet_EngineParams_accept_language_get(first));
-  EXPECT_STREQ(Cronet_EngineParams_accept_language_get(first),
-               Cronet_EngineParams_accept_language_get(second));
-  Cronet_EngineParams_storage_path_set(
-      second, Cronet_EngineParams_storage_path_get(first));
-  EXPECT_STREQ(Cronet_EngineParams_storage_path_get(first),
-               Cronet_EngineParams_storage_path_get(second));
-  Cronet_EngineParams_enable_quic_set(
-      second, Cronet_EngineParams_enable_quic_get(first));
-  EXPECT_EQ(Cronet_EngineParams_enable_quic_get(first),
-            Cronet_EngineParams_enable_quic_get(second));
-  Cronet_EngineParams_enable_http2_set(
-      second, Cronet_EngineParams_enable_http2_get(first));
-  EXPECT_EQ(Cronet_EngineParams_enable_http2_get(first),
-            Cronet_EngineParams_enable_http2_get(second));
-  Cronet_EngineParams_enable_brotli_set(
-      second, Cronet_EngineParams_enable_brotli_get(first));
-  EXPECT_EQ(Cronet_EngineParams_enable_brotli_get(first),
-            Cronet_EngineParams_enable_brotli_get(second));
-  Cronet_EngineParams_http_cache_mode_set(
-      second, Cronet_EngineParams_http_cache_mode_get(first));
-  EXPECT_EQ(Cronet_EngineParams_http_cache_mode_get(first),
-            Cronet_EngineParams_http_cache_mode_get(second));
-  Cronet_EngineParams_http_cache_max_size_set(
-      second, Cronet_EngineParams_http_cache_max_size_get(first));
-  EXPECT_EQ(Cronet_EngineParams_http_cache_max_size_get(first),
-            Cronet_EngineParams_http_cache_max_size_get(second));
-  // TODO(mef): Test array |quic_hints|.
-  // TODO(mef): Test array |public_key_pins|.
-  Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_set(
-      second,
-      Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get(
-          first));
-  EXPECT_EQ(
-      Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get(
-          first),
-      Cronet_EngineParams_enable_public_key_pinning_bypass_for_local_trust_anchors_get(
-          second));
-  Cronet_EngineParams_network_thread_priority_set(
-      second, Cronet_EngineParams_network_thread_priority_get(first));
-  EXPECT_TRUE(
-      Cronet_EngineParams_network_thread_priority_get(first) ==
-          Cronet_EngineParams_network_thread_priority_get(second) ||
-      isnan(Cronet_EngineParams_network_thread_priority_get(first)) &&
-          isnan(Cronet_EngineParams_network_thread_priority_get(second)));
-  Cronet_EngineParams_experimental_options_set(
-      second, Cronet_EngineParams_experimental_options_get(first));
-  EXPECT_STREQ(Cronet_EngineParams_experimental_options_get(first),
-               Cronet_EngineParams_experimental_options_get(second));
-  Cronet_EngineParams_Destroy(first);
-  Cronet_EngineParams_Destroy(second);
-}
-
-// Test Struct Cronet_HttpHeader setters and getters.
-TEST_F(CronetStructTest, TestCronet_HttpHeader) {
-  Cronet_HttpHeaderPtr first = Cronet_HttpHeader_Create();
-  Cronet_HttpHeaderPtr second = Cronet_HttpHeader_Create();
-
-  // Copy values from |first| to |second|.
-  Cronet_HttpHeader_name_set(second, Cronet_HttpHeader_name_get(first));
-  EXPECT_STREQ(Cronet_HttpHeader_name_get(first),
-               Cronet_HttpHeader_name_get(second));
-  Cronet_HttpHeader_value_set(second, Cronet_HttpHeader_value_get(first));
-  EXPECT_STREQ(Cronet_HttpHeader_value_get(first),
-               Cronet_HttpHeader_value_get(second));
-  Cronet_HttpHeader_Destroy(first);
-  Cronet_HttpHeader_Destroy(second);
-}
-
-// Test Struct Cronet_UrlResponseInfo setters and getters.
-TEST_F(CronetStructTest, TestCronet_UrlResponseInfo) {
-  Cronet_UrlResponseInfoPtr first = Cronet_UrlResponseInfo_Create();
-  Cronet_UrlResponseInfoPtr second = Cronet_UrlResponseInfo_Create();
-
-  // Copy values from |first| to |second|.
-  Cronet_UrlResponseInfo_url_set(second, Cronet_UrlResponseInfo_url_get(first));
-  EXPECT_STREQ(Cronet_UrlResponseInfo_url_get(first),
-               Cronet_UrlResponseInfo_url_get(second));
-  // TODO(mef): Test array |url_chain|.
-  Cronet_UrlResponseInfo_http_status_code_set(
-      second, Cronet_UrlResponseInfo_http_status_code_get(first));
-  EXPECT_EQ(Cronet_UrlResponseInfo_http_status_code_get(first),
-            Cronet_UrlResponseInfo_http_status_code_get(second));
-  Cronet_UrlResponseInfo_http_status_text_set(
-      second, Cronet_UrlResponseInfo_http_status_text_get(first));
-  EXPECT_STREQ(Cronet_UrlResponseInfo_http_status_text_get(first),
-               Cronet_UrlResponseInfo_http_status_text_get(second));
-  // TODO(mef): Test array |all_headers_list|.
-  Cronet_UrlResponseInfo_was_cached_set(
-      second, Cronet_UrlResponseInfo_was_cached_get(first));
-  EXPECT_EQ(Cronet_UrlResponseInfo_was_cached_get(first),
-            Cronet_UrlResponseInfo_was_cached_get(second));
-  Cronet_UrlResponseInfo_negotiated_protocol_set(
-      second, Cronet_UrlResponseInfo_negotiated_protocol_get(first));
-  EXPECT_STREQ(Cronet_UrlResponseInfo_negotiated_protocol_get(first),
-               Cronet_UrlResponseInfo_negotiated_protocol_get(second));
-  Cronet_UrlResponseInfo_proxy_server_set(
-      second, Cronet_UrlResponseInfo_proxy_server_get(first));
-  EXPECT_STREQ(Cronet_UrlResponseInfo_proxy_server_get(first),
-               Cronet_UrlResponseInfo_proxy_server_get(second));
-  Cronet_UrlResponseInfo_received_byte_count_set(
-      second, Cronet_UrlResponseInfo_received_byte_count_get(first));
-  EXPECT_EQ(Cronet_UrlResponseInfo_received_byte_count_get(first),
-            Cronet_UrlResponseInfo_received_byte_count_get(second));
-  Cronet_UrlResponseInfo_Destroy(first);
-  Cronet_UrlResponseInfo_Destroy(second);
-}
-
-// Test Struct Cronet_UrlRequestParams setters and getters.
-TEST_F(CronetStructTest, TestCronet_UrlRequestParams) {
-  Cronet_UrlRequestParamsPtr first = Cronet_UrlRequestParams_Create();
-  Cronet_UrlRequestParamsPtr second = Cronet_UrlRequestParams_Create();
-
-  // Copy values from |first| to |second|.
-  Cronet_UrlRequestParams_http_method_set(
-      second, Cronet_UrlRequestParams_http_method_get(first));
-  EXPECT_STREQ(Cronet_UrlRequestParams_http_method_get(first),
-               Cronet_UrlRequestParams_http_method_get(second));
-  // TODO(mef): Test array |request_headers|.
-  Cronet_UrlRequestParams_disable_cache_set(
-      second, Cronet_UrlRequestParams_disable_cache_get(first));
-  EXPECT_EQ(Cronet_UrlRequestParams_disable_cache_get(first),
-            Cronet_UrlRequestParams_disable_cache_get(second));
-  Cronet_UrlRequestParams_priority_set(
-      second, Cronet_UrlRequestParams_priority_get(first));
-  EXPECT_EQ(Cronet_UrlRequestParams_priority_get(first),
-            Cronet_UrlRequestParams_priority_get(second));
-  Cronet_UrlRequestParams_upload_data_provider_set(
-      second, Cronet_UrlRequestParams_upload_data_provider_get(first));
-  EXPECT_EQ(Cronet_UrlRequestParams_upload_data_provider_get(first),
-            Cronet_UrlRequestParams_upload_data_provider_get(second));
-  Cronet_UrlRequestParams_upload_data_provider_executor_set(
-      second, Cronet_UrlRequestParams_upload_data_provider_executor_get(first));
-  EXPECT_EQ(Cronet_UrlRequestParams_upload_data_provider_executor_get(first),
-            Cronet_UrlRequestParams_upload_data_provider_executor_get(second));
-  Cronet_UrlRequestParams_allow_direct_executor_set(
-      second, Cronet_UrlRequestParams_allow_direct_executor_get(first));
-  EXPECT_EQ(Cronet_UrlRequestParams_allow_direct_executor_get(first),
-            Cronet_UrlRequestParams_allow_direct_executor_get(second));
-  // TODO(mef): Test array |annotations|.
-  Cronet_UrlRequestParams_request_finished_listener_set(
-      second, Cronet_UrlRequestParams_request_finished_listener_get(first));
-  EXPECT_EQ(Cronet_UrlRequestParams_request_finished_listener_get(first),
-            Cronet_UrlRequestParams_request_finished_listener_get(second));
-  Cronet_UrlRequestParams_request_finished_executor_set(
-      second, Cronet_UrlRequestParams_request_finished_executor_get(first));
-  EXPECT_EQ(Cronet_UrlRequestParams_request_finished_executor_get(first),
-            Cronet_UrlRequestParams_request_finished_executor_get(second));
-  Cronet_UrlRequestParams_idempotency_set(
-      second, Cronet_UrlRequestParams_idempotency_get(first));
-  EXPECT_EQ(Cronet_UrlRequestParams_idempotency_get(first),
-            Cronet_UrlRequestParams_idempotency_get(second));
-  Cronet_UrlRequestParams_Destroy(first);
-  Cronet_UrlRequestParams_Destroy(second);
-}
-
-// Test Struct Cronet_DateTime setters and getters.
-TEST_F(CronetStructTest, TestCronet_DateTime) {
-  Cronet_DateTimePtr first = Cronet_DateTime_Create();
-  Cronet_DateTimePtr second = Cronet_DateTime_Create();
-
-  // Copy values from |first| to |second|.
-  Cronet_DateTime_value_set(second, Cronet_DateTime_value_get(first));
-  EXPECT_EQ(Cronet_DateTime_value_get(first),
-            Cronet_DateTime_value_get(second));
-  Cronet_DateTime_Destroy(first);
-  Cronet_DateTime_Destroy(second);
-}
-
-// Test Struct Cronet_Metrics setters and getters.
-TEST_F(CronetStructTest, TestCronet_Metrics) {
-  Cronet_MetricsPtr first = Cronet_Metrics_Create();
-  Cronet_MetricsPtr second = Cronet_Metrics_Create();
-
-  // Copy values from |first| to |second|.
-  Cronet_DateTimePtr test_request_start = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_request_start_get(first), nullptr);
-
-  Cronet_Metrics_request_start_set(first, test_request_start);
-  EXPECT_NE(Cronet_Metrics_request_start_get(first), nullptr);
-  Cronet_Metrics_request_start_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_request_start_get(first), nullptr);
-
-  Cronet_Metrics_request_start_move(first, test_request_start);
-  EXPECT_NE(Cronet_Metrics_request_start_get(first), nullptr);
-  Cronet_Metrics_request_start_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_request_start_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_request_start);
-  Cronet_DateTimePtr test_dns_start = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_dns_start_get(first), nullptr);
-
-  Cronet_Metrics_dns_start_set(first, test_dns_start);
-  EXPECT_NE(Cronet_Metrics_dns_start_get(first), nullptr);
-  Cronet_Metrics_dns_start_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_dns_start_get(first), nullptr);
-
-  Cronet_Metrics_dns_start_move(first, test_dns_start);
-  EXPECT_NE(Cronet_Metrics_dns_start_get(first), nullptr);
-  Cronet_Metrics_dns_start_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_dns_start_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_dns_start);
-  Cronet_DateTimePtr test_dns_end = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_dns_end_get(first), nullptr);
-
-  Cronet_Metrics_dns_end_set(first, test_dns_end);
-  EXPECT_NE(Cronet_Metrics_dns_end_get(first), nullptr);
-  Cronet_Metrics_dns_end_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_dns_end_get(first), nullptr);
-
-  Cronet_Metrics_dns_end_move(first, test_dns_end);
-  EXPECT_NE(Cronet_Metrics_dns_end_get(first), nullptr);
-  Cronet_Metrics_dns_end_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_dns_end_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_dns_end);
-  Cronet_DateTimePtr test_connect_start = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_connect_start_get(first), nullptr);
-
-  Cronet_Metrics_connect_start_set(first, test_connect_start);
-  EXPECT_NE(Cronet_Metrics_connect_start_get(first), nullptr);
-  Cronet_Metrics_connect_start_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_connect_start_get(first), nullptr);
-
-  Cronet_Metrics_connect_start_move(first, test_connect_start);
-  EXPECT_NE(Cronet_Metrics_connect_start_get(first), nullptr);
-  Cronet_Metrics_connect_start_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_connect_start_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_connect_start);
-  Cronet_DateTimePtr test_connect_end = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_connect_end_get(first), nullptr);
-
-  Cronet_Metrics_connect_end_set(first, test_connect_end);
-  EXPECT_NE(Cronet_Metrics_connect_end_get(first), nullptr);
-  Cronet_Metrics_connect_end_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_connect_end_get(first), nullptr);
-
-  Cronet_Metrics_connect_end_move(first, test_connect_end);
-  EXPECT_NE(Cronet_Metrics_connect_end_get(first), nullptr);
-  Cronet_Metrics_connect_end_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_connect_end_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_connect_end);
-  Cronet_DateTimePtr test_ssl_start = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_ssl_start_get(first), nullptr);
-
-  Cronet_Metrics_ssl_start_set(first, test_ssl_start);
-  EXPECT_NE(Cronet_Metrics_ssl_start_get(first), nullptr);
-  Cronet_Metrics_ssl_start_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_ssl_start_get(first), nullptr);
-
-  Cronet_Metrics_ssl_start_move(first, test_ssl_start);
-  EXPECT_NE(Cronet_Metrics_ssl_start_get(first), nullptr);
-  Cronet_Metrics_ssl_start_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_ssl_start_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_ssl_start);
-  Cronet_DateTimePtr test_ssl_end = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_ssl_end_get(first), nullptr);
-
-  Cronet_Metrics_ssl_end_set(first, test_ssl_end);
-  EXPECT_NE(Cronet_Metrics_ssl_end_get(first), nullptr);
-  Cronet_Metrics_ssl_end_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_ssl_end_get(first), nullptr);
-
-  Cronet_Metrics_ssl_end_move(first, test_ssl_end);
-  EXPECT_NE(Cronet_Metrics_ssl_end_get(first), nullptr);
-  Cronet_Metrics_ssl_end_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_ssl_end_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_ssl_end);
-  Cronet_DateTimePtr test_sending_start = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_sending_start_get(first), nullptr);
-
-  Cronet_Metrics_sending_start_set(first, test_sending_start);
-  EXPECT_NE(Cronet_Metrics_sending_start_get(first), nullptr);
-  Cronet_Metrics_sending_start_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_sending_start_get(first), nullptr);
-
-  Cronet_Metrics_sending_start_move(first, test_sending_start);
-  EXPECT_NE(Cronet_Metrics_sending_start_get(first), nullptr);
-  Cronet_Metrics_sending_start_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_sending_start_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_sending_start);
-  Cronet_DateTimePtr test_sending_end = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_sending_end_get(first), nullptr);
-
-  Cronet_Metrics_sending_end_set(first, test_sending_end);
-  EXPECT_NE(Cronet_Metrics_sending_end_get(first), nullptr);
-  Cronet_Metrics_sending_end_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_sending_end_get(first), nullptr);
-
-  Cronet_Metrics_sending_end_move(first, test_sending_end);
-  EXPECT_NE(Cronet_Metrics_sending_end_get(first), nullptr);
-  Cronet_Metrics_sending_end_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_sending_end_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_sending_end);
-  Cronet_DateTimePtr test_push_start = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_push_start_get(first), nullptr);
-
-  Cronet_Metrics_push_start_set(first, test_push_start);
-  EXPECT_NE(Cronet_Metrics_push_start_get(first), nullptr);
-  Cronet_Metrics_push_start_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_push_start_get(first), nullptr);
-
-  Cronet_Metrics_push_start_move(first, test_push_start);
-  EXPECT_NE(Cronet_Metrics_push_start_get(first), nullptr);
-  Cronet_Metrics_push_start_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_push_start_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_push_start);
-  Cronet_DateTimePtr test_push_end = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_push_end_get(first), nullptr);
-
-  Cronet_Metrics_push_end_set(first, test_push_end);
-  EXPECT_NE(Cronet_Metrics_push_end_get(first), nullptr);
-  Cronet_Metrics_push_end_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_push_end_get(first), nullptr);
-
-  Cronet_Metrics_push_end_move(first, test_push_end);
-  EXPECT_NE(Cronet_Metrics_push_end_get(first), nullptr);
-  Cronet_Metrics_push_end_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_push_end_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_push_end);
-  Cronet_DateTimePtr test_response_start = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_response_start_get(first), nullptr);
-
-  Cronet_Metrics_response_start_set(first, test_response_start);
-  EXPECT_NE(Cronet_Metrics_response_start_get(first), nullptr);
-  Cronet_Metrics_response_start_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_response_start_get(first), nullptr);
-
-  Cronet_Metrics_response_start_move(first, test_response_start);
-  EXPECT_NE(Cronet_Metrics_response_start_get(first), nullptr);
-  Cronet_Metrics_response_start_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_response_start_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_response_start);
-  Cronet_DateTimePtr test_request_end = Cronet_DateTime_Create();
-  EXPECT_EQ(Cronet_Metrics_request_end_get(first), nullptr);
-
-  Cronet_Metrics_request_end_set(first, test_request_end);
-  EXPECT_NE(Cronet_Metrics_request_end_get(first), nullptr);
-  Cronet_Metrics_request_end_set(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_request_end_get(first), nullptr);
-
-  Cronet_Metrics_request_end_move(first, test_request_end);
-  EXPECT_NE(Cronet_Metrics_request_end_get(first), nullptr);
-  Cronet_Metrics_request_end_move(first, nullptr);
-  EXPECT_EQ(Cronet_Metrics_request_end_get(first), nullptr);
-
-  Cronet_DateTime_Destroy(test_request_end);
-  Cronet_Metrics_socket_reused_set(second,
-                                   Cronet_Metrics_socket_reused_get(first));
-  EXPECT_EQ(Cronet_Metrics_socket_reused_get(first),
-            Cronet_Metrics_socket_reused_get(second));
-  Cronet_Metrics_sent_byte_count_set(second,
-                                     Cronet_Metrics_sent_byte_count_get(first));
-  EXPECT_EQ(Cronet_Metrics_sent_byte_count_get(first),
-            Cronet_Metrics_sent_byte_count_get(second));
-  Cronet_Metrics_received_byte_count_set(
-      second, Cronet_Metrics_received_byte_count_get(first));
-  EXPECT_EQ(Cronet_Metrics_received_byte_count_get(first),
-            Cronet_Metrics_received_byte_count_get(second));
-  Cronet_Metrics_Destroy(first);
-  Cronet_Metrics_Destroy(second);
-}
-
-// Test Struct Cronet_RequestFinishedInfo setters and getters.
-TEST_F(CronetStructTest, TestCronet_RequestFinishedInfo) {
-  Cronet_RequestFinishedInfoPtr first = Cronet_RequestFinishedInfo_Create();
-  Cronet_RequestFinishedInfoPtr second = Cronet_RequestFinishedInfo_Create();
-
-  // Copy values from |first| to |second|.
-  Cronet_MetricsPtr test_metrics = Cronet_Metrics_Create();
-  EXPECT_EQ(Cronet_RequestFinishedInfo_metrics_get(first), nullptr);
-
-  Cronet_RequestFinishedInfo_metrics_set(first, test_metrics);
-  EXPECT_NE(Cronet_RequestFinishedInfo_metrics_get(first), nullptr);
-  Cronet_RequestFinishedInfo_metrics_set(first, nullptr);
-  EXPECT_EQ(Cronet_RequestFinishedInfo_metrics_get(first), nullptr);
-
-  Cronet_RequestFinishedInfo_metrics_move(first, test_metrics);
-  EXPECT_NE(Cronet_RequestFinishedInfo_metrics_get(first), nullptr);
-  Cronet_RequestFinishedInfo_metrics_move(first, nullptr);
-  EXPECT_EQ(Cronet_RequestFinishedInfo_metrics_get(first), nullptr);
-
-  Cronet_Metrics_Destroy(test_metrics);
-  // TODO(mef): Test array |annotations|.
-  Cronet_RequestFinishedInfo_finished_reason_set(
-      second, Cronet_RequestFinishedInfo_finished_reason_get(first));
-  EXPECT_EQ(Cronet_RequestFinishedInfo_finished_reason_get(first),
-            Cronet_RequestFinishedInfo_finished_reason_get(second));
-  Cronet_RequestFinishedInfo_Destroy(first);
-  Cronet_RequestFinishedInfo_Destroy(second);
-}
diff --git a/components/cronet/native/include/DEPS b/components/cronet/native/include/DEPS
deleted file mode 100644
index 0223c4a4e2104..0000000000000
--- a/components/cronet/native/include/DEPS
+++ /dev/null
@@ -1,8 +0,0 @@
-# Files in this directory are copied externally and can't have any dependencies
-include_rules = [
-  # TODO(mef): There doesn't appear to be a way to specify that no includes
-  # are allowed, so currently we just don't allow a dependency on //base, which
-  # should disqualify most code. It would be nice to be able to actual prevent
-  # all dependencies in the future.
-  "-base",
-]
\ No newline at end of file
diff --git a/components/cronet/native/include/cronet_c.h b/components/cronet/native/include/cronet_c.h
deleted file mode 100644
index 66a602125dce8..0000000000000
--- a/components/cronet/native/include/cronet_c.h
+++ /dev/null
@@ -1,38 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_INCLUDE_CRONET_C_H_
-#define COMPONENTS_CRONET_NATIVE_INCLUDE_CRONET_C_H_
-
-#include "cronet_export.h"
-
-// Cronet public C API is generated from cronet.idl
-#include "cronet.idl_c.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-// Stream Engine used by Bidirectional Stream C API for GRPC.
-typedef struct stream_engine stream_engine;
-
-// Additional Cronet C API not generated from cronet.idl.
-
-// Sets net::CertVerifier* raw_mock_cert_verifier for testing of Cronet_Engine.
-// Must be called before Cronet_Engine_InitWithParams().
-CRONET_EXPORT void Cronet_Engine_SetMockCertVerifierForTesting(
-    Cronet_EnginePtr engine,
-    /* net::CertVerifier* */ void* raw_mock_cert_verifier);
-
-// Returns "stream_engine" interface for bidirectionsl stream support for GRPC.
-// Returned stream engine is owned by Cronet Engine and is only valid until
-// Cronet_Engine_Shutdown().
-CRONET_EXPORT stream_engine* Cronet_Engine_GetStreamEngine(
-    Cronet_EnginePtr engine);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif  // COMPONENTS_CRONET_NATIVE_INCLUDE_CRONET_C_H_
diff --git a/components/cronet/native/include/cronet_export.h b/components/cronet/native/include/cronet_export.h
deleted file mode 100644
index 2e746901c6fce..0000000000000
--- a/components/cronet/native/include/cronet_export.h
+++ /dev/null
@@ -1,14 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_INCLUDE_CRONET_EXPORT_H_
-#define COMPONENTS_CRONET_NATIVE_INCLUDE_CRONET_EXPORT_H_
-
-#if defined(WIN32)
-#define CRONET_EXPORT __declspec(dllexport)
-#else
-#define CRONET_EXPORT __attribute__((visibility("default")))
-#endif
-
-#endif  // COMPONENTS_CRONET_NATIVE_INCLUDE_CRONET_EXPORT_H_
diff --git a/components/cronet/native/include/headers.gni b/components/cronet/native/include/headers.gni
deleted file mode 100644
index 506db3a8b661b..0000000000000
--- a/components/cronet/native/include/headers.gni
+++ /dev/null
@@ -1,5 +0,0 @@
-cronet_native_public_headers = [
-  "//components/cronet/native/generated/cronet.idl_c.h",
-  "//components/cronet/native/include/cronet_c.h",
-  "//components/cronet/native/include/cronet_export.h",
-]
diff --git a/components/cronet/native/io_buffer_with_cronet_buffer.cc b/components/cronet/native/io_buffer_with_cronet_buffer.cc
deleted file mode 100644
index 015700c99fc4d..0000000000000
--- a/components/cronet/native/io_buffer_with_cronet_buffer.cc
+++ /dev/null
@@ -1,60 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/io_buffer_with_cronet_buffer.h"
-
-#include "base/no_destructor.h"
-#include "components/cronet/native/generated/cronet.idl_impl_interface.h"
-
-namespace {
-// Implementation of Cronet_BufferCallback that doesn't free the data as it
-// is not owned by the buffer.
-class Cronet_BufferCallbackUnowned : public Cronet_BufferCallback {
- public:
-  Cronet_BufferCallbackUnowned() = default;
-
-  Cronet_BufferCallbackUnowned(const Cronet_BufferCallbackUnowned&) = delete;
-  Cronet_BufferCallbackUnowned& operator=(const Cronet_BufferCallbackUnowned&) =
-      delete;
-
-  ~Cronet_BufferCallbackUnowned() override = default;
-
-  void OnDestroy(Cronet_BufferPtr buffer) override {}
-};
-
-}  // namespace
-
-namespace cronet {
-
-IOBufferWithCronet_Buffer::IOBufferWithCronet_Buffer(
-    Cronet_BufferPtr cronet_buffer)
-    : net::WrappedIOBuffer(
-          reinterpret_cast<const char*>(cronet_buffer->GetData())),
-      cronet_buffer_(cronet_buffer) {}
-
-IOBufferWithCronet_Buffer::~IOBufferWithCronet_Buffer() {
-  if (cronet_buffer_) {
-    Cronet_Buffer_Destroy(cronet_buffer_.release());
-  }
-}
-
-Cronet_BufferPtr IOBufferWithCronet_Buffer::Release() {
-  data_ = nullptr;
-  return cronet_buffer_.release();
-}
-
-Cronet_BufferWithIOBuffer::Cronet_BufferWithIOBuffer(
-    scoped_refptr<net::IOBuffer> io_buffer,
-    size_t io_buffer_len)
-    : io_buffer_(std::move(io_buffer)),
-      io_buffer_len_(io_buffer_len),
-      cronet_buffer_(Cronet_Buffer_Create()) {
-  static base::NoDestructor<Cronet_BufferCallbackUnowned> static_callback;
-  cronet_buffer_->InitWithDataAndCallback(io_buffer_->data(), io_buffer_len_,
-                                          static_callback.get());
-}
-
-Cronet_BufferWithIOBuffer::~Cronet_BufferWithIOBuffer() = default;
-
-}  // namespace cronet
diff --git a/components/cronet/native/io_buffer_with_cronet_buffer.h b/components/cronet/native/io_buffer_with_cronet_buffer.h
deleted file mode 100644
index 6fca2383aa48c..0000000000000
--- a/components/cronet/native/io_buffer_with_cronet_buffer.h
+++ /dev/null
@@ -1,69 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_IO_BUFFER_WITH_CRONET_BUFFER_H_
-#define COMPONENTS_CRONET_NATIVE_IO_BUFFER_WITH_CRONET_BUFFER_H_
-
-#include <memory>
-
-#include "components/cronet/native/generated/cronet.idl_c.h"
-#include "net/base/io_buffer.h"
-
-namespace cronet {
-
-// net::WrappedIOBuffer subclass for a buffer owned by a Cronet_Buffer.
-// Keeps the Cronet_Buffer alive until destroyed or released.
-// Uses WrappedIOBuffer because data() is owned by the Cronet_Buffer.
-class IOBufferWithCronet_Buffer : public net::WrappedIOBuffer {
- public:
-  // Creates a buffer that takes ownership of the Cronet_Buffer.
-  explicit IOBufferWithCronet_Buffer(Cronet_BufferPtr cronet_buffer);
-
-  IOBufferWithCronet_Buffer(const IOBufferWithCronet_Buffer&) = delete;
-  IOBufferWithCronet_Buffer& operator=(const IOBufferWithCronet_Buffer&) =
-      delete;
-
-  // Releases ownership of |cronet_buffer_| and returns it to caller.
-  Cronet_BufferPtr Release();
-
- private:
-  ~IOBufferWithCronet_Buffer() override;
-
-  // Cronet buffer owned by |this|.
-  std::unique_ptr<Cronet_Buffer> cronet_buffer_;
-};
-
-// Represents a Cronet_Buffer backed by a net::IOBuffer. Keeps both the
-// net::IOBuffer and the Cronet_Buffer object alive until destroyed.
-class Cronet_BufferWithIOBuffer {
- public:
-  Cronet_BufferWithIOBuffer(scoped_refptr<net::IOBuffer> io_buffer,
-                            size_t io_buffer_len);
-
-  Cronet_BufferWithIOBuffer(const Cronet_BufferWithIOBuffer&) = delete;
-  Cronet_BufferWithIOBuffer& operator=(const Cronet_BufferWithIOBuffer&) =
-      delete;
-
-  ~Cronet_BufferWithIOBuffer();
-
-  const net::IOBuffer* io_buffer() const { return io_buffer_.get(); }
-  size_t io_buffer_len() const { return io_buffer_len_; }
-
-  // Returns pointer to Cronet buffer owned by |this|.
-  Cronet_BufferPtr cronet_buffer() {
-    CHECK(io_buffer_->HasAtLeastOneRef());
-    return cronet_buffer_.get();
-  }
-
- private:
-  scoped_refptr<net::IOBuffer> io_buffer_;
-  size_t io_buffer_len_;
-
-  // Cronet buffer owned by |this|.
-  std::unique_ptr<Cronet_Buffer> cronet_buffer_;
-};
-
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_NATIVE_IO_BUFFER_WITH_CRONET_BUFFER_H_
diff --git a/components/cronet/native/native_metrics_util.cc b/components/cronet/native/native_metrics_util.cc
deleted file mode 100644
index ba0472dba393c..0000000000000
--- a/components/cronet/native/native_metrics_util.cc
+++ /dev/null
@@ -1,28 +0,0 @@
-// Copyright 2019 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/native_metrics_util.h"
-
-#include "components/cronet/metrics_util.h"
-
-namespace cronet {
-
-namespace native_metrics_util {
-
-void ConvertTime(const base::TimeTicks& ticks,
-                 const base::TimeTicks& start_ticks,
-                 const base::Time& start_time,
-                 absl::optional<Cronet_DateTime>* out) {
-  Cronet_DateTime date_time;
-  date_time.value = metrics_util::ConvertTime(ticks, start_ticks, start_time);
-  if (date_time.value == metrics_util::kNullTime) {
-    (*out).reset();
-    return;
-  }
-  (*out).emplace(date_time);
-}
-
-}  // namespace native_metrics_util
-
-}  // namespace cronet
diff --git a/components/cronet/native/native_metrics_util.h b/components/cronet/native/native_metrics_util.h
deleted file mode 100644
index 177e4783ed025..0000000000000
--- a/components/cronet/native/native_metrics_util.h
+++ /dev/null
@@ -1,51 +0,0 @@
-// Copyright 2019 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_NATIVE_METRICS_UTIL_H_
-#define COMPONENTS_CRONET_NATIVE_NATIVE_METRICS_UTIL_H_
-
-#include "base/time/time.h"
-#include "components/cronet/native/generated/cronet.idl_impl_struct.h"
-#include "third_party/abseil-cpp/absl/types/optional.h"
-
-namespace cronet {
-
-namespace native_metrics_util {
-
-// Converts timing metrics stored as TimeTicks into the format expected by the
-// native layer: a absl::optional<Cronet_DateTime> (which may be valueless if
-// either |ticks| or |start_ticks| is null) -- this is returned via |out|. An
-// out parameter is used because Cronet IDL structs like Cronet_DateTime aren't
-// assignable.
-//
-// By calculating time values using a base (|start_ticks|, |start_time|) pair,
-// time values are normalized. This allows time deltas between pairs of events
-// to be accurately computed, even if the system clock changed between those
-// events, as long as times for both events were calculated using the same
-// (|start_ticks|, |start_time|) pair.
-//
-// Args:
-//
-// ticks: The ticks value corresponding to the time of the event -- the returned
-//        time corresponds to this event.
-//
-// start_ticks: Ticks measurement at some base time -- the ticks equivalent of
-//              start_time. Should be smaller than ticks.
-//
-// start_time: Time measurement at some base time -- the time equivalent of
-//             start_ticks. Must not be null.
-//
-// out: The output of the function -- the existing pointee object is mutated to
-//      either hold the new Cronet_DateTime or nothing (if either |ticks| or
-//      |start_ticks| is null).
-void ConvertTime(const base::TimeTicks& ticks,
-                 const base::TimeTicks& start_ticks,
-                 const base::Time& start_time,
-                 absl::optional<Cronet_DateTime>* out);
-
-}  // namespace native_metrics_util
-
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_NATIVE_NATIVE_METRICS_UTIL_H_
diff --git a/components/cronet/native/native_metrics_util_test.cc b/components/cronet/native/native_metrics_util_test.cc
deleted file mode 100644
index d11d1542b392c..0000000000000
--- a/components/cronet/native/native_metrics_util_test.cc
+++ /dev/null
@@ -1,76 +0,0 @@
-// Copyright 2019 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/native_metrics_util.h"
-
-#include "base/test/gtest_util.h"
-#include "base/time/time.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-namespace cronet {
-
-namespace native_metrics_util {
-
-namespace {
-
-TEST(NativeMetricsUtilTest, ConvertsTimes) {
-  constexpr auto start_delta = base::Milliseconds(20);
-  constexpr auto event_delta = base::Milliseconds(30);
-
-  absl::optional<Cronet_DateTime> converted;
-  ConvertTime(base::TimeTicks::UnixEpoch() + event_delta,
-              base::TimeTicks::UnixEpoch() + start_delta,
-              base::Time::UnixEpoch() + start_delta, &converted);
-  ASSERT_TRUE(converted.has_value());
-  EXPECT_EQ(converted->value, 30);
-}
-
-TEST(NativeMetricsUtilTest, OverwritesOldOutParam) {
-  constexpr auto start_delta = base::Milliseconds(20);
-  constexpr auto event_delta = base::Milliseconds(30);
-
-  absl::optional<Cronet_DateTime> converted;
-  converted.emplace();
-  converted->value = 60;
-  ConvertTime(base::TimeTicks::UnixEpoch() + event_delta,
-              base::TimeTicks::UnixEpoch() + start_delta,
-              base::Time::UnixEpoch() + start_delta, &converted);
-  ASSERT_TRUE(converted.has_value());
-  EXPECT_EQ(converted->value, 30);
-}
-
-TEST(NativeMetricsUtilTest, NullTicks) {
-  constexpr auto start_delta = base::Milliseconds(20);
-
-  absl::optional<Cronet_DateTime> converted;
-  ConvertTime(base::TimeTicks(), base::TimeTicks::UnixEpoch() + start_delta,
-              base::Time::UnixEpoch() + start_delta, &converted);
-  ASSERT_FALSE(converted.has_value());
-}
-
-TEST(NativeMetricsUtilTest, NullStartTicks) {
-  constexpr auto start_delta = base::Milliseconds(20);
-  constexpr auto event_delta = base::Milliseconds(30);
-
-  absl::optional<Cronet_DateTime> converted;
-  ConvertTime(base::TimeTicks::UnixEpoch() + event_delta, base::TimeTicks(),
-              base::Time::UnixEpoch() + start_delta, &converted);
-  ASSERT_FALSE(converted.has_value());
-}
-
-TEST(NativeMetricsUtilTest, NullStartTime) {
-  constexpr auto start_delta = base::Milliseconds(20);
-  constexpr auto event_delta = base::Milliseconds(30);
-
-  absl::optional<Cronet_DateTime> converted;
-  EXPECT_DCHECK_DEATH(ConvertTime(base::TimeTicks::UnixEpoch() + event_delta,
-                                  base::TimeTicks::UnixEpoch() + start_delta,
-                                  base::Time(), &converted));
-}
-
-}  // namespace
-
-}  // namespace native_metrics_util
-
-}  // namespace cronet
diff --git a/components/cronet/native/perftest/main.cc b/components/cronet/native/perftest/main.cc
deleted file mode 100644
index da332d4b6c2d4..0000000000000
--- a/components/cronet/native/perftest/main.cc
+++ /dev/null
@@ -1,16 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/perftest/perf_test.h"
-
-#include <ostream>
-
-#include "base/check_op.h"
-
-// When invoked, passes first and only argument to native performance test.
-int main(int argc, char* argv[]) {
-  CHECK_EQ(argc, 2) << "Must include experimental options in JSON as only arg.";
-  PerfTest(argv[1]);
-  return 0;
-}
diff --git a/components/cronet/native/perftest/perf_test.cc b/components/cronet/native/perftest/perf_test.cc
deleted file mode 100644
index 5fa4abf19aa74..0000000000000
--- a/components/cronet/native/perftest/perf_test.cc
+++ /dev/null
@@ -1,454 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include <string>
-
-#include "base/at_exit.h"
-#include "base/atomic_sequence_num.h"
-#include "base/check_op.h"
-#include "base/json/json_reader.h"
-#include "base/json/json_writer.h"
-#include "base/memory/raw_ptr.h"
-#include "base/memory/scoped_refptr.h"
-#include "base/run_loop.h"
-#include "base/strings/stringprintf.h"
-#include "base/task/single_thread_task_runner.h"
-#include "base/test/task_environment.h"
-#include "base/threading/thread_task_runner_handle.h"
-#include "base/values.h"
-#include "components/cronet/native/test/test_upload_data_provider.h"
-#include "components/cronet/native/test/test_url_request_callback.h"
-#include "components/cronet/native/test/test_util.h"
-#include "cronet_c.h"
-#include "net/base/net_errors.h"
-#include "net/cert/mock_cert_verifier.h"
-
-namespace {
-
-// Type of executor to use for a particular benchmark:
-enum ExecutorType {
-  EXECUTOR_DIRECT,  // Direct executor (on network thread).
-  EXECUTOR_THREAD,  // Post to main thread.
-};
-
-// Upload or download benchmark.
-enum Direction {
-  DIRECTION_UP,
-  DIRECTION_DOWN,
-};
-
-// Small or large benchmark payload.
-enum Size {
-  SIZE_LARGE,
-  SIZE_SMALL,
-};
-
-// Protocol to benchmark.
-enum Protocol {
-  PROTOCOL_HTTP,
-  PROTOCOL_QUIC,
-};
-
-// Dictionary of benchmark options.
-std::unique_ptr<base::Value::Dict> g_options;
-
-// Return a string configuration option.
-std::string GetConfigString(const char* key) {
-  const std::string* value = g_options->FindString(key);
-  CHECK(value) << "Cannot find key: " << key;
-  return *value;
-}
-
-// Return an int configuration option.
-int GetConfigInt(const char* key) {
-  absl::optional<int> config = g_options->FindInt(key);
-  CHECK(config) << "Cannot find key: " << key;
-  return *config;
-}
-
-// Put together a benchmark configuration into a benchmark name.
-// Make it fixed length for more readable tables.
-// Benchmark names are written to the JSON output file and slurped up by
-// Telemetry on the host.
-std::string BuildBenchmarkName(ExecutorType executor,
-                               Direction direction,
-                               Protocol protocol,
-                               int concurrency,
-                               int iterations) {
-  std::string name = direction == DIRECTION_UP ? "Up___" : "Down_";
-  switch (protocol) {
-    case PROTOCOL_HTTP:
-      name += "H_";
-      break;
-    case PROTOCOL_QUIC:
-      name += "Q_";
-      break;
-  }
-  name += std::to_string(iterations) + "_" + std::to_string(concurrency) + "_";
-  switch (executor) {
-    case EXECUTOR_DIRECT:
-      name += "ExDir";
-      break;
-    case EXECUTOR_THREAD:
-      name += "ExThr";
-      break;
-  }
-  return name;
-}
-
-// Cronet UploadDataProvider to use for benchmark.
-class UploadDataProvider : public cronet::test::TestUploadDataProvider {
- public:
-  // |length| indicates how many bytes to upload.
-  explicit UploadDataProvider(size_t length)
-      : TestUploadDataProvider(cronet::test::TestUploadDataProvider::SYNC,
-                               nullptr),
-        length_(length),
-        remaining_(length) {}
-
- private:
-  int64_t GetLength() const override { return length_; }
-
-  // Override of TestUploadDataProvider::Read() to simply report buffers filled.
-  void Read(Cronet_UploadDataSinkPtr upload_data_sink,
-            Cronet_BufferPtr buffer) override {
-    CHECK(remaining_ > 0);
-    size_t buffer_size = Cronet_Buffer_GetSize(buffer);
-    size_t sending = std::min(buffer_size, remaining_);
-    Cronet_UploadDataSink_OnReadSucceeded(upload_data_sink, sending, false);
-    remaining_ -= sending;
-  }
-
-  const size_t length_;
-  // Count of bytes remaining to be uploaded.
-  size_t remaining_;
-};
-
-// Cronet UrlRequestCallback to use for benchmarking.
-class Callback : public cronet::test::TestUrlRequestCallback {
- public:
-  Callback()
-      : TestUrlRequestCallback(true),
-        task_runner_(base::ThreadTaskRunnerHandle::Get()) {}
-  ~Callback() override { Cronet_UrlRequestCallback_Destroy(callback_); }
-
-  // Start one repeated UrlRequest. |iterations_completed| is used to keep track
-  // of how many requests have completed.  Final iteration should Quit()
-  // |run_loop|.
-  void Start(size_t buffer_size,
-             int iterations,
-             int concurrency,
-             size_t length,
-             const std::string& url,
-             base::AtomicSequenceNumber* iterations_completed,
-             Cronet_EnginePtr engine,
-             ExecutorType executor,
-             Direction direction,
-             base::RunLoop* run_loop) {
-    iterations_ = iterations;
-    concurrency_ = concurrency;
-    length_ = length;
-    url_ = &url;
-    iterations_completed_ = iterations_completed;
-    engine_ = engine;
-    callback_ = CreateUrlRequestCallback();
-    CHECK(!executor_);
-    switch (executor) {
-      case EXECUTOR_DIRECT:
-        // TestUrlRequestCallback(true) was called above, so parent will create
-        // a direct executor.
-        GetExecutor();
-        break;
-      case EXECUTOR_THREAD:
-        // Create an executor that posts back to this thread.
-        executor_ = Cronet_Executor_CreateWith(Callback::Execute);
-        Cronet_Executor_SetClientContext(executor_, this);
-        break;
-    }
-    CHECK(executor_);
-    direction_ = direction;
-    buffer_size_ = buffer_size;
-    run_loop_ = run_loop;
-    StartRequest();
-  }
-
- private:
-  // Create and start a UrlRequest.
-  void StartRequest() {
-    Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-    Cronet_UrlRequestParamsPtr request_params =
-        Cronet_UrlRequestParams_Create();
-    if (direction_ == DIRECTION_UP) {
-      // Create and set an UploadDataProvider on the UrlRequest.
-      upload_data_provider_ = std::make_unique<UploadDataProvider>(length_);
-      cronet_upload_data_provider_ =
-          upload_data_provider_->CreateUploadDataProvider();
-      Cronet_UrlRequestParams_upload_data_provider_set(
-          request_params, cronet_upload_data_provider_);
-      // Set Content-Type header.
-      Cronet_HttpHeaderPtr header = Cronet_HttpHeader_Create();
-      Cronet_HttpHeader_name_set(header, "Content-Type");
-      Cronet_HttpHeader_value_set(header, "application/octet-stream");
-      Cronet_UrlRequestParams_request_headers_add(request_params, header);
-      Cronet_HttpHeader_Destroy(header);
-    }
-    Cronet_UrlRequest_InitWithParams(request, engine_, url_->c_str(),
-                                     request_params, callback_, executor_);
-    Cronet_UrlRequestParams_Destroy(request_params);
-    Cronet_UrlRequest_Start(request);
-  }
-
-  void OnResponseStarted(Cronet_UrlRequestPtr request,
-                         Cronet_UrlResponseInfoPtr info) override {
-    CHECK_EQ(200, Cronet_UrlResponseInfo_http_status_code_get(info));
-    response_step_ = ON_RESPONSE_STARTED;
-    Cronet_BufferPtr buffer = Cronet_Buffer_Create();
-    Cronet_Buffer_InitWithAlloc(buffer, buffer_size_);
-    StartNextRead(request, buffer);
-  }
-
-  void OnSucceeded(Cronet_UrlRequestPtr request,
-                   Cronet_UrlResponseInfoPtr info) override {
-    Cronet_UrlRequest_Destroy(request);
-    if (cronet_upload_data_provider_)
-      Cronet_UploadDataProvider_Destroy(cronet_upload_data_provider_);
-
-    int iteration = iterations_completed_->GetNext();
-    // If this was the final iteration, quit the RunLoop.
-    if (iteration == (iterations_ - 1))
-      run_loop_->Quit();
-    // Don't start another request if complete.
-    if (iteration >= (iterations_ - concurrency_))
-      return;
-    // Start another request.
-    StartRequest();
-  }
-
-  void OnFailed(Cronet_UrlRequestPtr request,
-                Cronet_UrlResponseInfoPtr info,
-                Cronet_ErrorPtr error) override {
-    CHECK(false) << "Request failed with error code "
-                 << Cronet_Error_error_code_get(error) << ", QUIC error code "
-                 << Cronet_Error_quic_detailed_error_code_get(error)
-                 << ", message " << Cronet_Error_message_get(error);
-  }
-
-  // A simple executor that posts back to |task_runner_|.
-  static void Execute(Cronet_ExecutorPtr self, Cronet_RunnablePtr runnable) {
-    auto* callback =
-        static_cast<Callback*>(Cronet_Executor_GetClientContext(self));
-    callback->task_runner_->PostTask(
-        FROM_HERE, cronet::test::RunnableWrapper::CreateOnceClosure(runnable));
-  }
-
-  Direction direction_;
-  int iterations_;
-  int concurrency_;
-  size_t length_;
-  raw_ptr<const std::string> url_;
-  raw_ptr<base::AtomicSequenceNumber> iterations_completed_;
-  Cronet_EnginePtr engine_;
-  Cronet_UrlRequestCallbackPtr callback_;
-  Cronet_UploadDataProviderPtr cronet_upload_data_provider_ = nullptr;
-  scoped_refptr<base::SingleThreadTaskRunner> task_runner_;
-  raw_ptr<base::RunLoop> run_loop_;
-  size_t buffer_size_;
-  std::unique_ptr<UploadDataProvider> upload_data_provider_;
-};
-
-// An individual benchmark instance.
-class Benchmark {
- public:
-  ~Benchmark() { Cronet_Engine_Destroy(engine_); }
-
-  // Run and time the benchmark.
-  static void Run(ExecutorType executor,
-                  Direction direction,
-                  Size size,
-                  Protocol protocol,
-                  int concurrency,
-                  base::Value::Dict* results) {
-    std::string resource;
-    int iterations;
-    size_t length;
-    switch (size) {
-      case SIZE_SMALL:
-        resource = GetConfigString("SMALL_RESOURCE");
-        iterations = GetConfigInt("SMALL_ITERATIONS");
-        length = GetConfigInt("SMALL_RESOURCE_SIZE");
-        break;
-      case SIZE_LARGE:
-        // When measuring a large upload, only download a small amount so
-        // download time isn't significant.
-        resource = GetConfigString(
-            direction == DIRECTION_UP ? "SMALL_RESOURCE" : "LARGE_RESOURCE");
-        iterations = GetConfigInt("LARGE_ITERATIONS");
-        length = GetConfigInt("LARGE_RESOURCE_SIZE");
-        break;
-    }
-    std::string name = BuildBenchmarkName(executor, direction, protocol,
-                                          concurrency, iterations);
-    std::string scheme;
-    std::string host;
-    int port;
-    switch (protocol) {
-      case PROTOCOL_HTTP:
-        scheme = "http";
-        host = GetConfigString("HOST_IP");
-        port = GetConfigInt("HTTP_PORT");
-        break;
-      case PROTOCOL_QUIC:
-        scheme = "https";
-        host = GetConfigString("HOST");
-        port = GetConfigInt("QUIC_PORT");
-        break;
-    }
-    std::string url =
-        scheme + "://" + host + ":" + std::to_string(port) + "/" + resource;
-    size_t buffer_size = length > (size_t)GetConfigInt("MAX_BUFFER_SIZE")
-                             ? GetConfigInt("MAX_BUFFER_SIZE")
-                             : length;
-    Benchmark(executor, direction, size, protocol, concurrency, iterations,
-              length, buffer_size, name, url, host, port, results)
-        .RunInternal();
-  }
-
- private:
-  Benchmark(ExecutorType executor,
-            Direction direction,
-            Size size,
-            Protocol protocol,
-            int concurrency,
-            int iterations,
-            size_t length,
-            size_t buffer_size,
-            const std::string& name,
-            const std::string& url,
-            const std::string& host,
-            int port,
-            base::Value::Dict* results)
-      : iterations_(iterations),
-        concurrency_(concurrency),
-        length_(length),
-        buffer_size_(buffer_size),
-        name_(name),
-        url_(url),
-        callbacks_(concurrency),
-        executor_(executor),
-        direction_(direction),
-        results_(results) {
-    Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-    // Add Host Resolver Rules.
-    std::string host_resolver_rules =
-        "MAP test.example.com " + GetConfigString("HOST_IP") + ",";
-    Cronet_EngineParams_experimental_options_set(
-        engine_params,
-        base::StringPrintf(
-            "{ \"HostResolverRules\": { \"host_resolver_rules\" : \"%s\" } }",
-            host_resolver_rules.c_str())
-            .c_str());
-    // Create Cronet Engine.
-    engine_ = Cronet_Engine_Create();
-    if (protocol == PROTOCOL_QUIC) {
-      Cronet_EngineParams_enable_quic_set(engine_params, true);
-      // Set QUIC hint.
-      Cronet_QuicHintPtr quic_hint = Cronet_QuicHint_Create();
-      Cronet_QuicHint_host_set(quic_hint, host.c_str());
-      Cronet_QuicHint_port_set(quic_hint, port);
-      Cronet_QuicHint_alternate_port_set(quic_hint, port);
-      Cronet_EngineParams_quic_hints_add(engine_params, quic_hint);
-      Cronet_QuicHint_Destroy(quic_hint);
-      // Set Mock Cert Verifier.
-      auto cert_verifier = std::make_unique<net::MockCertVerifier>();
-      cert_verifier->set_default_result(net::OK);
-      Cronet_Engine_SetMockCertVerifierForTesting(engine_,
-                                                  cert_verifier.release());
-    }
-
-    // Start Cronet Engine.
-    Cronet_Engine_StartWithParams(engine_, engine_params);
-    Cronet_EngineParams_Destroy(engine_params);
-  }
-
-  // Run and time the benchmark.
-  void RunInternal() {
-    base::RunLoop run_loop;
-    base::TimeTicks start_time = base::TimeTicks::Now();
-    // Start all concurrent requests.
-    for (auto& callback : callbacks_) {
-      callback.Start(buffer_size_, iterations_, concurrency_, length_, url_,
-                     &iterations_completed_, engine_, executor_, direction_,
-                     &run_loop);
-    }
-    run_loop.Run();
-    base::TimeDelta run_time = base::TimeTicks::Now() - start_time;
-    results_->Set(name_, static_cast<int>(run_time.InMilliseconds()));
-  }
-
-  scoped_refptr<base::SingleThreadTaskRunner> task_runner_;
-  const int iterations_;
-  const int concurrency_;
-  const size_t length_;
-  const size_t buffer_size_;
-  const std::string name_;
-  const std::string url_;
-  std::vector<Callback> callbacks_;
-  base::AtomicSequenceNumber iterations_completed_;
-  Cronet_EnginePtr engine_;
-  const ExecutorType executor_;
-  const Direction direction_;
-  const raw_ptr<base::Value::Dict> results_;
-};
-
-}  // namespace
-
-void PerfTest(const char* json_args) {
-  base::AtExitManager exit_manager;
-
-  // Initialize the benchmark environment. See
-  // https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/threading_and_tasks_testing.md#full-fledged-base_test_taskenvironment
-  // for more details.
-  base::test::TaskEnvironment task_environment;
-
-  // Parse benchmark options into |g_options|.
-  std::string benchmark_options = json_args;
-  absl::optional<base::Value> options_value =
-      base::JSONReader::Read(benchmark_options);
-  CHECK(options_value) << "Parsing benchmark options failed: "
-                       << benchmark_options;
-  CHECK(options_value->is_dict())
-      << "Benchmark options string is not a dictionary: " << benchmark_options
-      << " See DEFAULT_BENCHMARK_CONFIG in perf_test_util.py.";
-  g_options =
-      std::make_unique<base::Value::Dict>(std::move(*options_value).TakeDict());
-
-  // Run benchmarks putting timing results into |results|.
-  base::Value::Dict results;
-  for (ExecutorType executor : {EXECUTOR_DIRECT, EXECUTOR_THREAD}) {
-    for (Direction direction : {DIRECTION_DOWN, DIRECTION_UP}) {
-      for (Protocol protocol : {PROTOCOL_HTTP, PROTOCOL_QUIC}) {
-        // Run large and small benchmarks one at a time to test single-threaded
-        // use. Also run them four at a time to see how they benefit from
-        // concurrency. The value four was chosen as many devices are now
-        // quad-core.
-        Benchmark::Run(executor, direction, SIZE_LARGE, protocol, 1, &results);
-        Benchmark::Run(executor, direction, SIZE_LARGE, protocol, 4, &results);
-        Benchmark::Run(executor, direction, SIZE_SMALL, protocol, 1, &results);
-        Benchmark::Run(executor, direction, SIZE_SMALL, protocol, 4, &results);
-        // Large benchmarks are generally bandwidth bound and unaffected by
-        // per-request overhead.  Small benchmarks are not, so test at
-        // further increased concurrency to see if further benefit is possible.
-        Benchmark::Run(executor, direction, SIZE_SMALL, protocol, 8, &results);
-      }
-    }
-  }
-
-  // Write |results| into results file.
-  std::string results_string;
-  base::JSONWriter::Write(results, &results_string);
-  FILE* results_file = fopen(GetConfigString("RESULTS_FILE").c_str(), "wb");
-  fwrite(results_string.c_str(), results_string.length(), 1, results_file);
-  fclose(results_file);
-  fclose(fopen(GetConfigString("DONE_FILE").c_str(), "wb"));
-}
diff --git a/components/cronet/native/perftest/perf_test.h b/components/cronet/native/perftest/perf_test.h
deleted file mode 100644
index 6b83dda96f464..0000000000000
--- a/components/cronet/native/perftest/perf_test.h
+++ /dev/null
@@ -1,12 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_PERFTEST_PERF_TEST_H_
-#define COMPONENTS_CRONET_NATIVE_PERFTEST_PERF_TEST_H_
-
-// Run Cronet native performance test. |json_args| is the string containing
-// the JSON formatted arguments from components/cronet/native/perftest/run.py.
-void PerfTest(const char* json_args);
-
-#endif  // COMPONENTS_CRONET_NATIVE_PERFTEST_PERF_TEST_H_
diff --git a/components/cronet/native/perftest/run.py b/components/cronet/native/perftest/run.py
deleted file mode 100755
index 25d2af91ddd94..0000000000000
--- a/components/cronet/native/perftest/run.py
+++ /dev/null
@@ -1,71 +0,0 @@
-#!/usr/bin/env python
-# Copyright 2018 The Chromium Authors
-# Use of this source code is governed by a BSD-style license that can be
-# found in the LICENSE file.
-
-"""This script runs an automated Cronet native performance benchmark.
-
-This script:
-1. Starts HTTP and QUIC servers on the host machine.
-2. Runs benchmark executable.
-
-Prerequisites:
-1. quic_server and cronet_native_perf_test have been built for the host machine,
-   e.g. via:
-     gn gen out/Release --args="is_debug=false"
-     ninja -C out/Release quic_server cronet_native_perf_test
-2. sudo apt-get install lighttpd
-
-Invocation:
-./run.py
-
-Output:
-Benchmark timings are output to /tmp/cronet_perf_test_results.txt
-
-"""
-
-import json
-import os
-import shutil
-import sys
-import tempfile
-
-REPOSITORY_ROOT = os.path.abspath(os.path.join(
-    os.path.dirname(__file__), '..', '..', '..', '..'))
-
-sys.path.append(os.path.join(REPOSITORY_ROOT, 'build', 'android'))
-import lighttpd_server  # pylint: disable=wrong-import-position
-sys.path.append(os.path.join(REPOSITORY_ROOT, 'components'))
-from cronet.tools import perf_test_utils  # pylint: disable=wrong-import-position
-
-def main():
-  device = perf_test_utils.NativeDevice()
-  # Start HTTP server.
-  http_server_doc_root = perf_test_utils.GenerateHttpTestResources()
-  config_file = tempfile.NamedTemporaryFile()
-  http_server = lighttpd_server.LighttpdServer(http_server_doc_root,
-      port=perf_test_utils.HTTP_PORT,
-      base_config_path=config_file.name)
-  perf_test_utils.GenerateLighttpdConfig(config_file, http_server_doc_root,
-                                         http_server)
-  assert http_server.StartupHttpServer()
-  config_file.close()
-  # Start QUIC server.
-  quic_server_doc_root = perf_test_utils.GenerateQuicTestResources(device)
-  quic_server = perf_test_utils.QuicServer(quic_server_doc_root)
-  quic_server.StartupQuicServer(device)
-  # Run test
-  os.environ['LD_LIBRARY_PATH'] = perf_test_utils.BUILD_DIR
-  device.RunShellCommand(
-      [os.path.join(perf_test_utils.BUILD_DIR, 'cronet_native_perf_test'),
-          json.dumps(perf_test_utils.GetConfig(device))],
-      check_return=True)
-  # Shutdown.
-  quic_server.ShutdownQuicServer()
-  shutil.rmtree(quic_server_doc_root)
-  http_server.ShutdownHttpServer()
-  shutil.rmtree(http_server_doc_root)
-
-
-if __name__ == '__main__':
-  main()
diff --git a/components/cronet/native/runnables.cc b/components/cronet/native/runnables.cc
deleted file mode 100644
index c0dc6a8253ece..0000000000000
--- a/components/cronet/native/runnables.cc
+++ /dev/null
@@ -1,20 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/runnables.h"
-
-#include <utility>
-
-namespace cronet {
-
-OnceClosureRunnable::OnceClosureRunnable(base::OnceClosure task)
-    : task_(std::move(task)) {}
-
-OnceClosureRunnable::~OnceClosureRunnable() = default;
-
-void OnceClosureRunnable::Run() {
-  std::move(task_).Run();
-}
-
-}  // namespace cronet
diff --git a/components/cronet/native/runnables.h b/components/cronet/native/runnables.h
deleted file mode 100644
index 8b2381348f913..0000000000000
--- a/components/cronet/native/runnables.h
+++ /dev/null
@@ -1,33 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_RUNNABLES_H_
-#define COMPONENTS_CRONET_NATIVE_RUNNABLES_H_
-
-#include "base/callback.h"
-#include "components/cronet/native/generated/cronet.idl_impl_interface.h"
-
-namespace cronet {
-
-// Implementation of CronetRunnable that runs arbitrary base::OnceClosure.
-// Runnable destroys itself after execution.
-class OnceClosureRunnable : public Cronet_Runnable {
- public:
-  explicit OnceClosureRunnable(base::OnceClosure task);
-
-  OnceClosureRunnable(const OnceClosureRunnable&) = delete;
-  OnceClosureRunnable& operator=(const OnceClosureRunnable&) = delete;
-
-  ~OnceClosureRunnable() override;
-
-  void Run() override;
-
- private:
-  // Closure to run.
-  base::OnceClosure task_;
-};
-
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_NATIVE_RUNNABLES_H_
diff --git a/components/cronet/native/runnables_unittest.cc b/components/cronet/native/runnables_unittest.cc
deleted file mode 100644
index 671be5f09f269..0000000000000
--- a/components/cronet/native/runnables_unittest.cc
+++ /dev/null
@@ -1,203 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/runnables.h"
-
-#include <string>
-
-#include "base/bind.h"
-#include "base/check.h"
-#include "base/run_loop.h"
-#include "base/test/task_environment.h"
-#include "components/cronet/native/generated/cronet.idl_impl_interface.h"
-#include "components/cronet/native/include/cronet_c.h"
-#include "components/cronet/native/test/test_util.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-namespace {
-
-class RunnablesTest : public ::testing::Test {
- public:
-  RunnablesTest() = default;
-
-  RunnablesTest(const RunnablesTest&) = delete;
-  RunnablesTest& operator=(const RunnablesTest&) = delete;
-
-  ~RunnablesTest() override {}
-
- protected:
-  static void UrlRequestCallback_OnRedirectReceived(
-      Cronet_UrlRequestCallbackPtr self,
-      Cronet_UrlRequestPtr request,
-      Cronet_UrlResponseInfoPtr info,
-      Cronet_String newLocationUrl);
-  static void UrlRequestCallback_OnResponseStarted(
-      Cronet_UrlRequestCallbackPtr self,
-      Cronet_UrlRequestPtr request,
-      Cronet_UrlResponseInfoPtr info);
-  static void UrlRequestCallback_OnReadCompleted(
-      Cronet_UrlRequestCallbackPtr self,
-      Cronet_UrlRequestPtr request,
-      Cronet_UrlResponseInfoPtr info,
-      Cronet_BufferPtr buffer,
-      uint64_t bytesRead);
-
-  bool callback_called() const { return callback_called_; }
-
-  // Provide a message loop for use by TestExecutor instances.
-  base::test::SingleThreadTaskEnvironment task_environment_;
-
- private:
-  bool callback_called_ = false;
-};
-
-class OnRedirectReceived_Runnable : public Cronet_Runnable {
- public:
-  OnRedirectReceived_Runnable(Cronet_UrlRequestCallbackPtr callback,
-                              Cronet_String new_location_url)
-      : callback_(callback), new_location_url_(new_location_url) {}
-
-  ~OnRedirectReceived_Runnable() override = default;
-
-  void Run() override {
-    Cronet_UrlRequestCallback_OnRedirectReceived(
-        callback_, /* request = */ nullptr, /* info = */ nullptr,
-        new_location_url_.c_str());
-  }
-
- private:
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback_;
-  // New location to redirect to.
-  std::string new_location_url_;
-};
-
-// Implementation of Cronet_UrlRequestCallback methods for testing.
-
-// static
-void RunnablesTest::UrlRequestCallback_OnRedirectReceived(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_String newLocationUrl) {
-  CHECK(self);
-  Cronet_ClientContext context =
-      Cronet_UrlRequestCallback_GetClientContext(self);
-  RunnablesTest* test = static_cast<RunnablesTest*>(context);
-  CHECK(test);
-  test->callback_called_ = true;
-  ASSERT_STREQ(newLocationUrl, "newUrl");
-}
-
-// static
-void RunnablesTest::UrlRequestCallback_OnResponseStarted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info) {
-  CHECK(self);
-  Cronet_ClientContext context =
-      Cronet_UrlRequestCallback_GetClientContext(self);
-  RunnablesTest* test = static_cast<RunnablesTest*>(context);
-  CHECK(test);
-  test->callback_called_ = true;
-}
-
-// static
-void RunnablesTest::UrlRequestCallback_OnReadCompleted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_BufferPtr buffer,
-    uint64_t bytesRead) {
-  CHECK(self);
-  CHECK(buffer);
-  // Destroy the |buffer|.
-  Cronet_Buffer_Destroy(buffer);
-  Cronet_ClientContext context =
-      Cronet_UrlRequestCallback_GetClientContext(self);
-  RunnablesTest* test = static_cast<RunnablesTest*>(context);
-  CHECK(test);
-  test->callback_called_ = true;
-}
-
-// Example of posting application callback to the executor.
-TEST_F(RunnablesTest, TestRunCallbackOnExecutor) {
-  // Executor provided by the application.
-  Cronet_ExecutorPtr executor = cronet::test::CreateTestExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback = Cronet_UrlRequestCallback_CreateWith(
-      RunnablesTest::UrlRequestCallback_OnRedirectReceived,
-      /* OnResponseStartedFunc = */ nullptr,
-      /* OnReadCompletedFunc = */ nullptr,
-      /* OnSucceededFunc = */ nullptr,
-      /* OnFailedFunc = */ nullptr,
-      /* OnCanceledFunc = */ nullptr);
-  // New location to redirect to.
-  Cronet_String new_location_url = "newUrl";
-  // Invoke Cronet_UrlRequestCallback_OnRedirectReceived
-  Cronet_RunnablePtr runnable =
-      new OnRedirectReceived_Runnable(callback, new_location_url);
-  new_location_url = "bad";
-  Cronet_UrlRequestCallback_SetClientContext(callback, this);
-  Cronet_Executor_Execute(executor, runnable);
-  base::RunLoop().RunUntilIdle();
-  ASSERT_TRUE(callback_called());
-  Cronet_Executor_Destroy(executor);
-  Cronet_UrlRequestCallback_Destroy(callback);
-}
-
-// Example of posting application callback to the executor using OneClosure.
-TEST_F(RunnablesTest, TestRunOnceClosureOnExecutor) {
-  // Executor provided by the application.
-  Cronet_ExecutorPtr executor = cronet::test::CreateTestExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback = Cronet_UrlRequestCallback_CreateWith(
-      RunnablesTest::UrlRequestCallback_OnRedirectReceived,
-      RunnablesTest::UrlRequestCallback_OnResponseStarted,
-      /* OnReadCompletedFunc = */ nullptr,
-      /* OnSucceededFunc = */ nullptr,
-      /* OnFailedFunc = */ nullptr,
-      /* OnCanceledFunc = */ nullptr);
-  // Invoke Cronet_UrlRequestCallback_OnResponseStarted using OnceClosure
-  Cronet_RunnablePtr runnable = new cronet::OnceClosureRunnable(
-      base::BindOnce(Cronet_UrlRequestCallback_OnResponseStarted, callback,
-                     /* request = */ nullptr, /* info = */ nullptr));
-  Cronet_UrlRequestCallback_SetClientContext(callback, this);
-  Cronet_Executor_Execute(executor, runnable);
-  base::RunLoop().RunUntilIdle();
-  ASSERT_TRUE(callback_called());
-  Cronet_Executor_Destroy(executor);
-  Cronet_UrlRequestCallback_Destroy(callback);
-}
-
-// Example of posting application callback to the executor and passing
-// Cronet_Buffer to it.
-TEST_F(RunnablesTest, TestCronetBuffer) {
-  // Executor provided by the application.
-  Cronet_ExecutorPtr executor = cronet::test::CreateTestExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback = Cronet_UrlRequestCallback_CreateWith(
-      RunnablesTest::UrlRequestCallback_OnRedirectReceived,
-      RunnablesTest::UrlRequestCallback_OnResponseStarted,
-      RunnablesTest::UrlRequestCallback_OnReadCompleted,
-      /* OnSucceededFunc = */ nullptr,
-      /* OnFailedFunc = */ nullptr,
-      /* OnCanceledFunc = */ nullptr);
-  // Create Cronet buffer and allocate buffer data.
-  Cronet_BufferPtr buffer = Cronet_Buffer_Create();
-  Cronet_Buffer_InitWithAlloc(buffer, 20);
-  // Invoke Cronet_UrlRequestCallback_OnReadCompleted using OnceClosure.
-  Cronet_RunnablePtr runnable = new cronet::OnceClosureRunnable(base::BindOnce(
-      RunnablesTest::UrlRequestCallback_OnReadCompleted, callback,
-      /* request = */ nullptr,
-      /* info = */ nullptr, buffer, /* bytes_read = */ 0));
-  Cronet_UrlRequestCallback_SetClientContext(callback, this);
-  Cronet_Executor_Execute(executor, runnable);
-  base::RunLoop().RunUntilIdle();
-  ASSERT_TRUE(callback_called());
-  Cronet_Executor_Destroy(executor);
-  Cronet_UrlRequestCallback_Destroy(callback);
-}
-
-}  // namespace
diff --git a/components/cronet/native/sample/DEPS b/components/cronet/native/sample/DEPS
deleted file mode 100644
index 0223c4a4e2104..0000000000000
--- a/components/cronet/native/sample/DEPS
+++ /dev/null
@@ -1,8 +0,0 @@
-# Files in this directory are copied externally and can't have any dependencies
-include_rules = [
-  # TODO(mef): There doesn't appear to be a way to specify that no includes
-  # are allowed, so currently we just don't allow a dependency on //base, which
-  # should disqualify most code. It would be nice to be able to actual prevent
-  # all dependencies in the future.
-  "-base",
-]
\ No newline at end of file
diff --git a/components/cronet/native/sample/main.cc b/components/cronet/native/sample/main.cc
deleted file mode 100644
index 0cbbdce569e14..0000000000000
--- a/components/cronet/native/sample/main.cc
+++ /dev/null
@@ -1,59 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include <iostream>
-
-#include "cronet_c.h"
-#include "sample_executor.h"
-#include "sample_url_request_callback.h"
-
-Cronet_EnginePtr CreateCronetEngine() {
-  Cronet_EnginePtr cronet_engine = Cronet_Engine_Create();
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_EngineParams_user_agent_set(engine_params, "CronetSample/1");
-  Cronet_EngineParams_enable_quic_set(engine_params, true);
-
-  Cronet_Engine_StartWithParams(cronet_engine, engine_params);
-  Cronet_EngineParams_Destroy(engine_params);
-  return cronet_engine;
-}
-
-void PerformRequest(Cronet_EnginePtr cronet_engine,
-                    const std::string& url,
-                    Cronet_ExecutorPtr executor) {
-  SampleUrlRequestCallback url_request_callback;
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  Cronet_UrlRequestParams_http_method_set(request_params, "GET");
-
-  Cronet_UrlRequest_InitWithParams(
-      request, cronet_engine, url.c_str(), request_params,
-      url_request_callback.GetUrlRequestCallback(), executor);
-  Cronet_UrlRequestParams_Destroy(request_params);
-
-  Cronet_UrlRequest_Start(request);
-  url_request_callback.WaitForDone();
-  Cronet_UrlRequest_Destroy(request);
-
-  std::cout << "Response Data:" << std::endl
-            << url_request_callback.response_as_string() << std::endl;
-}
-
-// Download a resource from the Internet. Optional argument must specify
-// a valid URL.
-int main(int argc, const char* argv[]) {
-  std::cout << "Hello from Cronet!\n";
-  Cronet_EnginePtr cronet_engine = CreateCronetEngine();
-  std::cout << "Cronet version: "
-            << Cronet_Engine_GetVersionString(cronet_engine) << std::endl;
-
-  std::string url(argc > 1 ? argv[1] : "https://www.example.com");
-  std::cout << "URL: " << url << std::endl;
-  SampleExecutor executor;
-  PerformRequest(cronet_engine, url, executor.GetExecutor());
-
-  Cronet_Engine_Shutdown(cronet_engine);
-  Cronet_Engine_Destroy(cronet_engine);
-  return 0;
-}
diff --git a/components/cronet/native/sample/sample_executor.cc b/components/cronet/native/sample/sample_executor.cc
deleted file mode 100644
index f642a88f9636c..0000000000000
--- a/components/cronet/native/sample/sample_executor.cc
+++ /dev/null
@@ -1,93 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "sample_executor.h"
-
-SampleExecutor::SampleExecutor()
-    : executor_thread_(SampleExecutor::ThreadLoop, this),
-      executor_(Cronet_Executor_CreateWith(SampleExecutor::Execute)) {
-  Cronet_Executor_SetClientContext(executor_, this);
-}
-
-SampleExecutor::~SampleExecutor() {
-  ShutdownExecutor();
-  Cronet_Executor_Destroy(executor_);
-}
-
-Cronet_ExecutorPtr SampleExecutor::GetExecutor() {
-  return executor_;
-}
-
-void SampleExecutor::ShutdownExecutor() {
-  // Break tasks loop.
-  {
-    std::lock_guard<std::mutex> lock(lock_);
-    stop_thread_loop_ = true;
-  }
-  task_available_.notify_one();
-  // Wait for executor thread.
-  executor_thread_.join();
-}
-
-void SampleExecutor::RunTasksInQueue() {
-  // Process runnables in |task_queue_|.
-  while (true) {
-    Cronet_RunnablePtr runnable = nullptr;
-    {
-      // Wait for a task to run or stop signal.
-      std::unique_lock<std::mutex> lock(lock_);
-      while (task_queue_.empty() && !stop_thread_loop_)
-        task_available_.wait(lock);
-
-      if (stop_thread_loop_)
-        break;
-
-      if (task_queue_.empty())
-        continue;
-
-      runnable = task_queue_.front();
-      task_queue_.pop();
-    }
-    Cronet_Runnable_Run(runnable);
-    Cronet_Runnable_Destroy(runnable);
-  }
-  // Delete remaining tasks.
-  std::queue<Cronet_RunnablePtr> tasks_to_destroy;
-  {
-    std::unique_lock<std::mutex> lock(lock_);
-    tasks_to_destroy.swap(task_queue_);
-  }
-  while (!tasks_to_destroy.empty()) {
-    Cronet_Runnable_Destroy(tasks_to_destroy.front());
-    tasks_to_destroy.pop();
-  }
-}
-
-/* static */
-void SampleExecutor::ThreadLoop(SampleExecutor* executor) {
-  executor->RunTasksInQueue();
-}
-
-void SampleExecutor::Execute(Cronet_RunnablePtr runnable) {
-  {
-    std::lock_guard<std::mutex> lock(lock_);
-    if (!stop_thread_loop_) {
-      task_queue_.push(runnable);
-      runnable = nullptr;
-    }
-  }
-  if (runnable) {
-    Cronet_Runnable_Destroy(runnable);
-  } else {
-    task_available_.notify_one();
-  }
-}
-
-/* static */
-void SampleExecutor::Execute(Cronet_ExecutorPtr self,
-                             Cronet_RunnablePtr runnable) {
-  auto* executor =
-      static_cast<SampleExecutor*>(Cronet_Executor_GetClientContext(self));
-  executor->Execute(runnable);
-}
diff --git a/components/cronet/native/sample/sample_executor.h b/components/cronet/native/sample/sample_executor.h
deleted file mode 100644
index 21cf47e991ed1..0000000000000
--- a/components/cronet/native/sample/sample_executor.h
+++ /dev/null
@@ -1,56 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_SAMPLE_SAMPLE_EXECUTOR_H_
-#define COMPONENTS_CRONET_NATIVE_SAMPLE_SAMPLE_EXECUTOR_H_
-
-// Cronet sample is expected to be used outside of Chromium infrastructure,
-// and as such has to rely on STL directly instead of //base alternatives.
-#include <condition_variable>
-#include <mutex>
-#include <queue>
-#include <thread>
-
-#include "cronet_c.h"
-
-// Sample implementation of Cronet_Executor interface using static
-// methods to map C API into instance of C++ class.
-class SampleExecutor {
- public:
-  SampleExecutor();
-  ~SampleExecutor();
-
-  // Gets Cronet_ExecutorPtr implemented by |this|.
-  Cronet_ExecutorPtr GetExecutor();
-
-  // Shuts down the executor, so all pending tasks are destroyed without
-  // getting executed.
-  void ShutdownExecutor();
-
- private:
-  // Runs tasks in |task_queue_| until |stop_thread_loop_| is set to true.
-  void RunTasksInQueue();
-  static void ThreadLoop(SampleExecutor* executor);
-
-  // Adds |runnable| to |task_queue_| to execute on |executor_thread_|.
-  void Execute(Cronet_RunnablePtr runnable);
-  // Implementation of Cronet_Executor methods.
-  static void Execute(Cronet_ExecutorPtr self, Cronet_RunnablePtr runnable);
-
-  // Synchronise access to |task_queue_| and |stop_thread_loop_|;
-  std::mutex lock_;
-  // Tasks to run.
-  std::queue<Cronet_RunnablePtr> task_queue_;
-  // Notified if task is added to |task_queue_| or |stop_thread_loop_| is set.
-  std::condition_variable task_available_;
-  // Set to true to stop running tasks.
-  bool stop_thread_loop_ = false;
-
-  // Thread on which tasks are executed.
-  std::thread executor_thread_;
-
-  Cronet_ExecutorPtr const executor_;
-};
-
-#endif  // COMPONENTS_CRONET_NATIVE_SAMPLE_SAMPLE_EXECUTOR_H_
diff --git a/components/cronet/native/sample/sample_url_request_callback.cc b/components/cronet/native/sample/sample_url_request_callback.cc
deleted file mode 100644
index 396e27dbd27d2..0000000000000
--- a/components/cronet/native/sample/sample_url_request_callback.cc
+++ /dev/null
@@ -1,138 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "sample_url_request_callback.h"
-
-#include <iostream>
-
-SampleUrlRequestCallback::SampleUrlRequestCallback()
-    : callback_(Cronet_UrlRequestCallback_CreateWith(
-          SampleUrlRequestCallback::OnRedirectReceived,
-          SampleUrlRequestCallback::OnResponseStarted,
-          SampleUrlRequestCallback::OnReadCompleted,
-          SampleUrlRequestCallback::OnSucceeded,
-          SampleUrlRequestCallback::OnFailed,
-          SampleUrlRequestCallback::OnCanceled)) {
-  Cronet_UrlRequestCallback_SetClientContext(callback_, this);
-}
-
-SampleUrlRequestCallback::~SampleUrlRequestCallback() {
-  Cronet_UrlRequestCallback_Destroy(callback_);
-}
-
-Cronet_UrlRequestCallbackPtr SampleUrlRequestCallback::GetUrlRequestCallback() {
-  return callback_;
-}
-
-void SampleUrlRequestCallback::OnRedirectReceived(
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_String newLocationUrl) {
-  std::cout << "OnRedirectReceived called: " << newLocationUrl << std::endl;
-  Cronet_UrlRequest_FollowRedirect(request);
-}
-
-void SampleUrlRequestCallback::OnResponseStarted(
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info) {
-  std::cout << "OnResponseStarted called." << std::endl;
-  std::cout << "HTTP Status: "
-            << Cronet_UrlResponseInfo_http_status_code_get(info) << " "
-            << Cronet_UrlResponseInfo_http_status_text_get(info) << std::endl;
-  // Create and allocate 32kb buffer.
-  Cronet_BufferPtr buffer = Cronet_Buffer_Create();
-  Cronet_Buffer_InitWithAlloc(buffer, 32 * 1024);
-  // Started reading the response.
-  Cronet_UrlRequest_Read(request, buffer);
-}
-
-void SampleUrlRequestCallback::OnReadCompleted(Cronet_UrlRequestPtr request,
-                                               Cronet_UrlResponseInfoPtr info,
-                                               Cronet_BufferPtr buffer,
-                                               uint64_t bytes_read) {
-  std::cout << "OnReadCompleted called: " << bytes_read << " bytes read."
-            << std::endl;
-  std::string last_read_data(
-      reinterpret_cast<char*>(Cronet_Buffer_GetData(buffer)), bytes_read);
-  response_as_string_ += last_read_data;
-  // Continue reading the response.
-  Cronet_UrlRequest_Read(request, buffer);
-}
-
-void SampleUrlRequestCallback::OnSucceeded(Cronet_UrlRequestPtr request,
-                                           Cronet_UrlResponseInfoPtr info) {
-  std::cout << "OnSucceeded called." << std::endl;
-  SignalDone(true);
-}
-
-void SampleUrlRequestCallback::OnFailed(Cronet_UrlRequestPtr request,
-                                        Cronet_UrlResponseInfoPtr info,
-                                        Cronet_ErrorPtr error) {
-  std::cout << "OnFailed called: " << Cronet_Error_message_get(error)
-            << std::endl;
-  last_error_message_ = Cronet_Error_message_get(error);
-  SignalDone(false);
-}
-
-void SampleUrlRequestCallback::OnCanceled(Cronet_UrlRequestPtr request,
-                                          Cronet_UrlResponseInfoPtr info) {
-  std::cout << "OnCanceled called." << std::endl;
-  SignalDone(false);
-}
-
-/* static */
-SampleUrlRequestCallback* SampleUrlRequestCallback::GetThis(
-    Cronet_UrlRequestCallbackPtr self) {
-  return static_cast<SampleUrlRequestCallback*>(
-      Cronet_UrlRequestCallback_GetClientContext(self));
-}
-
-/* static */
-void SampleUrlRequestCallback::OnRedirectReceived(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_String newLocationUrl) {
-  GetThis(self)->OnRedirectReceived(request, info, newLocationUrl);
-}
-
-/* static */
-void SampleUrlRequestCallback::OnResponseStarted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info) {
-  GetThis(self)->OnResponseStarted(request, info);
-}
-
-/* static */
-void SampleUrlRequestCallback::OnReadCompleted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_BufferPtr buffer,
-    uint64_t bytesRead) {
-  GetThis(self)->OnReadCompleted(request, info, buffer, bytesRead);
-}
-
-/* static */
-void SampleUrlRequestCallback::OnSucceeded(Cronet_UrlRequestCallbackPtr self,
-                                           Cronet_UrlRequestPtr request,
-                                           Cronet_UrlResponseInfoPtr info) {
-  GetThis(self)->OnSucceeded(request, info);
-}
-
-/* static */
-void SampleUrlRequestCallback::OnFailed(Cronet_UrlRequestCallbackPtr self,
-                                        Cronet_UrlRequestPtr request,
-                                        Cronet_UrlResponseInfoPtr info,
-                                        Cronet_ErrorPtr error) {
-  GetThis(self)->OnFailed(request, info, error);
-}
-
-/* static */
-void SampleUrlRequestCallback::OnCanceled(Cronet_UrlRequestCallbackPtr self,
-                                          Cronet_UrlRequestPtr request,
-                                          Cronet_UrlResponseInfoPtr info) {
-  GetThis(self)->OnCanceled(request, info);
-}
diff --git a/components/cronet/native/sample/sample_url_request_callback.h b/components/cronet/native/sample/sample_url_request_callback.h
deleted file mode 100644
index 97798441e90fa..0000000000000
--- a/components/cronet/native/sample/sample_url_request_callback.h
+++ /dev/null
@@ -1,102 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_SAMPLE_SAMPLE_URL_REQUEST_CALLBACK_H_
-#define COMPONENTS_CRONET_NATIVE_SAMPLE_SAMPLE_URL_REQUEST_CALLBACK_H_
-
-// Cronet sample is expected to be used outside of Chromium infrastructure,
-// and as such has to rely on STL directly instead of //base alternatives.
-#include <future>
-#include <memory>
-#include <string>
-#include <utility>
-
-#include "cronet_c.h"
-
-// Sample implementation of Cronet_UrlRequestCallback interface using static
-// methods to map C API into instance of C++ class.
-class SampleUrlRequestCallback {
- public:
-  SampleUrlRequestCallback();
-  ~SampleUrlRequestCallback();
-
-  // Gets Cronet_UrlRequestCallbackPtr implemented by |this|.
-  Cronet_UrlRequestCallbackPtr GetUrlRequestCallback();
-
-  // Waits until request is done.
-  void WaitForDone() { is_done_.wait(); }
-
-  // Returns error message if OnFailed callback is invoked.
-  std::string last_error_message() const { return last_error_message_; }
-  // Returns string representation of the received response.
-  std::string response_as_string() const { return response_as_string_; }
-
- protected:
-  void OnRedirectReceived(Cronet_UrlRequestPtr request,
-                          Cronet_UrlResponseInfoPtr info,
-                          Cronet_String newLocationUrl);
-
-  void OnResponseStarted(Cronet_UrlRequestPtr request,
-                         Cronet_UrlResponseInfoPtr info);
-
-  void OnReadCompleted(Cronet_UrlRequestPtr request,
-                       Cronet_UrlResponseInfoPtr info,
-                       Cronet_BufferPtr buffer,
-                       uint64_t bytes_read);
-
-  void OnSucceeded(Cronet_UrlRequestPtr request,
-                   Cronet_UrlResponseInfoPtr info);
-
-  void OnFailed(Cronet_UrlRequestPtr request,
-                Cronet_UrlResponseInfoPtr info,
-                Cronet_ErrorPtr error);
-
-  void OnCanceled(Cronet_UrlRequestPtr request, Cronet_UrlResponseInfoPtr info);
-
-  void SignalDone(bool success) { done_with_success_.set_value(success); }
-
-  static SampleUrlRequestCallback* GetThis(Cronet_UrlRequestCallbackPtr self);
-
-  // Implementation of Cronet_UrlRequestCallback methods.
-  static void OnRedirectReceived(Cronet_UrlRequestCallbackPtr self,
-                                 Cronet_UrlRequestPtr request,
-                                 Cronet_UrlResponseInfoPtr info,
-                                 Cronet_String newLocationUrl);
-
-  static void OnResponseStarted(Cronet_UrlRequestCallbackPtr self,
-                                Cronet_UrlRequestPtr request,
-                                Cronet_UrlResponseInfoPtr info);
-
-  static void OnReadCompleted(Cronet_UrlRequestCallbackPtr self,
-                              Cronet_UrlRequestPtr request,
-                              Cronet_UrlResponseInfoPtr info,
-                              Cronet_BufferPtr buffer,
-                              uint64_t bytesRead);
-
-  static void OnSucceeded(Cronet_UrlRequestCallbackPtr self,
-                          Cronet_UrlRequestPtr request,
-                          Cronet_UrlResponseInfoPtr info);
-
-  static void OnFailed(Cronet_UrlRequestCallbackPtr self,
-                       Cronet_UrlRequestPtr request,
-                       Cronet_UrlResponseInfoPtr info,
-                       Cronet_ErrorPtr error);
-
-  static void OnCanceled(Cronet_UrlRequestCallbackPtr self,
-                         Cronet_UrlRequestPtr request,
-                         Cronet_UrlResponseInfoPtr info);
-
-  // Error message copied from |error| if OnFailed callback is invoked.
-  std::string last_error_message_;
-  // Accumulated string representation of the received response.
-  std::string response_as_string_;
-  // Promise that is set when request is done.
-  std::promise<bool> done_with_success_;
-  // Future that is signalled when request is done.
-  std::future<bool> is_done_ = done_with_success_.get_future();
-
-  Cronet_UrlRequestCallbackPtr const callback_;
-};
-
-#endif  // COMPONENTS_CRONET_NATIVE_SAMPLE_SAMPLE_URL_REQUEST_CALLBACK_H_
diff --git a/components/cronet/native/sample/test/sample_test.cc b/components/cronet/native/sample/test/sample_test.cc
deleted file mode 100644
index 7831b69f72a4a..0000000000000
--- a/components/cronet/native/sample/test/sample_test.cc
+++ /dev/null
@@ -1,53 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include <cstdio>
-#include <fstream>
-#include <iostream>
-#include <sstream>
-#include <string>
-
-#include "testing/gtest/include/gtest/gtest.h"
-
-namespace {
-
-// Path to the test app used to locate sample app.
-std::string s_test_app_path;
-
-// Returns directory name with trailing separator extracted from the file path.
-std::string DirName(const std::string& file_path) {
-  size_t pos = file_path.find_last_of("\\/");
-  if (std::string::npos == pos)
-    return std::string();
-  return file_path.substr(0, pos + 1);
-}
-
-// Runs |command_line| and returns string representation of its stdout.
-std::string RunCommand(std::string command_line) {
-  std::string result_out = "command_result.tmp";
-  EXPECT_EQ(0, std::system((command_line + " >" + result_out).c_str()));
-  std::stringstream result;
-  result << std::ifstream(result_out).rdbuf();
-  std::remove(result_out.c_str());
-  return result.str();
-}
-
-// Test that cronet_sample runs and gets connection refused from localhost.
-TEST(SampleTest, TestConnectionRefused) {
-  // Expect "cronet_sample" app to be located in same directory as the test.
-  std::string cronet_sample_path = DirName(s_test_app_path) + "cronet_sample";
-  std::string url = "http://localhost:99999";
-  std::string sample_out = RunCommand(cronet_sample_path + " " + url);
-
-  // Expect cronet sample to run and fail with net::ERR_INVALID_URL.
-  EXPECT_NE(std::string::npos, sample_out.find("net::ERR_INVALID_URL"));
-}
-
-}  // namespace
-
-int main(int argc, char** argv) {
-  s_test_app_path = argv[0];
-  ::testing::InitGoogleTest(&argc, argv);
-  return RUN_ALL_TESTS();
-}
diff --git a/components/cronet/native/test/BUILD.gn b/components/cronet/native/test/BUILD.gn
deleted file mode 100644
index 74e3b0e417097..0000000000000
--- a/components/cronet/native/test/BUILD.gn
+++ /dev/null
@@ -1,60 +0,0 @@
-# Copyright 2017 The Chromium Authors
-# Use of this source code is governed by a BSD-style license that can be
-# found in the LICENSE file.
-
-import("//components/cronet/native/include/headers.gni")
-import("//testing/test.gni")
-
-source_set("cronet_native_testutil") {
-  testonly = true
-
-  deps = [
-    "//base",
-    "//components/cronet/native:cronet_native_headers",
-    "//net:test_support",
-  ]
-
-  configs += [ "//components/cronet/native:cronet_native_include_config" ]
-  public_configs = [ "//components/cronet/native:cronet_native_include_config" ]
-
-  sources = [
-    "test_util.cc",
-    "test_util.h",
-  ]
-}
-
-# Tests for publicly exported Cronet Native API. This target does NOT depend on
-# cronet_native_impl to prevent static linking of implementation into test app.
-source_set("cronet_native_tests") {
-  testonly = true
-
-  deps = [
-    ":cronet_native_testutil",
-    "//base",
-    "//base/allocator:buildflags",
-    "//base/test:test_support",
-    "//components/cronet/native:cronet_native_headers",
-    "//components/cronet/testing:test_support",
-    "//components/grpc_support:bidirectional_stream_test",
-    "//components/grpc_support/test:get_stream_engine_header",
-    "//net:test_support",
-    "//testing/gmock",
-    "//testing/gtest",
-  ]
-
-  configs += [ "//components/cronet/native:cronet_native_include_config" ]
-
-  sources = [
-    "buffer_test.cc",
-    "engine_test.cc",
-    "executors_test.cc",
-    "test_request_finished_info_listener.cc",
-    "test_request_finished_info_listener.h",
-    "test_stream_engine.cc",
-    "test_upload_data_provider.cc",
-    "test_upload_data_provider.h",
-    "test_url_request_callback.cc",
-    "test_url_request_callback.h",
-    "url_request_test.cc",
-  ]
-}
diff --git a/components/cronet/native/test/buffer_test.cc b/components/cronet/native/test/buffer_test.cc
deleted file mode 100644
index 6a7f22b147e56..0000000000000
--- a/components/cronet/native/test/buffer_test.cc
+++ /dev/null
@@ -1,148 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "cronet_c.h"
-
-#include <limits>
-
-#include "base/allocator/buildflags.h"
-#include "base/check.h"
-#include "base/run_loop.h"
-#include "base/test/task_environment.h"
-#include "build/build_config.h"
-#include "components/cronet/native/test/test_util.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-namespace {
-
-class BufferTest : public ::testing::Test {
- public:
-  BufferTest() = default;
-
-  BufferTest(const BufferTest&) = delete;
-  BufferTest& operator=(const BufferTest&) = delete;
-
-  ~BufferTest() override {}
-
- protected:
-  static void BufferCallback_OnDestroy(Cronet_BufferCallbackPtr self,
-                                       Cronet_BufferPtr buffer);
-  bool on_destroy_called() const { return on_destroy_called_; }
-
-  // Provide a task environment for use by TestExecutor instances. Do not
-  // initialize the ThreadPool as this is done by the Cronet_Engine
-  base::test::SingleThreadTaskEnvironment task_environment_;
-
- private:
-  void set_on_destroy_called(bool value) { on_destroy_called_ = value; }
-
-  bool on_destroy_called_ = false;
-};
-
-const uint64_t kTestBufferSize = 20;
-
-// static
-void BufferTest::BufferCallback_OnDestroy(Cronet_BufferCallbackPtr self,
-                                          Cronet_BufferPtr buffer) {
-  CHECK(self);
-  Cronet_ClientContext context = Cronet_BufferCallback_GetClientContext(self);
-  BufferTest* test = static_cast<BufferTest*>(context);
-  CHECK(test);
-  test->set_on_destroy_called(true);
-  // Free buffer_data.
-  void* buffer_data = Cronet_Buffer_GetData(buffer);
-  CHECK(buffer_data);
-  free(buffer_data);
-}
-
-// Test on_destroy that destroys the buffer set in context.
-void TestRunnable_DestroyBuffer(Cronet_RunnablePtr self) {
-  CHECK(self);
-  Cronet_ClientContext context = Cronet_Runnable_GetClientContext(self);
-  Cronet_BufferPtr buffer = static_cast<Cronet_BufferPtr>(context);
-  CHECK(buffer);
-  // Destroy buffer. TestCronet_BufferCallback_OnDestroy should be invoked.
-  Cronet_Buffer_Destroy(buffer);
-}
-
-// Example of allocating buffer with reasonable size.
-TEST_F(BufferTest, TestInitWithAlloc) {
-  // Create Cronet buffer and allocate buffer data.
-  Cronet_BufferPtr buffer = Cronet_Buffer_Create();
-  Cronet_Buffer_InitWithAlloc(buffer, kTestBufferSize);
-  EXPECT_TRUE(Cronet_Buffer_GetData(buffer));
-  EXPECT_EQ(Cronet_Buffer_GetSize(buffer), kTestBufferSize);
-  Cronet_Buffer_Destroy(buffer);
-  ASSERT_FALSE(on_destroy_called());
-}
-
-#if defined(ARCH_CPU_64_BITS) &&                                              \
-    (defined(ADDRESS_SANITIZER) || defined(MEMORY_SANITIZER) ||               \
-     defined(THREAD_SANITIZER) || BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC) || \
-     BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_FUCHSIA))
-// - ASAN and MSAN malloc by default triggers crash instead of returning null on
-//   failure.
-// - PartitionAlloc malloc also crashes on allocation failure by design.
-// - Fuchsia malloc() also crashes on allocation failure in some kernel builds.
-// - On Linux and Chrome OS, the allocator shims crash for large allocations, on
-//   purpose.
-#define MAYBE_TestInitWithHugeAllocFails DISABLED_TestInitWithHugeAllocFails
-#else
-#define MAYBE_TestInitWithHugeAllocFails TestInitWithHugeAllocFails
-#endif
-// Verify behaviour when an unsatisfiably huge buffer allocation is requested.
-// On 32-bit platforms, we want to ensure that a 64-bit range allocation size
-// is rejected, rather than resulting in a 32-bit truncated allocation.
-// Some platforms over-commit allocations, so we request an allocation of the
-// whole 64-bit address-space, which cannot possibly be satisfied in a 32- or
-// 64-bit process.
-TEST_F(BufferTest, MAYBE_TestInitWithHugeAllocFails) {
-  Cronet_BufferPtr buffer = Cronet_Buffer_Create();
-  const uint64_t kHugeTestBufferSize = std::numeric_limits<uint64_t>::max();
-  Cronet_Buffer_InitWithAlloc(buffer, kHugeTestBufferSize);
-  EXPECT_FALSE(Cronet_Buffer_GetData(buffer));
-  EXPECT_EQ(Cronet_Buffer_GetSize(buffer), 0ull);
-  Cronet_Buffer_Destroy(buffer);
-  ASSERT_FALSE(on_destroy_called());
-}
-
-// Example of initializing buffer with app-allocated data.
-TEST_F(BufferTest, TestInitWithDataAndCallback) {
-  Cronet_BufferCallbackPtr buffer_callback =
-      Cronet_BufferCallback_CreateWith(BufferCallback_OnDestroy);
-  Cronet_BufferCallback_SetClientContext(buffer_callback, this);
-  // Create Cronet buffer and allocate buffer data.
-  Cronet_BufferPtr buffer = Cronet_Buffer_Create();
-  Cronet_Buffer_InitWithDataAndCallback(buffer, malloc(kTestBufferSize),
-                                        kTestBufferSize, buffer_callback);
-  EXPECT_TRUE(Cronet_Buffer_GetData(buffer));
-  EXPECT_EQ(Cronet_Buffer_GetSize(buffer), kTestBufferSize);
-  Cronet_Buffer_Destroy(buffer);
-  ASSERT_TRUE(on_destroy_called());
-  Cronet_BufferCallback_Destroy(buffer_callback);
-}
-
-// Example of posting application on_destroy to the executor and passing
-// buffer to it, expecting buffer to be destroyed and freed.
-TEST_F(BufferTest, TestCronetBufferAsync) {
-  // Executor provided by the application.
-  Cronet_ExecutorPtr executor = cronet::test::CreateTestExecutor();
-  Cronet_BufferCallbackPtr buffer_callback =
-      Cronet_BufferCallback_CreateWith(BufferCallback_OnDestroy);
-  Cronet_BufferCallback_SetClientContext(buffer_callback, this);
-  // Create Cronet buffer and allocate buffer data.
-  Cronet_BufferPtr buffer = Cronet_Buffer_Create();
-  Cronet_Buffer_InitWithDataAndCallback(buffer, malloc(kTestBufferSize),
-                                        kTestBufferSize, buffer_callback);
-  Cronet_RunnablePtr runnable =
-      Cronet_Runnable_CreateWith(TestRunnable_DestroyBuffer);
-  Cronet_Runnable_SetClientContext(runnable, buffer);
-  Cronet_Executor_Execute(executor, runnable);
-  base::RunLoop().RunUntilIdle();
-  ASSERT_TRUE(on_destroy_called());
-  Cronet_Executor_Destroy(executor);
-  Cronet_BufferCallback_Destroy(buffer_callback);
-}
-
-}  // namespace
diff --git a/components/cronet/native/test/engine_test.cc b/components/cronet/native/test/engine_test.cc
deleted file mode 100644
index f1acaf56a4f28..0000000000000
--- a/components/cronet/native/test/engine_test.cc
+++ /dev/null
@@ -1,227 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "cronet_c.h"
-
-#include "base/check.h"
-#include "base/files/file_util.h"
-#include "base/files/scoped_temp_dir.h"
-#include "base/run_loop.h"
-#include "components/cronet/native/test/test_util.h"
-#include "net/cert/mock_cert_verifier.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-namespace {
-
-const char* kUserAgent = "EngineTest/1";
-
-class EngineTest : public ::testing::Test {
- public:
-  EngineTest(const EngineTest&) = delete;
-  EngineTest& operator=(const EngineTest&) = delete;
-
- protected:
-  EngineTest() = default;
-  ~EngineTest() override {}
-};
-
-TEST_F(EngineTest, StartCronetEngine) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_EngineParams_user_agent_set(engine_params, kUserAgent);
-  EXPECT_EQ(Cronet_RESULT_SUCCESS,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  Cronet_Engine_Destroy(engine);
-  Cronet_EngineParams_Destroy(engine_params);
-}
-
-TEST_F(EngineTest, CronetEngineDefaultUserAgent) {
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  // Version and DefaultUserAgent don't require engine start.
-  std::string version = Cronet_Engine_GetVersionString(engine);
-  std::string default_agent = Cronet_Engine_GetDefaultUserAgent(engine);
-  EXPECT_NE(default_agent.find(version), std::string::npos);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST_F(EngineTest, InitDifferentEngines) {
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_EnginePtr first_engine = Cronet_Engine_Create();
-  Cronet_Engine_StartWithParams(first_engine, engine_params);
-  Cronet_EnginePtr second_engine = Cronet_Engine_Create();
-  Cronet_Engine_StartWithParams(second_engine, engine_params);
-  Cronet_EnginePtr third_engine = Cronet_Engine_Create();
-  Cronet_Engine_StartWithParams(third_engine, engine_params);
-  Cronet_EngineParams_Destroy(engine_params);
-  Cronet_Engine_Destroy(first_engine);
-  Cronet_Engine_Destroy(second_engine);
-  Cronet_Engine_Destroy(third_engine);
-}
-
-TEST_F(EngineTest, StartResults) {
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  // Disable runtime CHECK of the result, so it could be verified.
-  Cronet_EngineParams_enable_check_result_set(engine_params, false);
-  Cronet_EngineParams_http_cache_mode_set(
-      engine_params, Cronet_EngineParams_HTTP_CACHE_MODE_DISK);
-  EXPECT_EQ(Cronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  Cronet_EngineParams_storage_path_set(engine_params, "InvalidPath");
-  EXPECT_EQ(Cronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  base::ScopedTempDir temp_dir;
-  EXPECT_TRUE(temp_dir.CreateUniqueTempDir());
-  base::FilePath temp_path = base::MakeAbsoluteFilePath(temp_dir.GetPath());
-  Cronet_EngineParams_storage_path_set(engine_params,
-                                       temp_path.AsUTF8Unsafe().c_str());
-  // Now the engine should start successfully.
-  EXPECT_EQ(Cronet_RESULT_SUCCESS,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  // The second start should fail.
-  EXPECT_EQ(Cronet_RESULT_ILLEGAL_STATE_ENGINE_ALREADY_STARTED,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  // The second engine should fail because storage path is already used.
-  Cronet_EnginePtr second_engine = Cronet_Engine_Create();
-  EXPECT_EQ(Cronet_RESULT_ILLEGAL_STATE_STORAGE_PATH_IN_USE,
-            Cronet_Engine_StartWithParams(second_engine, engine_params));
-  // Shutdown first engine to free storage path.
-  EXPECT_EQ(Cronet_RESULT_SUCCESS, Cronet_Engine_Shutdown(engine));
-  // Now the second engine should start.
-  EXPECT_EQ(Cronet_RESULT_SUCCESS,
-            Cronet_Engine_StartWithParams(second_engine, engine_params));
-  Cronet_Engine_Destroy(second_engine);
-  Cronet_Engine_Destroy(engine);
-  Cronet_EngineParams_Destroy(engine_params);
-}
-
-TEST_F(EngineTest, InvalidPkpParams) {
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  // Disable runtime CHECK of the result, so it could be verified.
-  Cronet_EngineParams_enable_check_result_set(engine_params, false);
-  // Try adding invalid public key pins.
-  Cronet_PublicKeyPinsPtr public_key_pins = Cronet_PublicKeyPins_Create();
-  Cronet_EngineParams_public_key_pins_add(engine_params, public_key_pins);
-  EXPECT_EQ(Cronet_RESULT_NULL_POINTER_HOSTNAME,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  Cronet_EngineParams_public_key_pins_clear(engine_params);
-  // Detect long host name.
-  Cronet_PublicKeyPins_host_set(public_key_pins, std::string(256, 'a').c_str());
-  Cronet_EngineParams_public_key_pins_add(engine_params, public_key_pins);
-  EXPECT_EQ(Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HOSTNAME,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  Cronet_EngineParams_public_key_pins_clear(engine_params);
-  // Detect invalid host name.
-  Cronet_PublicKeyPins_host_set(public_key_pins, "invalid:host/name");
-  Cronet_EngineParams_public_key_pins_add(engine_params, public_key_pins);
-  EXPECT_EQ(Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HOSTNAME,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  Cronet_EngineParams_public_key_pins_clear(engine_params);
-  // Set valid host name.
-  Cronet_PublicKeyPins_host_set(public_key_pins, "valid.host.name");
-  Cronet_EngineParams_public_key_pins_add(engine_params, public_key_pins);
-  // Detect missing pins.
-  EXPECT_EQ(Cronet_RESULT_NULL_POINTER_SHA256_PINS,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  // Detect invalid pin.
-  Cronet_EngineParams_public_key_pins_clear(engine_params);
-  Cronet_PublicKeyPins_pins_sha256_add(public_key_pins, "invalid_sha256");
-  Cronet_EngineParams_public_key_pins_add(engine_params, public_key_pins);
-  EXPECT_EQ(Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_PIN,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  // THe engine cannot start with these params, and have to be destroyed.
-  Cronet_Engine_Destroy(engine);
-  Cronet_EngineParams_Destroy(engine_params);
-  Cronet_PublicKeyPins_Destroy(public_key_pins);
-}
-
-TEST_F(EngineTest, ValidPkpParams) {
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  // Disable runtime CHECK of the result, so it could be verified.
-  Cronet_EngineParams_enable_check_result_set(engine_params, false);
-  // Add valid public key pins.
-  Cronet_PublicKeyPinsPtr public_key_pins = Cronet_PublicKeyPins_Create();
-  Cronet_PublicKeyPins_host_set(public_key_pins, "valid.host.name");
-  Cronet_PublicKeyPins_pins_sha256_add(
-      public_key_pins, "sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=");
-  Cronet_EngineParams_public_key_pins_add(engine_params, public_key_pins);
-  // The engine should start successfully.
-  EXPECT_EQ(Cronet_RESULT_SUCCESS,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  Cronet_Engine_Destroy(engine);
-  Cronet_EngineParams_Destroy(engine_params);
-  Cronet_PublicKeyPins_Destroy(public_key_pins);
-}
-
-// Verify that Cronet_Engine_SetMockCertVerifierForTesting() doesn't crash or
-// leak anything.
-TEST_F(EngineTest, SetMockCertVerifierForTesting) {
-  auto cert_verifier(std::make_unique<net::MockCertVerifier>());
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  Cronet_Engine_SetMockCertVerifierForTesting(engine, cert_verifier.release());
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_Engine_StartWithParams(engine, engine_params);
-  Cronet_Engine_Destroy(engine);
-  Cronet_EngineParams_Destroy(engine_params);
-}
-
-TEST_F(EngineTest, StartNetLogToFile) {
-  base::ScopedTempDir temp_dir;
-  EXPECT_TRUE(temp_dir.CreateUniqueTempDir());
-  base::FilePath temp_path = base::MakeAbsoluteFilePath(temp_dir.GetPath());
-  base::FilePath net_log_file =
-      temp_path.Append(FILE_PATH_LITERAL("netlog.json"));
-
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_EngineParams_experimental_options_set(
-      engine_params,
-      "{ \"QUIC\" : {\"max_server_configs_stored_in_properties\" : 8} }");
-  // Test that net log cannot start/stop before engine start.
-  EXPECT_FALSE(Cronet_Engine_StartNetLogToFile(
-      engine, net_log_file.AsUTF8Unsafe().c_str(), true));
-  Cronet_Engine_StopNetLog(engine);
-
-  // Start the engine.
-  Cronet_Engine_StartWithParams(engine, engine_params);
-  Cronet_EngineParams_Destroy(engine_params);
-
-  // Test that normal start/stop net log works.
-  EXPECT_TRUE(Cronet_Engine_StartNetLogToFile(
-      engine, net_log_file.AsUTF8Unsafe().c_str(), true));
-  Cronet_Engine_StopNetLog(engine);
-
-  // Test that double start/stop net log works.
-  EXPECT_TRUE(Cronet_Engine_StartNetLogToFile(
-      engine, net_log_file.AsUTF8Unsafe().c_str(), true));
-  // Test that second start fails.
-  EXPECT_FALSE(Cronet_Engine_StartNetLogToFile(
-      engine, net_log_file.AsUTF8Unsafe().c_str(), true));
-  // Test that multiple stops work.
-  Cronet_Engine_StopNetLog(engine);
-  Cronet_Engine_StopNetLog(engine);
-  Cronet_Engine_StopNetLog(engine);
-
-  // Test that net log contains effective experimental options.
-  std::string net_log;
-  EXPECT_TRUE(base::ReadFileToString(net_log_file, &net_log));
-  EXPECT_TRUE(
-      net_log.find(
-          "{\"QUIC\":{\"max_server_configs_stored_in_properties\":8}") !=
-      std::string::npos);
-
-  // Test that bad file name fails.
-  EXPECT_FALSE(Cronet_Engine_StartNetLogToFile(engine, "bad/file/name", true));
-
-  Cronet_Engine_Shutdown(engine);
-  // Test that net log cannot start/stop after engine shutdown.
-  EXPECT_FALSE(Cronet_Engine_StartNetLogToFile(
-      engine, net_log_file.AsUTF8Unsafe().c_str(), true));
-  Cronet_Engine_StopNetLog(engine);
-  Cronet_Engine_Destroy(engine);
-}
-
-}  // namespace
diff --git a/components/cronet/native/test/executors_test.cc b/components/cronet/native/test/executors_test.cc
deleted file mode 100644
index e3c7499cfb45b..0000000000000
--- a/components/cronet/native/test/executors_test.cc
+++ /dev/null
@@ -1,81 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "cronet_c.h"
-
-#include "base/check.h"
-#include "base/run_loop.h"
-#include "base/test/task_environment.h"
-#include "components/cronet/native/test/test_util.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-namespace {
-
-class ExecutorsTest : public ::testing::Test {
- public:
-  ExecutorsTest() = default;
-
-  ExecutorsTest(const ExecutorsTest&) = delete;
-  ExecutorsTest& operator=(const ExecutorsTest&) = delete;
-
-  ~ExecutorsTest() override = default;
-
- protected:
-  static void TestRunnable_Run(Cronet_RunnablePtr self);
-  bool runnable_called() const { return runnable_called_; }
-
-  // Provide a task environment for use by TestExecutor instances. Do not
-  // initialize the ThreadPool as this is done by the Cronet_Engine
-  base::test::SingleThreadTaskEnvironment task_environment_;
-
- private:
-  void set_runnable_called(bool value) { runnable_called_ = value; }
-
-  bool runnable_called_ = false;
-};
-
-// App implementation of Cronet_Executor methods.
-void TestExecutor_Execute(Cronet_ExecutorPtr self, Cronet_RunnablePtr command) {
-  CHECK(self);
-  Cronet_Runnable_Run(command);
-  Cronet_Runnable_Destroy(command);
-}
-
-// Implementation of TestRunnable methods.
-// static
-void ExecutorsTest::TestRunnable_Run(Cronet_RunnablePtr self) {
-  CHECK(self);
-  Cronet_ClientContext context = Cronet_Runnable_GetClientContext(self);
-  ExecutorsTest* test = static_cast<ExecutorsTest*>(context);
-  CHECK(test);
-  test->set_runnable_called(true);
-}
-
-// Test that custom Executor defined by the app runs the runnable.
-TEST_F(ExecutorsTest, TestCustom) {
-  ASSERT_FALSE(runnable_called());
-  Cronet_RunnablePtr runnable =
-      Cronet_Runnable_CreateWith(ExecutorsTest::TestRunnable_Run);
-  Cronet_Runnable_SetClientContext(runnable, this);
-  Cronet_ExecutorPtr executor =
-      Cronet_Executor_CreateWith(TestExecutor_Execute);
-  Cronet_Executor_Execute(executor, runnable);
-  Cronet_Executor_Destroy(executor);
-  base::RunLoop().RunUntilIdle();
-  ASSERT_TRUE(runnable_called());
-}
-
-// Test that cronet::test::TestExecutor runs the runnable.
-TEST_F(ExecutorsTest, TestTestExecutor) {
-  ASSERT_FALSE(runnable_called());
-  Cronet_RunnablePtr runnable = Cronet_Runnable_CreateWith(TestRunnable_Run);
-  Cronet_Runnable_SetClientContext(runnable, this);
-  Cronet_ExecutorPtr executor = cronet::test::CreateTestExecutor();
-  Cronet_Executor_Execute(executor, runnable);
-  Cronet_Executor_Destroy(executor);
-  base::RunLoop().RunUntilIdle();
-  ASSERT_TRUE(runnable_called());
-}
-
-}  // namespace
diff --git a/components/cronet/native/test/test_request_finished_info_listener.cc b/components/cronet/native/test/test_request_finished_info_listener.cc
deleted file mode 100644
index 5dad9cc7f9d60..0000000000000
--- a/components/cronet/native/test/test_request_finished_info_listener.cc
+++ /dev/null
@@ -1,54 +0,0 @@
-// Copyright 2019 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/test/test_request_finished_info_listener.h"
-
-#include "base/check.h"
-
-namespace cronet {
-namespace test {
-
-Cronet_RequestFinishedInfoListenerPtr
-TestRequestFinishedInfoListener::CreateRequestFinishedListener() {
-  auto* listener = Cronet_RequestFinishedInfoListener_CreateWith(
-      TestRequestFinishedInfoListener::OnRequestFinished);
-  Cronet_RequestFinishedInfoListener_SetClientContext(listener, this);
-  return listener;
-}
-
-void TestRequestFinishedInfoListener::WaitForDone() {
-  done_.Wait();
-}
-
-/* static */
-TestRequestFinishedInfoListener* TestRequestFinishedInfoListener::GetThis(
-    Cronet_RequestFinishedInfoListenerPtr self) {
-  CHECK(self);
-  return static_cast<TestRequestFinishedInfoListener*>(
-      Cronet_RequestFinishedInfoListener_GetClientContext(self));
-}
-
-/* static */
-void TestRequestFinishedInfoListener::OnRequestFinished(
-    Cronet_RequestFinishedInfoListenerPtr self,
-    Cronet_RequestFinishedInfoPtr request_finished_info,
-    Cronet_UrlResponseInfoPtr url_response_info,
-    Cronet_ErrorPtr error) {
-  GetThis(self)->OnRequestFinished(request_finished_info, url_response_info,
-                                   error);
-  Cronet_RequestFinishedInfoListener_Destroy(self);
-}
-
-void TestRequestFinishedInfoListener::OnRequestFinished(
-    Cronet_RequestFinishedInfoPtr request_finished_info,
-    Cronet_UrlResponseInfoPtr url_response_info,
-    Cronet_ErrorPtr error) {
-  request_finished_info_ = request_finished_info;
-  url_response_info_ = url_response_info;
-  error_ = error;
-  done_.Signal();
-}
-
-}  // namespace test
-}  // namespace cronet
diff --git a/components/cronet/native/test/test_request_finished_info_listener.h b/components/cronet/native/test/test_request_finished_info_listener.h
deleted file mode 100644
index 229da240b025f..0000000000000
--- a/components/cronet/native/test/test_request_finished_info_listener.h
+++ /dev/null
@@ -1,85 +0,0 @@
-// Copyright 2019 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "base/check.h"
-#include "base/synchronization/waitable_event.h"
-#include "cronet_c.h"
-
-#ifndef COMPONENTS_CRONET_NATIVE_TEST_TEST_REQUEST_FINISHED_INFO_LISTENER_H_
-#define COMPONENTS_CRONET_NATIVE_TEST_TEST_REQUEST_FINISHED_INFO_LISTENER_H_
-
-namespace cronet {
-namespace test {
-
-// A RequestFinishedInfoListener implementation that allows waiting for and
-// accessing callback results from tests.
-//
-// Note that the RequestFinishedInfo for a request is shared-owned by its
-// UrlRequest and the code calling the listeners.
-class TestRequestFinishedInfoListener {
- public:
-  // Create a listener that can be registered with Cronet.
-  //
-  // The listener deletes itself when OnRequestFinished() is run.
-  Cronet_RequestFinishedInfoListenerPtr CreateRequestFinishedListener();
-
-  // Wait until a listener created with CreateRequestFinishedListener() runs
-  // OnRequestFinished().
-  void WaitForDone();
-
-  Cronet_RequestFinishedInfoPtr request_finished_info() {
-    CHECK(done_.IsSignaled());
-    return request_finished_info_;
-  }
-
-  Cronet_UrlResponseInfoPtr url_response_info() {
-    CHECK(done_.IsSignaled());
-    return url_response_info_;
-  }
-
-  Cronet_ErrorPtr error() {
-    CHECK(done_.IsSignaled());
-    return error_;
-  }
-
- private:
-  static TestRequestFinishedInfoListener* GetThis(
-      Cronet_RequestFinishedInfoListenerPtr self);
-
-  // Implementation of Cronet_RequestFinishedInfoListener methods.
-  static void OnRequestFinished(
-      Cronet_RequestFinishedInfoListenerPtr self,
-      Cronet_RequestFinishedInfoPtr request_finished_info,
-      Cronet_UrlResponseInfoPtr url_response_info,
-      Cronet_ErrorPtr error);
-
-  virtual void OnRequestFinished(
-      Cronet_RequestFinishedInfoPtr request_finished_info,
-      Cronet_UrlResponseInfoPtr url_response_info,
-      Cronet_ErrorPtr error);
-
-  // RequestFinishedInfo from the request -- will be set when the listener is
-  // called, which only happens if there are metrics to report. Won't be
-  // destroyed if the UrlRequest object hasn't been destroyed.
-  Cronet_RequestFinishedInfoPtr request_finished_info_ = nullptr;
-
-  // UrlResponseInfo from the request -- will be set when the listener is
-  // called, which only happens if there are metrics to report. Won't be
-  // destroyed if the UrlRequest object hasn't been destroyed.
-  Cronet_UrlResponseInfoPtr url_response_info_ = nullptr;
-
-  // Error from the request -- will be will be set when the listener is called,
-  // which only happens if there are metrics to report. Won't be destroyed if
-  // the UrlRequest object hasn't been destroyed.
-  Cronet_ErrorPtr error_ = nullptr;
-
-  // Signaled by OnRequestFinished() on a listener created by
-  // CreateRequestFinishedListener().
-  base::WaitableEvent done_;
-};
-
-}  // namespace test
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_NATIVE_TEST_TEST_REQUEST_FINISHED_INFO_LISTENER_H_
diff --git a/components/cronet/native/test/test_stream_engine.cc b/components/cronet/native/test/test_stream_engine.cc
deleted file mode 100644
index c4884121a2a67..0000000000000
--- a/components/cronet/native/test/test_stream_engine.cc
+++ /dev/null
@@ -1,49 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "cronet_c.h"
-
-#include "base/check_op.h"
-#include "components/cronet/native/test/test_util.h"
-#include "components/grpc_support/test/get_stream_engine.h"
-
-namespace grpc_support {
-
-// Provides stream_engine support for testing of bidirectional_stream C API for
-// GRPC using native Cronet_Engine.
-
-Cronet_EnginePtr g_cronet_engine = nullptr;
-int quic_server_port = 0;
-
-// Returns a stream_engine* for testing with the QuicTestServer.
-// The engine returned resolve "test.example.com" as localhost:|port|,
-// and should have "test.example.com" configured as a QUIC server.
-stream_engine* GetTestStreamEngine(int port) {
-  CHECK(g_cronet_engine);
-  CHECK_EQ(port, quic_server_port);
-  return Cronet_Engine_GetStreamEngine(g_cronet_engine);
-}
-
-// Starts the stream_engine* for testing with the QuicTestServer.
-// Has the same properties as GetTestStreamEngine.  This function is
-// used when the stream_engine* needs to be shut down and restarted
-// between test cases (including between all of the bidirectional
-// stream test cases and all other tests for the engine; this is the
-// situation for Cronet).
-void StartTestStreamEngine(int port) {
-  CHECK(!g_cronet_engine);
-  quic_server_port = port;
-  g_cronet_engine = cronet::test::CreateTestEngine(port);
-}
-
-// Shuts a stream_engine* started with |StartTestStreamEngine| down.
-// See comment above.
-void ShutdownTestStreamEngine() {
-  CHECK(g_cronet_engine);
-  Cronet_Engine_Destroy(g_cronet_engine);
-  g_cronet_engine = nullptr;
-  quic_server_port = 0;
-}
-
-}  // namespace grpc_support
diff --git a/components/cronet/native/test/test_upload_data_provider.cc b/components/cronet/native/test/test_upload_data_provider.cc
deleted file mode 100644
index 37d5ecb176de9..0000000000000
--- a/components/cronet/native/test/test_upload_data_provider.cc
+++ /dev/null
@@ -1,315 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/test/test_upload_data_provider.h"
-
-#include "base/bind.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-namespace {
-
-// Helper class that runs base::OnceClosure.
-class TestRunnable {
- public:
-  // Creates Cronet runnable that runs |task| once and destroys itself.
-  static Cronet_RunnablePtr CreateRunnable(base::OnceClosure task);
-
-  TestRunnable(const TestRunnable&) = delete;
-  TestRunnable& operator=(const TestRunnable&) = delete;
-
- private:
-  explicit TestRunnable(base::OnceClosure task);
-  ~TestRunnable();
-
-  // Runs |self| and destroys it.
-  static void Run(Cronet_RunnablePtr self);
-
-  // Closure to run.
-  base::OnceClosure task_;
-};
-
-TestRunnable::TestRunnable(base::OnceClosure task) : task_(std::move(task)) {}
-
-TestRunnable::~TestRunnable() = default;
-
-// static
-Cronet_RunnablePtr TestRunnable::CreateRunnable(base::OnceClosure task) {
-  Cronet_RunnablePtr runnable = Cronet_Runnable_CreateWith(TestRunnable::Run);
-  Cronet_Runnable_SetClientContext(runnable, new TestRunnable(std::move(task)));
-  return runnable;
-}
-
-// static
-void TestRunnable::Run(Cronet_RunnablePtr self) {
-  CHECK(self);
-  Cronet_ClientContext context = Cronet_Runnable_GetClientContext(self);
-  TestRunnable* runnable = static_cast<TestRunnable*>(context);
-  CHECK(runnable);
-  std::move(runnable->task_).Run();
-  delete runnable;
-}
-
-}  // namespace
-
-namespace cronet {
-// Various test utility functions for testing Cronet.
-namespace test {
-
-TestUploadDataProvider::TestUploadDataProvider(
-    SuccessCallbackMode success_callback_mode,
-    Cronet_ExecutorPtr executor)
-    : success_callback_mode_(success_callback_mode), executor_(executor) {}
-
-TestUploadDataProvider::~TestUploadDataProvider() = default;
-
-Cronet_UploadDataProviderPtr
-TestUploadDataProvider::CreateUploadDataProvider() {
-  Cronet_UploadDataProviderPtr upload_data_provider =
-      Cronet_UploadDataProvider_CreateWith(
-          TestUploadDataProvider::GetLength, TestUploadDataProvider::Read,
-          TestUploadDataProvider::Rewind, TestUploadDataProvider::Close);
-  Cronet_UploadDataProvider_SetClientContext(upload_data_provider, this);
-  return upload_data_provider;
-}
-
-void TestUploadDataProvider::AddRead(std::string read) {
-  EXPECT_TRUE(!started_) << "Adding bytes after read";
-  reads_.push_back(read);
-}
-
-void TestUploadDataProvider::SetReadFailure(int read_fail_index,
-                                            FailMode read_fail_mode) {
-  read_fail_index_ = read_fail_index;
-  read_fail_mode_ = read_fail_mode;
-}
-
-void TestUploadDataProvider::SetRewindFailure(FailMode rewind_fail_mode) {
-  rewind_fail_mode_ = rewind_fail_mode;
-}
-
-void TestUploadDataProvider::SetReadCancel(int read_cancel_index,
-                                           CancelMode read_cancel_mode) {
-  read_cancel_index_ = read_cancel_index;
-  read_cancel_mode_ = read_cancel_mode;
-}
-
-void TestUploadDataProvider::SetRewindCancel(CancelMode rewind_cancel_mode) {
-  rewind_cancel_mode_ = rewind_cancel_mode;
-}
-
-int64_t TestUploadDataProvider::GetLength() const {
-  EXPECT_TRUE(!closed_.IsSet()) << "Data Provider is closed";
-  if (bad_length_ != -1)
-    return bad_length_;
-
-  return GetUploadedLength();
-}
-
-int64_t TestUploadDataProvider::GetUploadedLength() const {
-  if (chunked_)
-    return -1ll;
-
-  int64_t length = 0ll;
-  for (const auto& read : reads_)
-    length += read.size();
-
-  return length;
-}
-
-void TestUploadDataProvider::Read(Cronet_UploadDataSinkPtr upload_data_sink,
-                                  Cronet_BufferPtr buffer) {
-  int current_read_call = num_read_calls_;
-  ++num_read_calls_;
-  EXPECT_TRUE(!closed_.IsSet()) << "Data Provider is closed";
-
-  AssertIdle();
-
-  if (current_read_call == read_cancel_index_)
-    MaybeCancelRequest(read_cancel_mode_);
-
-  if (MaybeFailRead(current_read_call, upload_data_sink)) {
-    failed_ = true;
-    return;
-  }
-
-  read_pending_ = true;
-  started_ = true;
-
-  bool final_chunk = (chunked_ && next_read_ == reads_.size() - 1);
-  EXPECT_TRUE(next_read_ < reads_.size()) << "Too many reads: " << next_read_;
-  const auto& read = reads_[next_read_];
-  EXPECT_TRUE(read.size() <= Cronet_Buffer_GetSize(buffer))
-      << "Read buffer smaller than expected.";
-  memcpy(Cronet_Buffer_GetData(buffer), read.data(), read.size());
-  ++next_read_;
-
-  auto complete_closure = base::BindOnce(
-      [](TestUploadDataProvider* upload_data_provider,
-         Cronet_UploadDataSink* upload_data_sink, uint64_t bytes_read,
-         bool final_chunk) {
-        upload_data_provider->read_pending_ = false;
-        Cronet_UploadDataSink_OnReadSucceeded(upload_data_sink, bytes_read,
-                                              final_chunk);
-      },
-      this, upload_data_sink, read.size(), final_chunk);
-
-  if (success_callback_mode_ == SYNC) {
-    std::move(complete_closure).Run();
-  } else {
-    PostTaskToExecutor(std::move(complete_closure));
-  }
-}
-
-void TestUploadDataProvider::Rewind(Cronet_UploadDataSinkPtr upload_data_sink) {
-  ++num_rewind_calls_;
-  EXPECT_TRUE(!closed_.IsSet()) << "Data Provider is closed";
-  AssertIdle();
-
-  MaybeCancelRequest(rewind_cancel_mode_);
-
-  if (MaybeFailRewind(upload_data_sink)) {
-    failed_ = true;
-    return;
-  }
-
-  // Should never try and rewind when rewinding does nothing.
-  EXPECT_TRUE(next_read_ != 0) << "Unexpected rewind when already at beginning";
-
-  rewind_pending_ = true;
-  next_read_ = 0;
-
-  auto complete_closure = base::BindOnce(
-      [](TestUploadDataProvider* upload_data_provider,
-         Cronet_UploadDataSink* upload_data_sink) {
-        upload_data_provider->rewind_pending_ = false;
-        Cronet_UploadDataSink_OnRewindSucceeded(upload_data_sink);
-      },
-      this, upload_data_sink);
-
-  if (success_callback_mode_ == SYNC) {
-    std::move(complete_closure).Run();
-  } else {
-    PostTaskToExecutor(std::move(complete_closure));
-  }
-}
-
-void TestUploadDataProvider::PostTaskToExecutor(base::OnceClosure task) {
-  EXPECT_TRUE(executor_);
-  // |runnable| is passed to executor, which destroys it after execution.
-  Cronet_Executor_Execute(executor_,
-                          TestRunnable::CreateRunnable(std::move(task)));
-}
-
-void TestUploadDataProvider::AssertIdle() const {
-  EXPECT_TRUE(!read_pending_) << "Unexpected operation during read";
-  EXPECT_TRUE(!rewind_pending_) << "Unexpected operation during rewind";
-  EXPECT_TRUE(!failed_) << "Unexpected operation after failure";
-}
-
-bool TestUploadDataProvider::MaybeFailRead(
-    int read_index,
-    Cronet_UploadDataSinkPtr upload_data_sink) {
-  if (read_fail_mode_ == NONE)
-    return false;
-  if (read_index != read_fail_index_)
-    return false;
-
-  if (read_fail_mode_ == CALLBACK_SYNC) {
-    Cronet_UploadDataSink_OnReadError(upload_data_sink, "Sync read failure");
-    return true;
-  }
-  EXPECT_EQ(read_fail_mode_, CALLBACK_ASYNC);
-
-  PostTaskToExecutor(base::BindOnce(
-      [](Cronet_UploadDataSink* upload_data_sink) {
-        Cronet_UploadDataSink_OnReadError(upload_data_sink,
-                                          "Async read failure");
-      },
-      upload_data_sink));
-  return true;
-}
-
-bool TestUploadDataProvider::MaybeFailRewind(
-    Cronet_UploadDataSinkPtr upload_data_sink) {
-  if (rewind_fail_mode_ == NONE)
-    return false;
-
-  if (rewind_fail_mode_ == CALLBACK_SYNC) {
-    Cronet_UploadDataSink_OnRewindError(upload_data_sink,
-                                        "Sync rewind failure");
-    return true;
-  }
-  EXPECT_EQ(rewind_fail_mode_, CALLBACK_ASYNC);
-
-  PostTaskToExecutor(base::BindOnce(
-      [](Cronet_UploadDataSink* upload_data_sink) {
-        Cronet_UploadDataSink_OnRewindError(upload_data_sink,
-                                            "Async rewind failure");
-      },
-      upload_data_sink));
-  return true;
-}
-
-void TestUploadDataProvider::MaybeCancelRequest(CancelMode cancel_mode) {
-  if (cancel_mode == CANCEL_NONE)
-    return;
-
-  CHECK(url_request_);
-
-  if (cancel_mode == CANCEL_SYNC) {
-    Cronet_UrlRequest_Cancel(url_request_);
-    return;
-  }
-
-  EXPECT_EQ(cancel_mode, CANCEL_ASYNC);
-  PostTaskToExecutor(base::BindOnce(
-      [](Cronet_UrlRequestPtr url_request) {
-        Cronet_UrlRequest_Cancel(url_request);
-      },
-      url_request_));
-}
-
-void TestUploadDataProvider::Close() {
-  EXPECT_TRUE(!closed_.IsSet()) << "Closed twice";
-  closed_.Set();
-  awaiting_close_.Signal();
-}
-
-void TestUploadDataProvider::AssertClosed() {
-  awaiting_close_.TimedWait(base::Milliseconds(5000));
-  EXPECT_TRUE(closed_.IsSet()) << "Was not closed";
-}
-
-/* static */
-TestUploadDataProvider* TestUploadDataProvider::GetThis(
-    Cronet_UploadDataProviderPtr self) {
-  return static_cast<TestUploadDataProvider*>(
-      Cronet_UploadDataProvider_GetClientContext(self));
-}
-
-/* static */
-int64_t TestUploadDataProvider::GetLength(Cronet_UploadDataProviderPtr self) {
-  return GetThis(self)->GetLength();
-}
-
-/* static */
-void TestUploadDataProvider::Read(Cronet_UploadDataProviderPtr self,
-                                  Cronet_UploadDataSinkPtr upload_data_sink,
-                                  Cronet_BufferPtr buffer) {
-  return GetThis(self)->Read(upload_data_sink, buffer);
-}
-
-/* static */
-void TestUploadDataProvider::Rewind(Cronet_UploadDataProviderPtr self,
-                                    Cronet_UploadDataSinkPtr upload_data_sink) {
-  return GetThis(self)->Rewind(upload_data_sink);
-}
-
-/* static */
-void TestUploadDataProvider::Close(Cronet_UploadDataProviderPtr self) {
-  return GetThis(self)->Close();
-}
-
-}  // namespace test
-}  // namespace cronet
diff --git a/components/cronet/native/test/test_upload_data_provider.h b/components/cronet/native/test/test_upload_data_provider.h
deleted file mode 100644
index 09e0b8b704978..0000000000000
--- a/components/cronet/native/test/test_upload_data_provider.h
+++ /dev/null
@@ -1,153 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_TEST_TEST_UPLOAD_DATA_PROVIDER_H_
-#define COMPONENTS_CRONET_NATIVE_TEST_TEST_UPLOAD_DATA_PROVIDER_H_
-
-#include <memory>
-#include <string>
-#include <utility>
-#include <vector>
-
-#include "cronet_c.h"
-
-#include "base/bind.h"
-#include "base/synchronization/atomic_flag.h"
-#include "base/synchronization/lock.h"
-#include "base/synchronization/waitable_event.h"
-#include "base/threading/thread.h"
-#include "testing/gtest/include/gtest/gtest.h"
-
-namespace cronet {
-// Various test utility functions for testing Cronet.
-namespace test {
-
-/**
- * An UploadDataProvider implementation used in tests.
- */
-class TestUploadDataProvider {
- public:
-  // Indicates whether all success callbacks are synchronous or asynchronous.
-  // Doesn't apply to errors.
-  enum SuccessCallbackMode { SYNC, ASYNC };
-
-  // Indicates whether failures should invoke callbacks synchronously, or
-  // invoke callback asynchronously.
-  enum FailMode { NONE, CALLBACK_SYNC, CALLBACK_ASYNC };
-
-  // Indicates whether request should be canceled synchronously before
-  // the callback or asynchronously after.
-  enum CancelMode { CANCEL_NONE, CANCEL_SYNC, CANCEL_ASYNC };
-
-  TestUploadDataProvider(SuccessCallbackMode success_callback_mode,
-                         Cronet_ExecutorPtr executor);
-
-  virtual ~TestUploadDataProvider();
-
-  Cronet_UploadDataProviderPtr CreateUploadDataProvider();
-
-  // Adds the result to be returned by a successful read request.  The
-  // returned bytes must all fit within the read buffer provided by Cronet.
-  // After a rewind, if there is one, all reads will be repeated.
-  void AddRead(std::string read);
-
-  void SetReadFailure(int read_fail_index, FailMode read_fail_mode);
-
-  void SetRewindFailure(FailMode rewind_fail_mode);
-
-  void SetReadCancel(int read_cancel_index, CancelMode read_cancel_mode);
-
-  void SetRewindCancel(CancelMode rewind_cancel_mode);
-
-  void set_bad_length(int64_t bad_length) { bad_length_ = bad_length; }
-
-  void set_chunked(bool chunked) { chunked_ = chunked; }
-
-  void set_url_request(Cronet_UrlRequestPtr request) { url_request_ = request; }
-
-  Cronet_ExecutorPtr executor() const { return executor_; }
-
-  int num_read_calls() const { return num_read_calls_; }
-
-  int num_rewind_calls() const { return num_rewind_calls_; }
-
-  /**
-   * Returns the cumulative length of all data added by calls to addRead.
-   */
-  virtual int64_t GetLength() const;
-
-  int64_t GetUploadedLength() const;
-
-  virtual void Read(Cronet_UploadDataSinkPtr upload_data_sink,
-                    Cronet_BufferPtr buffer);
-
-  void Rewind(Cronet_UploadDataSinkPtr upload_data_sink);
-
-  void AssertClosed();
-
- private:
-  void PostTaskToExecutor(base::OnceClosure task);
-
-  void AssertIdle() const;
-
-  bool MaybeFailRead(int read_index, Cronet_UploadDataSinkPtr upload_data_sink);
-
-  bool MaybeFailRewind(Cronet_UploadDataSinkPtr upload_data_sink);
-
-  void MaybeCancelRequest(CancelMode cancel_mode);
-
-  void Close();
-
-  // Implementation of Cronet_UploadDataProvider methods.
-  static TestUploadDataProvider* GetThis(Cronet_UploadDataProviderPtr self);
-
-  static int64_t GetLength(Cronet_UploadDataProviderPtr self);
-  static void Read(Cronet_UploadDataProviderPtr self,
-                   Cronet_UploadDataSinkPtr upload_data_sink,
-                   Cronet_BufferPtr buffer);
-  static void Rewind(Cronet_UploadDataProviderPtr self,
-                     Cronet_UploadDataSinkPtr upload_data_sink);
-  static void Close(Cronet_UploadDataProviderPtr self);
-
-  std::vector<std::string> reads_;
-  const SuccessCallbackMode success_callback_mode_ = SYNC;
-  const Cronet_ExecutorPtr executor_;
-
-  Cronet_UrlRequestPtr url_request_;
-
-  bool chunked_ = false;
-
-  // Index of read to fail on.
-  int read_fail_index_ = -1;
-  // Indicates how to fail on a read.
-  FailMode read_fail_mode_ = NONE;
-  FailMode rewind_fail_mode_ = NONE;
-
-  // Index of read to cancel on.
-  int read_cancel_index_ = -1;
-  // Indicates how to cancel on a read.
-  CancelMode read_cancel_mode_ = CANCEL_NONE;
-  CancelMode rewind_cancel_mode_ = CANCEL_NONE;
-
-  // Report bad length if not set to -1.
-  int64_t bad_length_ = -1;
-
-  int num_read_calls_ = 0;
-  int num_rewind_calls_ = 0;
-
-  size_t next_read_ = 0;
-  bool started_ = false;
-  bool read_pending_ = false;
-  bool rewind_pending_ = false;
-  // Used to ensure there are no read/rewind requests after a failure.
-  bool failed_ = false;
-
-  base::AtomicFlag closed_;
-  base::WaitableEvent awaiting_close_;
-};
-
-}  // namespace test
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_NATIVE_TEST_TEST_UPLOAD_DATA_PROVIDER_H_
diff --git a/components/cronet/native/test/test_url_request_callback.cc b/components/cronet/native/test/test_url_request_callback.cc
deleted file mode 100644
index 2e814c2b6faa5..0000000000000
--- a/components/cronet/native/test/test_url_request_callback.cc
+++ /dev/null
@@ -1,351 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/test/test_url_request_callback.h"
-
-#include "base/bind.h"
-#include "components/cronet/native/test/test_util.h"
-
-namespace cronet {
-namespace test {
-
-TestUrlRequestCallback::UrlResponseInfo::UrlResponseInfo(
-    Cronet_UrlResponseInfoPtr response_info)
-    : url(Cronet_UrlResponseInfo_url_get(response_info)),
-      http_status_code(
-          Cronet_UrlResponseInfo_http_status_code_get(response_info)),
-      http_status_text(
-          Cronet_UrlResponseInfo_http_status_text_get(response_info)),
-      was_cached(Cronet_UrlResponseInfo_was_cached_get(response_info)),
-      negotiated_protocol(
-          Cronet_UrlResponseInfo_negotiated_protocol_get(response_info)),
-      proxy_server(Cronet_UrlResponseInfo_proxy_server_get(response_info)),
-      received_byte_count(
-          Cronet_UrlResponseInfo_received_byte_count_get(response_info)) {
-  for (uint32_t url_id = 0;
-       url_id < Cronet_UrlResponseInfo_url_chain_size(response_info);
-       ++url_id) {
-    url_chain.push_back(
-        Cronet_UrlResponseInfo_url_chain_at(response_info, url_id));
-  }
-  for (uint32_t i = 0;
-       i < Cronet_UrlResponseInfo_all_headers_list_size(response_info); ++i) {
-    Cronet_HttpHeaderPtr header =
-        Cronet_UrlResponseInfo_all_headers_list_at(response_info, i);
-    all_headers.push_back(std::pair<std::string, std::string>(
-        Cronet_HttpHeader_name_get(header),
-        Cronet_HttpHeader_value_get(header)));
-  }
-}
-
-TestUrlRequestCallback::UrlResponseInfo::UrlResponseInfo(
-    const std::vector<std::string>& urls,
-    const std::string& message,
-    int32_t status_code,
-    int64_t received_bytes,
-    std::vector<std::string> headers)
-    : url(urls.back()),
-      url_chain(urls),
-      http_status_code(status_code),
-      http_status_text(message),
-      negotiated_protocol("unknown"),
-      proxy_server(":0"),
-      received_byte_count(received_bytes) {
-  for (uint32_t i = 0; i < headers.size(); i += 2) {
-    all_headers.push_back(
-        std::pair<std::string, std::string>(headers[i], headers[i + 1]));
-  }
-}
-
-TestUrlRequestCallback::UrlResponseInfo::~UrlResponseInfo() = default;
-
-TestUrlRequestCallback::TestUrlRequestCallback(bool direct_executor)
-    : direct_executor_(direct_executor),
-      done_(base::WaitableEvent::ResetPolicy::MANUAL,
-            base::WaitableEvent::InitialState::NOT_SIGNALED),
-      step_block_(base::WaitableEvent::ResetPolicy::MANUAL,
-                  base::WaitableEvent::InitialState::NOT_SIGNALED) {}
-
-TestUrlRequestCallback::~TestUrlRequestCallback() {
-  ShutdownExecutor();
-}
-
-Cronet_ExecutorPtr TestUrlRequestCallback::GetExecutor() {
-  if (executor_)
-    return executor_;
-  if (direct_executor_) {
-    executor_ =
-        Cronet_Executor_CreateWith(TestUrlRequestCallback::ExecuteDirect);
-  } else {
-    executor_thread_ =
-        std::make_unique<base::Thread>("TestUrlRequestCallback executor");
-    executor_thread_->Start();
-    executor_ = Cronet_Executor_CreateWith(TestUrlRequestCallback::Execute);
-    Cronet_Executor_SetClientContext(executor_, this);
-  }
-  return executor_;
-}
-
-Cronet_UrlRequestCallbackPtr
-TestUrlRequestCallback::CreateUrlRequestCallback() {
-  Cronet_UrlRequestCallbackPtr callback = Cronet_UrlRequestCallback_CreateWith(
-      TestUrlRequestCallback::OnRedirectReceived,
-      TestUrlRequestCallback::OnResponseStarted,
-      TestUrlRequestCallback::OnReadCompleted,
-      TestUrlRequestCallback::OnSucceeded, TestUrlRequestCallback::OnFailed,
-      TestUrlRequestCallback::OnCanceled);
-  Cronet_UrlRequestCallback_SetClientContext(callback, this);
-  return callback;
-}
-
-void TestUrlRequestCallback::OnRedirectReceived(Cronet_UrlRequestPtr request,
-                                                Cronet_UrlResponseInfoPtr info,
-                                                Cronet_String newLocationUrl) {
-  CheckExecutorThread();
-
-  CHECK(!Cronet_UrlRequest_IsDone(request));
-  CHECK(response_step_ == NOTHING || response_step_ == ON_RECEIVED_REDIRECT);
-  CHECK(!last_error_);
-
-  response_step_ = ON_RECEIVED_REDIRECT;
-  redirect_url_list_.push_back(newLocationUrl);
-  redirect_response_info_list_.push_back(
-      std::make_unique<UrlResponseInfo>(info));
-  ++redirect_count_;
-  if (MaybeCancelOrPause(request)) {
-    return;
-  }
-  Cronet_UrlRequest_FollowRedirect(request);
-}
-
-void TestUrlRequestCallback::OnResponseStarted(Cronet_UrlRequestPtr request,
-                                               Cronet_UrlResponseInfoPtr info) {
-  CheckExecutorThread();
-  CHECK(!Cronet_UrlRequest_IsDone(request));
-  CHECK(response_step_ == NOTHING || response_step_ == ON_RECEIVED_REDIRECT);
-  CHECK(!last_error_);
-  response_step_ = ON_RESPONSE_STARTED;
-  original_response_info_ = info;
-  response_info_ = std::make_unique<UrlResponseInfo>(info);
-  if (MaybeCancelOrPause(request)) {
-    return;
-  }
-  StartNextRead(request);
-}
-
-void TestUrlRequestCallback::OnReadCompleted(Cronet_UrlRequestPtr request,
-                                             Cronet_UrlResponseInfoPtr info,
-                                             Cronet_BufferPtr buffer,
-                                             uint64_t bytes_read) {
-  CheckExecutorThread();
-  CHECK(!Cronet_UrlRequest_IsDone(request));
-  CHECK(response_step_ == ON_RESPONSE_STARTED ||
-        response_step_ == ON_READ_COMPLETED);
-  CHECK(!last_error_);
-  response_step_ = ON_READ_COMPLETED;
-  original_response_info_ = info;
-  response_info_ = std::make_unique<UrlResponseInfo>(info);
-  response_data_length_ += bytes_read;
-
-  if (accumulate_response_data_) {
-    std::string last_read_data(
-        reinterpret_cast<char*>(Cronet_Buffer_GetData(buffer)), bytes_read);
-    response_as_string_ += last_read_data;
-  }
-
-  if (MaybeCancelOrPause(request)) {
-    Cronet_Buffer_Destroy(buffer);
-    return;
-  }
-  StartNextRead(request, buffer);
-}
-
-void TestUrlRequestCallback::OnSucceeded(Cronet_UrlRequestPtr request,
-                                         Cronet_UrlResponseInfoPtr info) {
-  CheckExecutorThread();
-  CHECK(Cronet_UrlRequest_IsDone(request));
-  CHECK(response_step_ == ON_RESPONSE_STARTED ||
-        response_step_ == ON_READ_COMPLETED);
-  CHECK(!on_error_called_);
-  CHECK(!on_canceled_called_);
-  CHECK(!last_error_);
-  response_step_ = ON_SUCCEEDED;
-  original_response_info_ = info;
-  response_info_ = std::make_unique<UrlResponseInfo>(info);
-
-  MaybeCancelOrPause(request);
-  SignalDone();
-}
-
-void TestUrlRequestCallback::OnFailed(Cronet_UrlRequestPtr request,
-                                      Cronet_UrlResponseInfoPtr info,
-                                      Cronet_ErrorPtr error) {
-  CheckExecutorThread();
-  CHECK(Cronet_UrlRequest_IsDone(request));
-  // Shouldn't happen after success.
-  CHECK(response_step_ != ON_SUCCEEDED);
-  // Should happen at most once for a single request.
-  CHECK(!on_error_called_);
-  CHECK(!on_canceled_called_);
-  CHECK(!last_error_);
-
-  response_step_ = ON_FAILED;
-  on_error_called_ = true;
-  // It is possible that |info| is nullptr if response has not started.
-  if (info) {
-    original_response_info_ = info;
-    response_info_ = std::make_unique<UrlResponseInfo>(info);
-  }
-  last_error_ = error;
-  last_error_code_ = Cronet_Error_error_code_get(error);
-  last_error_message_ = Cronet_Error_message_get(error);
-  MaybeCancelOrPause(request);
-  SignalDone();
-}
-
-void TestUrlRequestCallback::OnCanceled(Cronet_UrlRequestPtr request,
-                                        Cronet_UrlResponseInfoPtr info) {
-  CheckExecutorThread();
-  CHECK(Cronet_UrlRequest_IsDone(request));
-  CHECK(!on_error_called_);
-  // Should happen at most once for a single request.
-  CHECK(!on_canceled_called_);
-  CHECK(!last_error_);
-
-  response_step_ = ON_CANCELED;
-  on_canceled_called_ = true;
-  // It is possible |info| is nullptr if the response has not started.
-  if (info) {
-    original_response_info_ = info;
-    response_info_ = std::make_unique<UrlResponseInfo>(info);
-  }
-  MaybeCancelOrPause(request);
-  SignalDone();
-}
-
-void TestUrlRequestCallback::ShutdownExecutor() {
-  base::AutoLock lock(executor_lock_);
-  if (executor_ == nullptr)
-    return;
-  Cronet_Executor_Destroy(executor_);
-  executor_ = nullptr;
-  // Stop executor thread outside of lock to allow runnables to complete.
-  auto executor_thread(std::move(executor_thread_));
-  executor_lock_.Release();
-  executor_thread.reset();
-  executor_lock_.Acquire();
-}
-
-void TestUrlRequestCallback::CheckExecutorThread() {
-  base::AutoLock lock(executor_lock_);
-  if (executor_thread_ && !direct_executor_)
-    CHECK(executor_thread_->task_runner()->BelongsToCurrentThread());
-}
-
-bool TestUrlRequestCallback::MaybeCancelOrPause(Cronet_UrlRequestPtr request) {
-  CheckExecutorThread();
-  if (response_step_ != failure_step_ || failure_type_ == NONE) {
-    if (!auto_advance_) {
-      step_block_.Signal();
-      return true;
-    }
-    return false;
-  }
-
-  if (failure_type_ == CANCEL_SYNC) {
-    Cronet_UrlRequest_Cancel(request);
-  }
-  if (failure_type_ == CANCEL_ASYNC ||
-      failure_type_ == CANCEL_ASYNC_WITHOUT_PAUSE) {
-    if (direct_executor_) {
-      Cronet_UrlRequest_Cancel(request);
-    } else {
-      base::AutoLock lock(executor_lock_);
-      CHECK(executor_thread_);
-      executor_thread_->task_runner()->PostTask(
-          FROM_HERE, base::BindOnce(&Cronet_UrlRequest_Cancel, request));
-    }
-  }
-  return failure_type_ != CANCEL_ASYNC_WITHOUT_PAUSE;
-}
-
-/* static */
-TestUrlRequestCallback* TestUrlRequestCallback::GetThis(
-    Cronet_UrlRequestCallbackPtr self) {
-  return static_cast<TestUrlRequestCallback*>(
-      Cronet_UrlRequestCallback_GetClientContext(self));
-}
-
-/* static */
-void TestUrlRequestCallback::OnRedirectReceived(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info,
-    Cronet_String newLocationUrl) {
-  GetThis(self)->OnRedirectReceived(request, info, newLocationUrl);
-}
-
-/* static */
-void TestUrlRequestCallback::OnResponseStarted(
-    Cronet_UrlRequestCallbackPtr self,
-    Cronet_UrlRequestPtr request,
-    Cronet_UrlResponseInfoPtr info) {
-  GetThis(self)->OnResponseStarted(request, info);
-}
-
-/* static */
-void TestUrlRequestCallback::OnReadCompleted(Cronet_UrlRequestCallbackPtr self,
-                                             Cronet_UrlRequestPtr request,
-                                             Cronet_UrlResponseInfoPtr info,
-                                             Cronet_BufferPtr buffer,
-                                             uint64_t bytesRead) {
-  GetThis(self)->OnReadCompleted(request, info, buffer, bytesRead);
-}
-
-/* static */
-void TestUrlRequestCallback::OnSucceeded(Cronet_UrlRequestCallbackPtr self,
-                                         Cronet_UrlRequestPtr request,
-                                         Cronet_UrlResponseInfoPtr info) {
-  GetThis(self)->OnSucceeded(request, info);
-}
-
-/* static */
-void TestUrlRequestCallback::OnFailed(Cronet_UrlRequestCallbackPtr self,
-                                      Cronet_UrlRequestPtr request,
-                                      Cronet_UrlResponseInfoPtr info,
-                                      Cronet_ErrorPtr error) {
-  GetThis(self)->OnFailed(request, info, error);
-}
-
-/* static */
-void TestUrlRequestCallback::OnCanceled(Cronet_UrlRequestCallbackPtr self,
-                                        Cronet_UrlRequestPtr request,
-                                        Cronet_UrlResponseInfoPtr info) {
-  GetThis(self)->OnCanceled(request, info);
-}
-
-/* static */
-void TestUrlRequestCallback::Execute(Cronet_ExecutorPtr self,
-                                     Cronet_RunnablePtr runnable) {
-  CHECK(self);
-  auto* callback = static_cast<TestUrlRequestCallback*>(
-      Cronet_Executor_GetClientContext(self));
-  CHECK(callback);
-  base::AutoLock lock(callback->executor_lock_);
-  CHECK(callback->executor_thread_);
-  // Post |runnable| onto executor thread.
-  callback->executor_thread_->task_runner()->PostTask(
-      FROM_HERE, RunnableWrapper::CreateOnceClosure(runnable));
-}
-
-/* static */
-void TestUrlRequestCallback::ExecuteDirect(Cronet_ExecutorPtr self,
-                                           Cronet_RunnablePtr runnable) {
-  // Run |runnable| directly.
-  Cronet_Runnable_Run(runnable);
-  Cronet_Runnable_Destroy(runnable);
-}
-
-}  // namespace test
-}  // namespace cronet
diff --git a/components/cronet/native/test/test_url_request_callback.h b/components/cronet/native/test/test_url_request_callback.h
deleted file mode 100644
index 03ded4aa9dac9..0000000000000
--- a/components/cronet/native/test/test_url_request_callback.h
+++ /dev/null
@@ -1,239 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_TEST_TEST_URL_REQUEST_CALLBACK_H_
-#define COMPONENTS_CRONET_NATIVE_TEST_TEST_URL_REQUEST_CALLBACK_H_
-
-#include <memory>
-#include <string>
-#include <utility>
-#include <vector>
-
-#include "cronet_c.h"
-
-#include "base/synchronization/lock.h"
-#include "base/synchronization/waitable_event.h"
-#include "base/threading/thread.h"
-
-namespace cronet {
-// Various test utility functions for testing Cronet.
-namespace test {
-
-class TestUrlRequestCallback {
- public:
-  enum ResponseStep {
-    NOTHING,
-    ON_RECEIVED_REDIRECT,
-    ON_RESPONSE_STARTED,
-    ON_READ_COMPLETED,
-    ON_SUCCEEDED,
-    ON_FAILED,
-    ON_CANCELED,
-  };
-
-  enum FailureType {
-    NONE,
-    CANCEL_SYNC,
-    CANCEL_ASYNC,
-    // Same as above, but continues to advance the request after posting
-    // the cancellation task.
-    CANCEL_ASYNC_WITHOUT_PAUSE,
-  };
-
-  class UrlResponseInfo {
-   public:
-    // Construct actual response info copied from Cronet_UrlResponseInfoPtr.
-    explicit UrlResponseInfo(Cronet_UrlResponseInfoPtr response_info);
-    // Construct expected response info for testing.
-    UrlResponseInfo(const std::vector<std::string>& urls,
-                    const std::string& message,
-                    int32_t status_code,
-                    int64_t received_bytes,
-                    std::vector<std::string> headers);
-    ~UrlResponseInfo();
-
-    // Data copied from response_info to make it available after request is
-    // done.
-    std::string url;
-    std::vector<std::string> url_chain;
-    int32_t http_status_code = 0;
-    std::string http_status_text;
-    std::vector<std::pair<std::string, std::string>> all_headers;
-    bool was_cached = false;
-    std::string negotiated_protocol;
-    std::string proxy_server;
-    int64_t received_byte_count = 0;
-  };
-
-  // TODO(crbug.com/969048): Make these private with public accessors.
-  std::vector<std::unique_ptr<UrlResponseInfo>> redirect_response_info_list_;
-  std::vector<std::string> redirect_url_list_;
-  // Owned by UrlRequest, only valid until UrlRequest is destroyed.
-  Cronet_UrlResponseInfoPtr original_response_info_ = nullptr;
-  // |response_info_| is copied from |original_response_info_|, valid after
-  // UrlRequest is destroyed.
-  std::unique_ptr<UrlResponseInfo> response_info_;
-  // Owned by UrlRequest, only valid until UrlRequest is destroyed.
-  Cronet_ErrorPtr last_error_ = nullptr;
-  // Values copied from |last_error_| valid after UrlRequest is destroyed.
-  Cronet_Error_ERROR_CODE last_error_code_ =
-      Cronet_Error_ERROR_CODE_ERROR_OTHER;
-  std::string last_error_message_;
-
-  ResponseStep response_step_ = NOTHING;
-
-  int redirect_count_ = 0;
-  bool on_error_called_ = false;
-  bool on_canceled_called_ = false;
-
-  int response_data_length_ = 0;
-  std::string response_as_string_;
-
-  explicit TestUrlRequestCallback(bool direct_executor);
-  virtual ~TestUrlRequestCallback();
-
-  Cronet_ExecutorPtr GetExecutor();
-
-  Cronet_UrlRequestCallbackPtr CreateUrlRequestCallback();
-
-  void set_auto_advance(bool auto_advance) { auto_advance_ = auto_advance; }
-
-  void set_accumulate_response_data(bool accuumulate) {
-    accumulate_response_data_ = accuumulate;
-  }
-
-  void set_failure(FailureType failure_type, ResponseStep failure_step) {
-    failure_step_ = failure_step;
-    failure_type_ = failure_type;
-  }
-
-  void WaitForDone() { done_.Wait(); }
-
-  void WaitForNextStep() {
-    step_block_.Wait();
-    step_block_.Reset();
-  }
-
-  void ShutdownExecutor();
-
-  bool IsDone() { return done_.IsSignaled(); }
-
- protected:
-  class Executor;
-
-  virtual void OnRedirectReceived(Cronet_UrlRequestPtr request,
-                                  Cronet_UrlResponseInfoPtr info,
-                                  Cronet_String newLocationUrl);
-
-  virtual void OnResponseStarted(Cronet_UrlRequestPtr request,
-                                 Cronet_UrlResponseInfoPtr info);
-
-  virtual void OnReadCompleted(Cronet_UrlRequestPtr request,
-                               Cronet_UrlResponseInfoPtr info,
-                               Cronet_BufferPtr buffer,
-                               uint64_t bytes_read);
-
-  virtual void OnSucceeded(Cronet_UrlRequestPtr request,
-                           Cronet_UrlResponseInfoPtr info);
-
-  virtual void OnFailed(Cronet_UrlRequestPtr request,
-                        Cronet_UrlResponseInfoPtr info,
-                        Cronet_ErrorPtr error);
-
-  virtual void OnCanceled(Cronet_UrlRequestPtr request,
-                          Cronet_UrlResponseInfoPtr info);
-
-  void StartNextRead(Cronet_UrlRequestPtr request) {
-    Cronet_BufferPtr buffer = Cronet_Buffer_Create();
-    Cronet_Buffer_InitWithAlloc(buffer, READ_BUFFER_SIZE);
-
-    StartNextRead(request, buffer);
-  }
-
-  void StartNextRead(Cronet_UrlRequestPtr request, Cronet_BufferPtr buffer) {
-    Cronet_UrlRequest_Read(request, buffer);
-  }
-
-  void SignalDone() { done_.Signal(); }
-
-  void CheckExecutorThread();
-
-  /**
-   * Returns false if the callback should continue to advance the
-   * request.
-   */
-  bool MaybeCancelOrPause(Cronet_UrlRequestPtr request);
-
-  // Implementation of Cronet_UrlRequestCallback methods.
-  static TestUrlRequestCallback* GetThis(Cronet_UrlRequestCallbackPtr self);
-
-  static void OnRedirectReceived(Cronet_UrlRequestCallbackPtr self,
-                                 Cronet_UrlRequestPtr request,
-                                 Cronet_UrlResponseInfoPtr info,
-                                 Cronet_String newLocationUrl);
-
-  static void OnResponseStarted(Cronet_UrlRequestCallbackPtr self,
-                                Cronet_UrlRequestPtr request,
-                                Cronet_UrlResponseInfoPtr info);
-
-  static void OnReadCompleted(Cronet_UrlRequestCallbackPtr self,
-                              Cronet_UrlRequestPtr request,
-                              Cronet_UrlResponseInfoPtr info,
-                              Cronet_BufferPtr buffer,
-                              uint64_t bytesRead);
-
-  static void OnSucceeded(Cronet_UrlRequestCallbackPtr self,
-                          Cronet_UrlRequestPtr request,
-                          Cronet_UrlResponseInfoPtr info);
-
-  static void OnFailed(Cronet_UrlRequestCallbackPtr self,
-                       Cronet_UrlRequestPtr request,
-                       Cronet_UrlResponseInfoPtr info,
-                       Cronet_ErrorPtr error);
-
-  static void OnCanceled(Cronet_UrlRequestCallbackPtr self,
-                         Cronet_UrlRequestPtr request,
-                         Cronet_UrlResponseInfoPtr info);
-
-  // Implementation of Cronet_Executor methods.
-  static void Execute(Cronet_ExecutorPtr self, Cronet_RunnablePtr runnable);
-  static void ExecuteDirect(Cronet_ExecutorPtr self,
-                            Cronet_RunnablePtr runnable);
-
-  const int READ_BUFFER_SIZE = 32 * 1024;
-
-  // When false, the consumer is responsible for all calls into the request
-  // that advance it.
-  bool auto_advance_ = true;
-
-  // When false response data is not accuumulated for better performance.
-  bool accumulate_response_data_ = true;
-
-  // Whether to create direct executors.
-  const bool direct_executor_;
-
-  // Conditionally fail on certain steps.
-  FailureType failure_type_ = NONE;
-  ResponseStep failure_step_ = NOTHING;
-
-  // Signals when request is done either successfully or not.
-  base::WaitableEvent done_;
-
-  // Signaled on each step when |auto_advance_| is false.
-  base::WaitableEvent step_block_;
-
-  // Lock that synchronizes access to |executor_| and |executor_thread_|.
-  base::Lock executor_lock_;
-
-  // Executor that runs callback tasks.
-  Cronet_ExecutorPtr executor_ = nullptr;
-
-  // Thread on which |executor_| runs callback tasks.
-  std::unique_ptr<base::Thread> executor_thread_;
-};
-
-}  // namespace test
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_NATIVE_TEST_TEST_URL_REQUEST_CALLBACK_H_
diff --git a/components/cronet/native/test/test_util.cc b/components/cronet/native/test/test_util.cc
deleted file mode 100644
index 7ef510ba0454b..0000000000000
--- a/components/cronet/native/test/test_util.cc
+++ /dev/null
@@ -1,102 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/test/test_util.h"
-
-#include <memory>
-#include <string>
-
-#include "base/bind.h"
-#include "base/strings/stringprintf.h"
-#include "base/threading/sequenced_task_runner_handle.h"
-#include "components/cronet/native/generated/cronet.idl_c.h"
-#include "net/base/net_errors.h"
-#include "net/cert/mock_cert_verifier.h"
-
-namespace {
-// Implementation of PostTaskExecutor methods.
-void TestExecutor_Execute(Cronet_ExecutorPtr self,
-                          Cronet_RunnablePtr runnable) {
-  CHECK(self);
-  DVLOG(1) << "Post Task";
-  base::SequencedTaskRunnerHandle::Get()->PostTask(
-      FROM_HERE, cronet::test::RunnableWrapper::CreateOnceClosure(runnable));
-}
-
-// Test Cert Verifier that successfully verifies any cert from test.example.com.
-class TestCertVerifier : public net::MockCertVerifier {
- public:
-  TestCertVerifier() = default;
-  ~TestCertVerifier() override = default;
-
-  // CertVerifier implementation
-  int Verify(const RequestParams& params,
-             net::CertVerifyResult* verify_result,
-             net::CompletionOnceCallback callback,
-             std::unique_ptr<Request>* out_req,
-             const net::NetLogWithSource& net_log) override {
-    verify_result->Reset();
-    if (params.hostname() == "test.example.com") {
-      verify_result->verified_cert = params.certificate();
-      verify_result->is_issued_by_known_root = true;
-      return net::OK;
-    }
-    return net::MockCertVerifier::Verify(params, verify_result,
-                                         std::move(callback), out_req, net_log);
-  }
-};
-
-}  // namespace
-
-namespace cronet {
-namespace test {
-
-Cronet_EnginePtr CreateTestEngine(int quic_server_port) {
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_EngineParams_user_agent_set(engine_params, "test");
-  // Add Host Resolver Rules.
-  std::string host_resolver_rules = base::StringPrintf(
-      "MAP test.example.com 127.0.0.1:%d,"
-      "MAP notfound.example.com ~NOTFOUND",
-      quic_server_port);
-  Cronet_EngineParams_experimental_options_set(
-      engine_params,
-      base::StringPrintf(
-          "{ \"HostResolverRules\": { \"host_resolver_rules\" : \"%s\" } }",
-          host_resolver_rules.c_str())
-          .c_str());
-  // Enable QUIC.
-  Cronet_EngineParams_enable_quic_set(engine_params, true);
-  // Add QUIC Hint.
-  Cronet_QuicHintPtr quic_hint = Cronet_QuicHint_Create();
-  Cronet_QuicHint_host_set(quic_hint, "test.example.com");
-  Cronet_QuicHint_port_set(quic_hint, 443);
-  Cronet_QuicHint_alternate_port_set(quic_hint, 443);
-  Cronet_EngineParams_quic_hints_add(engine_params, quic_hint);
-  Cronet_QuicHint_Destroy(quic_hint);
-  // Create Cronet Engine.
-  Cronet_EnginePtr cronet_engine = Cronet_Engine_Create();
-  // Set Mock Cert Verifier.
-  auto cert_verifier = std::make_unique<TestCertVerifier>();
-  Cronet_Engine_SetMockCertVerifierForTesting(cronet_engine,
-                                              cert_verifier.release());
-  // Start Cronet Engine.
-  Cronet_Engine_StartWithParams(cronet_engine, engine_params);
-  Cronet_EngineParams_Destroy(engine_params);
-  return cronet_engine;
-}
-
-Cronet_ExecutorPtr CreateTestExecutor() {
-  return Cronet_Executor_CreateWith(TestExecutor_Execute);
-}
-
-// static
-base::OnceClosure RunnableWrapper::CreateOnceClosure(
-    Cronet_RunnablePtr runnable) {
-  return base::BindOnce(&RunnableWrapper::Run,
-                        std::make_unique<RunnableWrapper>(runnable));
-}
-
-}  // namespace test
-}  // namespace cronet
diff --git a/components/cronet/native/test/test_util.h b/components/cronet/native/test/test_util.h
deleted file mode 100644
index ae9a0ba7729c0..0000000000000
--- a/components/cronet/native/test/test_util.h
+++ /dev/null
@@ -1,43 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_TEST_TEST_UTIL_H_
-#define COMPONENTS_CRONET_NATIVE_TEST_TEST_UTIL_H_
-
-#include "base/callback.h"
-#include "cronet_c.h"
-
-namespace cronet {
-// Various test utility functions for testing Cronet.
-namespace test {
-
-// Create an engine that is configured to support local test servers.
-Cronet_EnginePtr CreateTestEngine(int quic_server_port);
-
-// Create an executor that runs tasks on different background thread.
-Cronet_ExecutorPtr CreateTestExecutor();
-
-// Class to wrap Cronet_Runnable into a base::OnceClosure.
-class RunnableWrapper {
- public:
-  ~RunnableWrapper() { Cronet_Runnable_Destroy(runnable_); }
-
-  // Wrap a Cronet_Runnable into a base::OnceClosure.
-  static base::OnceClosure CreateOnceClosure(Cronet_RunnablePtr runnable);
-
- private:
-  friend std::unique_ptr<RunnableWrapper> std::make_unique<RunnableWrapper>(
-      Cronet_RunnablePtr&);
-
-  explicit RunnableWrapper(Cronet_RunnablePtr runnable) : runnable_(runnable) {}
-
-  void Run() { Cronet_Runnable_Run(runnable_); }
-
-  const Cronet_RunnablePtr runnable_;
-};
-
-}  // namespace test
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_NATIVE_TEST_TEST_UTIL_H_
diff --git a/components/cronet/native/test/url_request_test.cc b/components/cronet/native/test/url_request_test.cc
deleted file mode 100644
index d973e24a49e6f..0000000000000
--- a/components/cronet/native/test/url_request_test.cc
+++ /dev/null
@@ -1,1836 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include <atomic>
-#include <memory>
-#include <tuple>
-
-#include "base/files/file_util.h"
-#include "base/files/scoped_temp_dir.h"
-#include "base/logging.h"
-#include "base/memory/raw_ptr.h"
-#include "base/run_loop.h"
-#include "base/synchronization/waitable_event.h"
-#include "base/test/task_environment.h"
-#include "components/cronet/native/test/test_request_finished_info_listener.h"
-#include "components/cronet/native/test/test_upload_data_provider.h"
-#include "components/cronet/native/test/test_url_request_callback.h"
-#include "components/cronet/native/test/test_util.h"
-#include "components/cronet/testing/test_server/test_server.h"
-#include "cronet_c.h"
-#include "net/test/embedded_test_server/default_handlers.h"
-#include "net/test/embedded_test_server/embedded_test_server.h"
-#include "testing/gmock/include/gmock/gmock.h"
-#include "testing/gtest/include/gtest/gtest.h"
-#include "url/gurl.h"
-
-using cronet::test::TestRequestFinishedInfoListener;
-using cronet::test::TestUploadDataProvider;
-using cronet::test::TestUrlRequestCallback;
-using ::testing::HasSubstr;
-
-namespace {
-
-// A Cronet_UrlRequestStatusListener impl that waits for OnStatus callback.
-class StatusListener {
- public:
-  // |callback| is verified to not yet have reached a final state when
-  // OnStatus() is called back.
-  explicit StatusListener(TestUrlRequestCallback* callback)
-      : status_listener_(Cronet_UrlRequestStatusListener_CreateWith(
-            StatusListener::OnStatus)),
-        callback_(callback),
-        expect_request_not_done_(false) {
-    Cronet_UrlRequestStatusListener_SetClientContext(status_listener_, this);
-  }
-
-  StatusListener(const StatusListener&) = delete;
-  StatusListener& operator=(const StatusListener&) = delete;
-
-  ~StatusListener() {
-    Cronet_UrlRequestStatusListener_Destroy(status_listener_);
-  }
-
-  // Wait for and return request status.
-  Cronet_UrlRequestStatusListener_Status GetStatus(
-      Cronet_UrlRequestPtr request) {
-    Cronet_UrlRequest_GetStatus(request, status_listener_);
-    // NOTE(pauljensen): There's no guarantee this line will get executed
-    // before OnStatus() reads |expect_request_not_done_|.  It's very unlikely
-    // it will get read before this write, but if it does it just means
-    // OnStatus() won't check that the final callback has not been issued yet.
-    expect_request_not_done_ = !Cronet_UrlRequest_IsDone(request);
-    awaiting_status_.Wait();
-    return status_;
-  }
-
- private:
-  // Cronet_UrlRequestStatusListener OnStatus impl.
-  static void OnStatus(Cronet_UrlRequestStatusListenerPtr self,
-                       Cronet_UrlRequestStatusListener_Status status) {
-    StatusListener* listener = static_cast<StatusListener*>(
-        Cronet_UrlRequestStatusListener_GetClientContext(self));
-
-    // Enforce we call OnStatus() before OnSucceeded/OnFailed/OnCanceled().
-    if (listener->expect_request_not_done_)
-      EXPECT_FALSE(listener->callback_->IsDone());
-
-    listener->status_ = status;
-    listener->awaiting_status_.Signal();
-  }
-
-  Cronet_UrlRequestStatusListenerPtr const status_listener_;
-  const raw_ptr<TestUrlRequestCallback> callback_;
-
-  Cronet_UrlRequestStatusListener_Status status_ =
-      Cronet_UrlRequestStatusListener_Status_INVALID;
-  base::WaitableEvent awaiting_status_;
-
-  // Indicates if GetStatus() was called before request finished, indicating
-  // that OnStatus() should be called before request finishes. The writing of
-  // this variable races the reading of it, but it's initialized to a safe
-  // value.
-  std::atomic_bool expect_request_not_done_;
-};
-
-// Query and return status of |request|. |callback| is verified to not yet have
-// reached a final state by the time OnStatus is called.
-Cronet_UrlRequestStatusListener_Status GetRequestStatus(
-    Cronet_UrlRequestPtr request,
-    TestUrlRequestCallback* callback) {
-  return StatusListener(callback).GetStatus(request);
-}
-
-enum class RequestFinishedListenerType {
-  kNoListener,          // Don't add a request finished listener.
-  kUrlRequestListener,  // Add a request finished listener to the UrlRequest.
-  kEngineListener,      // Add a request finished listener to the Engine.
-};
-
-// Converts a Cronet_DateTimePtr into the int64 number of milliseconds since
-// the UNIX epoch.
-//
-// Returns -1 if |date_time| is nullptr.
-int64_t DateToMillis(Cronet_DateTimePtr date_time) {
-  if (date_time == nullptr) {
-    return -1;
-  }
-  int64_t value = Cronet_DateTime_value_get(date_time);
-  // Cronet_DateTime fields shouldn't be before the UNIX epoch.
-  //
-  // While DateToMillis() callers can easily check this themselves (and
-  // produce more descriptive errors showing which field is violating), they
-  // can't easily distinguish a nullptr vs -1 value, so we check for -1 here.
-  EXPECT_NE(-1, value);
-  return value;
-}
-
-// Sanity check that the date isn't wildly off, somehow (perhaps due to read of
-// used memory, wild pointer, etc.).
-//
-// Interpreted as milliseconds after the UNIX timestamp, this timestamp occurs
-// at 37,648 C.E.
-constexpr int64_t kDateOverrunThreshold = 1LL << 50;
-
-// Basic sanity checking of all Cronet_Metrics fields. For optional fields, we
-// allow the field to be non-present. Start/end pairs should be monotonic (end
-// not less than start).
-//
-// Ordering of events is also checked.
-void VerifyRequestMetrics(Cronet_MetricsPtr metrics) {
-  EXPECT_GE(DateToMillis(Cronet_Metrics_request_start_get(metrics)), 0);
-  EXPECT_LT(DateToMillis(Cronet_Metrics_request_start_get(metrics)),
-            kDateOverrunThreshold);
-  EXPECT_GE(DateToMillis(Cronet_Metrics_request_end_get(metrics)),
-            DateToMillis(Cronet_Metrics_request_start_get(metrics)));
-  EXPECT_LT(DateToMillis(Cronet_Metrics_request_end_get(metrics)),
-            kDateOverrunThreshold);
-
-  EXPECT_GE(DateToMillis(Cronet_Metrics_dns_start_get(metrics)), -1);
-  EXPECT_LT(DateToMillis(Cronet_Metrics_dns_start_get(metrics)),
-            kDateOverrunThreshold);
-  EXPECT_GE(DateToMillis(Cronet_Metrics_dns_end_get(metrics)),
-            DateToMillis(Cronet_Metrics_dns_start_get(metrics)));
-  EXPECT_LT(DateToMillis(Cronet_Metrics_dns_end_get(metrics)),
-            kDateOverrunThreshold);
-
-  EXPECT_GE(DateToMillis(Cronet_Metrics_connect_start_get(metrics)), -1);
-  EXPECT_LT(DateToMillis(Cronet_Metrics_connect_start_get(metrics)),
-            kDateOverrunThreshold);
-  EXPECT_GE(DateToMillis(Cronet_Metrics_connect_end_get(metrics)),
-            DateToMillis(Cronet_Metrics_connect_start_get(metrics)));
-  EXPECT_LT(DateToMillis(Cronet_Metrics_connect_end_get(metrics)),
-            kDateOverrunThreshold);
-
-  EXPECT_GE(DateToMillis(Cronet_Metrics_ssl_start_get(metrics)), -1);
-  EXPECT_LT(DateToMillis(Cronet_Metrics_ssl_start_get(metrics)),
-            kDateOverrunThreshold);
-  EXPECT_GE(DateToMillis(Cronet_Metrics_ssl_end_get(metrics)),
-            DateToMillis(Cronet_Metrics_ssl_start_get(metrics)));
-  EXPECT_LT(DateToMillis(Cronet_Metrics_ssl_end_get(metrics)),
-            kDateOverrunThreshold);
-
-  EXPECT_GE(DateToMillis(Cronet_Metrics_sending_start_get(metrics)), -1);
-  EXPECT_LT(DateToMillis(Cronet_Metrics_sending_start_get(metrics)),
-            kDateOverrunThreshold);
-  EXPECT_GE(DateToMillis(Cronet_Metrics_sending_end_get(metrics)),
-            DateToMillis(Cronet_Metrics_sending_start_get(metrics)));
-  EXPECT_LT(DateToMillis(Cronet_Metrics_sending_end_get(metrics)),
-            kDateOverrunThreshold);
-
-  EXPECT_GE(DateToMillis(Cronet_Metrics_push_start_get(metrics)), -1);
-  EXPECT_LT(DateToMillis(Cronet_Metrics_push_start_get(metrics)),
-            kDateOverrunThreshold);
-  EXPECT_GE(DateToMillis(Cronet_Metrics_push_end_get(metrics)),
-            DateToMillis(Cronet_Metrics_push_start_get(metrics)));
-  EXPECT_LT(DateToMillis(Cronet_Metrics_push_end_get(metrics)),
-            kDateOverrunThreshold);
-
-  EXPECT_GE(DateToMillis(Cronet_Metrics_response_start_get(metrics)), -1);
-  EXPECT_LT(DateToMillis(Cronet_Metrics_response_start_get(metrics)),
-            kDateOverrunThreshold);
-
-  EXPECT_GE(Cronet_Metrics_sent_byte_count_get(metrics), -1);
-  EXPECT_GE(Cronet_Metrics_received_byte_count_get(metrics), -1);
-
-  // Verify order of events.
-  if (Cronet_Metrics_dns_start_get(metrics) != nullptr) {
-    EXPECT_GE(DateToMillis(Cronet_Metrics_dns_start_get(metrics)),
-              DateToMillis(Cronet_Metrics_request_start_get(metrics)));
-  }
-
-  if (Cronet_Metrics_connect_start_get(metrics) != nullptr &&
-      Cronet_Metrics_dns_end_get(metrics) != nullptr) {
-    EXPECT_GE(DateToMillis(Cronet_Metrics_connect_start_get(metrics)),
-              DateToMillis(Cronet_Metrics_dns_end_get(metrics)));
-  }
-
-  if (Cronet_Metrics_ssl_start_get(metrics) != nullptr &&
-      Cronet_Metrics_connect_start_get(metrics) != nullptr) {
-    EXPECT_GE(DateToMillis(Cronet_Metrics_ssl_start_get(metrics)),
-              DateToMillis(Cronet_Metrics_connect_start_get(metrics)));
-  }
-
-  if (Cronet_Metrics_connect_end_get(metrics) != nullptr &&
-      Cronet_Metrics_ssl_end_get(metrics) != nullptr) {
-    EXPECT_GE(DateToMillis(Cronet_Metrics_connect_end_get(metrics)),
-              DateToMillis(Cronet_Metrics_ssl_end_get(metrics)));
-  }
-
-  if (Cronet_Metrics_sending_start_get(metrics) != nullptr &&
-      Cronet_Metrics_connect_end_get(metrics) != nullptr) {
-    EXPECT_GE(DateToMillis(Cronet_Metrics_sending_start_get(metrics)),
-              DateToMillis(Cronet_Metrics_connect_end_get(metrics)));
-  }
-
-  if (Cronet_Metrics_response_start_get(metrics) != nullptr &&
-      Cronet_Metrics_sending_end_get(metrics) != nullptr) {
-    EXPECT_GE(DateToMillis(Cronet_Metrics_response_start_get(metrics)),
-              DateToMillis(Cronet_Metrics_sending_end_get(metrics)));
-  }
-
-  if (Cronet_Metrics_response_start_get(metrics) != nullptr) {
-    EXPECT_GE(DateToMillis(Cronet_Metrics_request_end_get(metrics)),
-              DateToMillis(Cronet_Metrics_response_start_get(metrics)));
-  }
-}
-
-// Convert a TestUrlRequestCallback::ResponseStep into the equivalent
-// RequestFinishedInfo.FINISHED_REASON.
-Cronet_RequestFinishedInfo_FINISHED_REASON MapFinishedReason(
-    TestUrlRequestCallback::ResponseStep response_step) {
-  switch (response_step) {
-    case TestUrlRequestCallback::ON_SUCCEEDED:
-      return Cronet_RequestFinishedInfo_FINISHED_REASON_SUCCEEDED;
-    case TestUrlRequestCallback::ON_FAILED:
-      return Cronet_RequestFinishedInfo_FINISHED_REASON_FAILED;
-    case TestUrlRequestCallback::ON_CANCELED:
-      return Cronet_RequestFinishedInfo_FINISHED_REASON_CANCELED;
-    default:
-      CHECK(false) << "Unknown TestUrlRequestCallback::ResponseStep: "
-                   << response_step;
-      return Cronet_RequestFinishedInfo_FINISHED_REASON_FAILED;
-  }
-}
-
-// Basic sanity checking of all Cronet_RequestFinishedInfo,
-// Cronet_UrlResponseInfoPtr, and Cronet_ErrorPtr fields passed to
-// RequestFinishedInfoListener.OnRequestFinished().
-//
-// All fields are checked except for |annotations|.
-//
-// |test_request_finished_info_listener| Test listener -- will verify all fields
-//     of this listener.
-// |callback| Callback associated with the UrlRequest associated with
-//     |request_info|.
-void VerifyRequestFinishedInfoListener(
-    TestRequestFinishedInfoListener* test_request_finished_info_listener,
-    const TestUrlRequestCallback& callback) {
-  Cronet_RequestFinishedInfoPtr request_info =
-      test_request_finished_info_listener->request_finished_info();
-  VerifyRequestMetrics(Cronet_RequestFinishedInfo_metrics_get(request_info));
-  auto finished_reason =
-      Cronet_RequestFinishedInfo_finished_reason_get(request_info);
-  EXPECT_EQ(MapFinishedReason(callback.response_step_), finished_reason);
-  EXPECT_EQ(callback.original_response_info_,
-            test_request_finished_info_listener->url_response_info());
-  EXPECT_EQ(callback.last_error_, test_request_finished_info_listener->error());
-}
-
-// Parameterized off whether to use a direct executor, and whether (if so, how)
-// to add a RequestFinishedInfoListener.
-class UrlRequestTest : public ::testing::TestWithParam<
-                           std::tuple<bool, RequestFinishedListenerType>> {
- public:
-  UrlRequestTest(const UrlRequestTest&) = delete;
-  UrlRequestTest& operator=(const UrlRequestTest&) = delete;
-
- protected:
-  UrlRequestTest() {}
-  ~UrlRequestTest() override {}
-
-  void SetUp() override { EXPECT_TRUE(cronet::TestServer::Start()); }
-
-  void TearDown() override { cronet::TestServer::Shutdown(); }
-
-  bool GetDirectExecutorParam() { return std::get<0>(GetParam()); }
-
-  RequestFinishedListenerType GetRequestFinishedListenerTypeParam() {
-    return std::get<1>(GetParam());
-  }
-
-  std::unique_ptr<TestUrlRequestCallback> StartAndWaitForComplete(
-      const std::string& url,
-      std::unique_ptr<TestUrlRequestCallback> test_callback,
-      const std::string& http_method,
-      TestUploadDataProvider* test_upload_data_provider,
-      int remapped_port) {
-    Cronet_EnginePtr engine = cronet::test::CreateTestEngine(remapped_port);
-    Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-    Cronet_UrlRequestParamsPtr request_params =
-        Cronet_UrlRequestParams_Create();
-    Cronet_UrlRequestParams_http_method_set(request_params,
-                                            http_method.c_str());
-    Cronet_UploadDataProviderPtr upload_data_provider = nullptr;
-
-    // Add upload data provider and set content type required for upload.
-    if (test_upload_data_provider != nullptr) {
-      test_upload_data_provider->set_url_request(request);
-      upload_data_provider =
-          test_upload_data_provider->CreateUploadDataProvider();
-      Cronet_UrlRequestParams_upload_data_provider_set(request_params,
-                                                       upload_data_provider);
-      Cronet_UrlRequestParams_upload_data_provider_executor_set(
-          request_params, test_upload_data_provider->executor());
-      Cronet_HttpHeaderPtr header = Cronet_HttpHeader_Create();
-      Cronet_HttpHeader_name_set(header, "Content-Type");
-      Cronet_HttpHeader_value_set(header, "Useless/string");
-      Cronet_UrlRequestParams_request_headers_add(request_params, header);
-      Cronet_HttpHeader_Destroy(header);
-    }
-
-    // Executor provided by the application is owned by |test_callback|.
-    Cronet_ExecutorPtr executor = test_callback->GetExecutor();
-    // Callback provided by the application.
-    Cronet_UrlRequestCallbackPtr callback =
-        test_callback->CreateUrlRequestCallback();
-
-    TestRequestFinishedInfoListener test_request_finished_info_listener;
-    MaybeAddRequestFinishedListener(request_params, engine, executor,
-                                    &test_request_finished_info_listener);
-
-    Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(),
-                                     request_params, callback, executor);
-
-    Cronet_UrlRequest_Start(request);
-    test_callback->WaitForDone();
-    MaybeVerifyRequestFinishedInfo(&test_request_finished_info_listener,
-                                   *test_callback);
-    CleanupRequestFinishedListener(request_params, engine);
-    // Wait for all posted tasks to be executed to ensure there is no unhandled
-    // exception.
-    test_callback->ShutdownExecutor();
-    EXPECT_TRUE(test_callback->IsDone());
-    EXPECT_TRUE(Cronet_UrlRequest_IsDone(request));
-    if (upload_data_provider != nullptr)
-      Cronet_UploadDataProvider_Destroy(upload_data_provider);
-    Cronet_UrlRequestParams_Destroy(request_params);
-    Cronet_UrlRequest_Destroy(request);
-    Cronet_UrlRequestCallback_Destroy(callback);
-    Cronet_Engine_Destroy(engine);
-    return test_callback;
-  }
-
-  std::unique_ptr<TestUrlRequestCallback> StartAndWaitForComplete(
-      const std::string& url,
-      std::unique_ptr<TestUrlRequestCallback> test_callback,
-      const std::string& http_method,
-      TestUploadDataProvider* test_upload_data_provider) {
-    return StartAndWaitForComplete(url, std::move(test_callback), http_method,
-                                   test_upload_data_provider,
-                                   /* remapped_port = */ 0);
-  }
-
-  std::unique_ptr<TestUrlRequestCallback> StartAndWaitForComplete(
-      const std::string& url,
-      std::unique_ptr<TestUrlRequestCallback> test_callback) {
-    return StartAndWaitForComplete(url, std::move(test_callback),
-                                   /* http_method =  */ std::string(),
-                                   /* upload_data_provider =  */ nullptr);
-  }
-
-  std::unique_ptr<TestUrlRequestCallback> StartAndWaitForComplete(
-      const std::string& url) {
-    return StartAndWaitForComplete(
-        url,
-        std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam()));
-  }
-
-  void CheckResponseInfo(
-      const TestUrlRequestCallback::UrlResponseInfo& response_info,
-      const std::string& expected_url,
-      int expected_http_status_code,
-      const std::string& expected_http_status_text) {
-    EXPECT_EQ(expected_url, response_info.url);
-    EXPECT_EQ(expected_url, response_info.url_chain.back());
-    EXPECT_EQ(expected_http_status_code, response_info.http_status_code);
-    EXPECT_EQ(expected_http_status_text, response_info.http_status_text);
-    EXPECT_FALSE(response_info.was_cached);
-  }
-
-  void ExpectResponseInfoEquals(
-      const TestUrlRequestCallback::UrlResponseInfo& expected,
-      const TestUrlRequestCallback::UrlResponseInfo& actual) {
-    EXPECT_EQ(expected.url, actual.url);
-    EXPECT_EQ(expected.url_chain, actual.url_chain);
-    EXPECT_EQ(expected.http_status_code, actual.http_status_code);
-    EXPECT_EQ(expected.http_status_text, actual.http_status_text);
-    EXPECT_EQ(expected.all_headers, actual.all_headers);
-    EXPECT_EQ(expected.was_cached, actual.was_cached);
-    EXPECT_EQ(expected.negotiated_protocol, actual.negotiated_protocol);
-    EXPECT_EQ(expected.proxy_server, actual.proxy_server);
-    EXPECT_EQ(expected.received_byte_count, actual.received_byte_count);
-  }
-
-  // Depending on the test parameterization, adds a RequestFinishedInfoListener
-  // to the Engine or UrlRequest, or does nothing.
-  //
-  // This method should be called before the call to
-  // Cronet_UrlRequest_InitWithParams().
-  void MaybeAddRequestFinishedListener(
-      Cronet_UrlRequestParamsPtr url_request_params,
-      Cronet_EnginePtr engine,
-      Cronet_ExecutorPtr executor,
-      TestRequestFinishedInfoListener* test_request_finished_info_listener) {
-    auto request_finished_listener_type = GetRequestFinishedListenerTypeParam();
-
-    if (request_finished_listener_type ==
-        RequestFinishedListenerType::kNoListener)
-      return;
-
-    request_finished_listener_ =
-        test_request_finished_info_listener->CreateRequestFinishedListener();
-
-    switch (request_finished_listener_type) {
-      case RequestFinishedListenerType::kUrlRequestListener:
-        Cronet_UrlRequestParams_request_finished_listener_set(
-            url_request_params, request_finished_listener_);
-        Cronet_UrlRequestParams_request_finished_executor_set(
-            url_request_params, executor);
-        break;
-      case RequestFinishedListenerType::kEngineListener:
-        Cronet_Engine_AddRequestFinishedListener(
-            engine, request_finished_listener_, executor);
-        break;
-      default:
-        NOTREACHED();
-    }
-  }
-
-  // Cleans up any leftover resources from MaybeAddRequestFinishedListener().
-  //
-  // NOTE: It's only necessary to call this method if
-  // MaybeAddRequestFinishedListener() is called multiple times in a test case
-  // (like in a loop).
-  void CleanupRequestFinishedListener(
-      Cronet_UrlRequestParamsPtr url_request_params,
-      Cronet_EnginePtr engine) {
-    auto request_finished_listener_type = GetRequestFinishedListenerTypeParam();
-    if (request_finished_listener_type ==
-        RequestFinishedListenerType::kEngineListener) {
-      Cronet_Engine_RemoveRequestFinishedListener(engine,
-                                                  request_finished_listener_);
-    }
-    Cronet_UrlRequestParams_request_finished_listener_set(url_request_params,
-                                                          nullptr);
-    Cronet_UrlRequestParams_request_finished_executor_set(url_request_params,
-                                                          nullptr);
-  }
-
-  // TestRequestFinishedInfoListener.WaitForDone() is called and checks are
-  // performed only if a RequestFinishedInfoListener is registered.
-  //
-  // This method should be called after TestUrlRequestCallback.WaitForDone().
-  void MaybeVerifyRequestFinishedInfo(
-      TestRequestFinishedInfoListener* test_request_finished_info_listener,
-      const TestUrlRequestCallback& callback) {
-    if (GetRequestFinishedListenerTypeParam() ==
-        RequestFinishedListenerType::kNoListener)
-      return;
-    test_request_finished_info_listener->WaitForDone();
-    VerifyRequestFinishedInfoListener(test_request_finished_info_listener,
-                                      callback);
-  }
-
-  void TestCancel(TestUrlRequestCallback::FailureType failure_type,
-                  TestUrlRequestCallback::ResponseStep failure_step,
-                  bool expect_response_info,
-                  bool expect_error);
-
- protected:
-  // Provide a task environment for use by TestExecutor instances. Do not
-  // initialize the ThreadPool as this is done by the Cronet_Engine
-  base::test::SingleThreadTaskEnvironment task_environment_;
-
-  // Not owned, |request_finished_listener_| destroys itself when run. This
-  // pointer is only needed to unregister the listener from the Engine in
-  // CleanupRequestFinishedListener() and to allow tests that never run the
-  // |request_finished_listener_| to be able to destroy it.
-  Cronet_RequestFinishedInfoListenerPtr request_finished_listener_ = nullptr;
-};
-
-const bool kDirectExecutorEnabled[]{true, false};
-INSTANTIATE_TEST_SUITE_P(
-    NoRequestFinishedListener,
-    UrlRequestTest,
-    testing::Combine(
-        testing::ValuesIn(kDirectExecutorEnabled),
-        testing::Values(RequestFinishedListenerType::kNoListener)));
-INSTANTIATE_TEST_SUITE_P(
-    RequestFinishedListenerOnUrlRequest,
-    UrlRequestTest,
-    testing::Combine(
-        testing::ValuesIn(kDirectExecutorEnabled),
-        testing::Values(RequestFinishedListenerType::kUrlRequestListener)));
-INSTANTIATE_TEST_SUITE_P(
-    RequestFinishedListenerOnEngine,
-    UrlRequestTest,
-    testing::Combine(
-        testing::ValuesIn(kDirectExecutorEnabled),
-        testing::Values(RequestFinishedListenerType::kEngineListener)));
-
-TEST_P(UrlRequestTest, InitChecks) {
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  // Disable runtime CHECK of the result, so it could be verified.
-  Cronet_EngineParams_enable_check_result_set(engine_params, false);
-  EXPECT_EQ(Cronet_RESULT_SUCCESS,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  Cronet_EngineParams_Destroy(engine_params);
-
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  const std::string url = cronet::TestServer::GetEchoMethodURL();
-
-  TestUrlRequestCallback test_callback(GetDirectExecutorParam());
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-  TestRequestFinishedInfoListener test_request_finished_info_listener;
-  MaybeAddRequestFinishedListener(request_params, engine, executor,
-                                  &test_request_finished_info_listener);
-  EXPECT_EQ(Cronet_RESULT_NULL_POINTER_URL,
-            Cronet_UrlRequest_InitWithParams(
-                request, engine, /* url = */ nullptr,
-                /* request_params = */ nullptr, /* callback = */ nullptr,
-                /* executor = */ nullptr));
-  Cronet_UrlRequest_Destroy(request);
-
-  request = Cronet_UrlRequest_Create();
-  EXPECT_EQ(Cronet_RESULT_NULL_POINTER_PARAMS,
-            Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(),
-                                             /* request_params = */ nullptr,
-                                             /* callback = */ nullptr,
-                                             /* executor = */ nullptr));
-  Cronet_UrlRequest_Destroy(request);
-
-  request = Cronet_UrlRequest_Create();
-  EXPECT_EQ(Cronet_RESULT_NULL_POINTER_CALLBACK,
-            Cronet_UrlRequest_InitWithParams(
-                request, engine, url.c_str(), request_params,
-                /* callback = */ nullptr, /* executor = */ nullptr));
-  Cronet_UrlRequest_Destroy(request);
-
-  request = Cronet_UrlRequest_Create();
-  EXPECT_EQ(Cronet_RESULT_NULL_POINTER_EXECUTOR,
-            Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(),
-                                             request_params, callback,
-                                             /* executor = */ nullptr));
-  Cronet_UrlRequest_Destroy(request);
-
-  request = Cronet_UrlRequest_Create();
-  EXPECT_EQ(Cronet_RESULT_NULL_POINTER_EXECUTOR,
-            Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(),
-                                             request_params, callback,
-                                             /* executor = */ nullptr));
-  Cronet_UrlRequest_Destroy(request);
-
-  request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParams_http_method_set(request_params, "bad:method");
-  EXPECT_EQ(
-      Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_METHOD,
-      Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(),
-                                       request_params, callback, executor));
-  Cronet_UrlRequest_Destroy(request);
-
-  request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParams_http_method_set(request_params, "HEAD");
-  Cronet_UrlRequestParams_priority_set(
-      request_params,
-      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_IDLE);
-  // Check header validation
-  Cronet_HttpHeaderPtr http_header = Cronet_HttpHeader_Create();
-  Cronet_UrlRequestParams_request_headers_add(request_params, http_header);
-  EXPECT_EQ(
-      Cronet_RESULT_NULL_POINTER_HEADER_NAME,
-      Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(),
-                                       request_params, callback, executor));
-  Cronet_UrlRequestParams_request_headers_clear(request_params);
-  Cronet_UrlRequest_Destroy(request);
-
-  request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParams_priority_set(
-      request_params,
-      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOWEST);
-  Cronet_HttpHeader_name_set(http_header, "bad:name");
-  Cronet_UrlRequestParams_request_headers_add(request_params, http_header);
-  EXPECT_EQ(
-      Cronet_RESULT_NULL_POINTER_HEADER_VALUE,
-      Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(),
-                                       request_params, callback, executor));
-  Cronet_UrlRequestParams_request_headers_clear(request_params);
-  Cronet_UrlRequest_Destroy(request);
-
-  request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParams_priority_set(
-      request_params,
-      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOW);
-  Cronet_HttpHeader_value_set(http_header, "header value");
-  Cronet_UrlRequestParams_request_headers_add(request_params, http_header);
-  EXPECT_EQ(
-      Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_HEADER,
-      Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(),
-                                       request_params, callback, executor));
-  Cronet_UrlRequestParams_request_headers_clear(request_params);
-  Cronet_UrlRequest_Destroy(request);
-
-  request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParams_priority_set(
-      request_params,
-      Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_HIGHEST);
-  Cronet_HttpHeader_name_set(http_header, "header-name");
-  Cronet_UrlRequestParams_request_headers_add(request_params, http_header);
-  EXPECT_EQ(Cronet_RESULT_SUCCESS, Cronet_UrlRequest_InitWithParams(
-                                       request, engine, url.c_str(),
-                                       request_params, callback, executor));
-  EXPECT_EQ(
-      Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_INITIALIZED,
-      Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(),
-                                       request_params, callback, executor));
-  Cronet_HttpHeader_Destroy(http_header);
-  Cronet_UrlRequest_Destroy(request);
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-  if (request_finished_listener_ != nullptr) {
-    // This test never actually runs |request_finished_listener_|, so we delete
-    // it here.
-    Cronet_RequestFinishedInfoListener_Destroy(request_finished_listener_);
-  }
-}
-
-TEST_P(UrlRequestTest, SimpleGet) {
-  const std::string url = cronet::TestServer::GetEchoMethodURL();
-  auto callback = StartAndWaitForComplete(url);
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  // Default method is 'GET'.
-  EXPECT_EQ("GET", callback->response_as_string_);
-  EXPECT_EQ(0, callback->redirect_count_);
-  EXPECT_EQ(callback->response_step_, callback->ON_SUCCEEDED);
-  CheckResponseInfo(*callback->response_info_, url, 200, "OK");
-  TestUrlRequestCallback::UrlResponseInfo expected_response_info(
-      std::vector<std::string>({url}), "OK", 200, 86,
-      std::vector<std::string>({"Connection", "close", "Content-Length", "3",
-                                "Content-Type", "text/plain"}));
-  ExpectResponseInfoEquals(expected_response_info, *callback->response_info_);
-}
-
-TEST_P(UrlRequestTest, UploadEmptyBodySync) {
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       /* executor = */ nullptr);
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(0, data_provider.GetUploadedLength());
-  EXPECT_EQ(0, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_EQ("", callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, UploadSync) {
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       /* executor = */ nullptr);
-  data_provider.AddRead("Test");
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(1, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_EQ("Test", callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, SSLCertificateError) {
-  net::EmbeddedTestServer ssl_server(net::EmbeddedTestServer::TYPE_HTTPS);
-  ssl_server.SetSSLConfig(net::EmbeddedTestServer::CERT_EXPIRED);
-  ASSERT_TRUE(ssl_server.Start());
-
-  const std::string url = ssl_server.GetURL("/").spec();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       /* executor = */ nullptr);
-  data_provider.AddRead("Test");
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(0, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(nullptr, callback->response_info_);
-  EXPECT_EQ("", callback->response_as_string_);
-  EXPECT_EQ("net::ERR_CERT_INVALID", callback->last_error_message_);
-}
-
-TEST_P(UrlRequestTest, SSLUpload) {
-  net::EmbeddedTestServer ssl_server(net::EmbeddedTestServer::TYPE_HTTPS);
-  net::test_server::RegisterDefaultHandlers(&ssl_server);
-  ASSERT_TRUE(ssl_server.Start());
-
-  constexpr char kUrl[] = "https://test.example.com/echoall";
-  constexpr char kUploadString[] =
-      "The quick brown fox jumps over the lazy dog.";
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       /* executor = */ nullptr);
-  data_provider.AddRead(kUploadString);
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  callback = StartAndWaitForComplete(kUrl, std::move(callback), std::string(),
-                                     &data_provider, ssl_server.port());
-  data_provider.AssertClosed();
-  EXPECT_NE(nullptr, callback->response_info_);
-  EXPECT_EQ("", callback->last_error_message_);
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_THAT(callback->response_as_string_, HasSubstr(kUploadString));
-}
-
-TEST_P(UrlRequestTest, UploadMultiplePiecesSync) {
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       callback->GetExecutor());
-  data_provider.AddRead("Y");
-  data_provider.AddRead("et ");
-  data_provider.AddRead("another ");
-  data_provider.AddRead("test");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(16, data_provider.GetUploadedLength());
-  EXPECT_EQ(4, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_EQ("Yet another test", callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, UploadMultiplePiecesAsync) {
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  TestUploadDataProvider data_provider(TestUploadDataProvider::ASYNC,
-                                       callback->GetExecutor());
-  data_provider.AddRead("Y");
-  data_provider.AddRead("et ");
-  data_provider.AddRead("another ");
-  data_provider.AddRead("test");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(16, data_provider.GetUploadedLength());
-  EXPECT_EQ(4, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_EQ("Yet another test", callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, UploadChangesDefaultMethod) {
-  const std::string url = cronet::TestServer::GetEchoMethodURL();
-  TestUploadDataProvider upload_data_provider(TestUploadDataProvider::SYNC,
-                                              /* executor = */ nullptr);
-  upload_data_provider.AddRead("Test");
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &upload_data_provider);
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  // Setting upload provider should change method to 'POST'.
-  EXPECT_EQ("POST", callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, UploadWithSetMethod) {
-  const std::string url = cronet::TestServer::GetEchoMethodURL();
-  TestUploadDataProvider upload_data_provider(TestUploadDataProvider::SYNC,
-                                              /* executor = */ nullptr);
-  upload_data_provider.AddRead("Test");
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-
-  callback = StartAndWaitForComplete(url, std::move(callback),
-                                     std::string("PUT"), &upload_data_provider);
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  // Setting upload provider should change method to 'POST'.
-  EXPECT_EQ("PUT", callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, UploadWithBigRead) {
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider upload_data_provider(TestUploadDataProvider::SYNC,
-                                              /* executor = */ nullptr);
-  // Use reads that match exact size of read buffer, which is 16384 bytes.
-  upload_data_provider.AddRead(std::string(16384, 'a'));
-  upload_data_provider.AddRead(std::string(32768 - 16384, 'a'));
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-
-  callback = StartAndWaitForComplete(url, std::move(callback),
-                                     std::string("PUT"), &upload_data_provider);
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  // Confirm that body is uploaded correctly.
-  EXPECT_EQ(std::string(32768, 'a'), callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, UploadWithDirectExecutor) {
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  auto callback = std::make_unique<TestUrlRequestCallback>(true);
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       callback->GetExecutor());
-  data_provider.AddRead("Test");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(1, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_EQ("Test", callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, UploadRedirectSync) {
-  const std::string url = cronet::TestServer::GetRedirectToEchoBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       /* executor = */ nullptr);
-  data_provider.AddRead("Test");
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(2, data_provider.num_read_calls());
-  EXPECT_EQ(1, data_provider.num_rewind_calls());
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_EQ("Test", callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, UploadRedirectAsync) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetRedirectToEchoBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::ASYNC,
-                                       callback->GetExecutor());
-  data_provider.AddRead("Test");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(2, data_provider.num_read_calls());
-  EXPECT_EQ(1, data_provider.num_rewind_calls());
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_EQ("Test", callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, UploadWithBadLength) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       callback->GetExecutor());
-  data_provider.set_bad_length(1ll);
-  data_provider.AddRead("12");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(2, data_provider.GetUploadedLength());
-  EXPECT_EQ(1, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(nullptr, callback->response_info_);
-  EXPECT_NE(nullptr, callback->last_error_);
-  EXPECT_EQ(Cronet_Error_ERROR_CODE_ERROR_CALLBACK, callback->last_error_code_);
-  EXPECT_EQ(0ul, callback->last_error_message_.find(
-                     "Failure from UploadDataProvider"));
-  EXPECT_NE(std::string::npos,
-            callback->last_error_message_.find(
-                "Read upload data length 2 exceeds expected length 1"));
-}
-
-TEST_P(UrlRequestTest, UploadWithBadLengthBufferAligned) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       callback->GetExecutor());
-  data_provider.set_bad_length(8191ll);
-  // Add 8192 bytes to read.
-  for (int i = 0; i < 512; ++i)
-    data_provider.AddRead("0123456789abcdef");
-
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(8192, data_provider.GetUploadedLength());
-  EXPECT_EQ(512, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(nullptr, callback->response_info_);
-  EXPECT_NE(nullptr, callback->last_error_);
-  EXPECT_EQ(Cronet_Error_ERROR_CODE_ERROR_CALLBACK, callback->last_error_code_);
-  EXPECT_EQ(0ul, callback->last_error_message_.find(
-                     "Failure from UploadDataProvider"));
-  EXPECT_NE(std::string::npos,
-            callback->last_error_message_.find(
-                "Read upload data length 8192 exceeds expected length 8191"));
-}
-
-TEST_P(UrlRequestTest, UploadReadFailSync) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       callback->GetExecutor());
-  data_provider.SetReadFailure(0, TestUploadDataProvider::CALLBACK_SYNC);
-  data_provider.AddRead("Test");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(1, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(nullptr, callback->response_info_);
-  EXPECT_NE(nullptr, callback->last_error_);
-  EXPECT_EQ(Cronet_Error_ERROR_CODE_ERROR_CALLBACK, callback->last_error_code_);
-  EXPECT_EQ(0ul, callback->last_error_message_.find(
-                     "Failure from UploadDataProvider"));
-  EXPECT_NE(std::string::npos,
-            callback->last_error_message_.find("Sync read failure"));
-}
-
-TEST_P(UrlRequestTest, UploadReadFailAsync) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       callback->GetExecutor());
-  data_provider.SetReadFailure(0, TestUploadDataProvider::CALLBACK_ASYNC);
-  data_provider.AddRead("Test");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(1, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(nullptr, callback->response_info_);
-  EXPECT_NE(nullptr, callback->last_error_);
-  EXPECT_EQ(Cronet_Error_ERROR_CODE_ERROR_CALLBACK, callback->last_error_code_);
-  EXPECT_EQ(0ul, callback->last_error_message_.find(
-                     "Failure from UploadDataProvider"));
-  EXPECT_NE(std::string::npos,
-            callback->last_error_message_.find("Async read failure"));
-}
-
-TEST_P(UrlRequestTest, UploadRewindFailSync) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetRedirectToEchoBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       callback->GetExecutor());
-  data_provider.SetRewindFailure(TestUploadDataProvider::CALLBACK_SYNC);
-  data_provider.AddRead("Test");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(1, data_provider.num_read_calls());
-  EXPECT_EQ(1, data_provider.num_rewind_calls());
-  EXPECT_NE(nullptr, callback->last_error_);
-  EXPECT_EQ(Cronet_Error_ERROR_CODE_ERROR_CALLBACK, callback->last_error_code_);
-  EXPECT_EQ(0ul, callback->last_error_message_.find(
-                     "Failure from UploadDataProvider"));
-  EXPECT_NE(std::string::npos,
-            callback->last_error_message_.find("Sync rewind failure"));
-}
-
-TEST_P(UrlRequestTest, UploadRewindFailAsync) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetRedirectToEchoBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       callback->GetExecutor());
-  data_provider.SetRewindFailure(TestUploadDataProvider::CALLBACK_ASYNC);
-  data_provider.AddRead("Test");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(1, data_provider.num_read_calls());
-  EXPECT_EQ(1, data_provider.num_rewind_calls());
-  EXPECT_NE(nullptr, callback->last_error_);
-  EXPECT_EQ(Cronet_Error_ERROR_CODE_ERROR_CALLBACK, callback->last_error_code_);
-  EXPECT_EQ(0ul, callback->last_error_message_.find(
-                     "Failure from UploadDataProvider"));
-  EXPECT_NE(std::string::npos,
-            callback->last_error_message_.find("Async rewind failure"));
-}
-
-TEST_P(UrlRequestTest, UploadChunked) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       callback->GetExecutor());
-  data_provider.AddRead("Test Hello");
-  data_provider.set_chunked(true);
-  EXPECT_EQ(-1, data_provider.GetLength());
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(-1, data_provider.GetUploadedLength());
-  EXPECT_EQ(1, data_provider.num_read_calls());
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_EQ("Test Hello", callback->response_as_string_);
-}
-
-TEST_P(UrlRequestTest, UploadChunkedLastReadZeroLengthBody) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       callback->GetExecutor());
-  // Add 3 reads. The last read has a 0-length body.
-  data_provider.AddRead("hello there");
-  data_provider.AddRead("!");
-  data_provider.AddRead("");
-  data_provider.set_chunked(true);
-  EXPECT_EQ(-1, data_provider.GetLength());
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(-1, data_provider.GetUploadedLength());
-  // 2 read call for the first two data chunks, and 1 for final chunk.
-  EXPECT_EQ(3, data_provider.num_read_calls());
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_EQ("hello there!", callback->response_as_string_);
-}
-
-// Test where an upload fails without ever initializing the
-// UploadDataStream, because it can't connect to the server.
-TEST_P(UrlRequestTest, UploadFailsWithoutInitializingStream) {
-  // The port for PTP will always refuse a TCP connection
-  const std::string url = "http://127.0.0.1:319";
-  TestUploadDataProvider data_provider(TestUploadDataProvider::SYNC,
-                                       /* executor = */ nullptr);
-  data_provider.AddRead("Test");
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(0, data_provider.num_read_calls());
-  EXPECT_EQ(0, data_provider.num_rewind_calls());
-  EXPECT_EQ(nullptr, callback->response_info_);
-  EXPECT_EQ("", callback->response_as_string_);
-  EXPECT_TRUE(callback->on_error_called_);
-}
-
-// TODO(https://crbug.com/954372): Flakes in AssertClosed().
-TEST_P(UrlRequestTest, DISABLED_UploadCancelReadSync) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::ASYNC,
-                                       callback->GetExecutor());
-  data_provider.AddRead("One");
-  data_provider.AddRead("Two");
-  data_provider.AddRead("Three");
-  data_provider.SetReadCancel(1, TestUploadDataProvider::CANCEL_SYNC);
-  data_provider.SetReadFailure(1, TestUploadDataProvider::CALLBACK_ASYNC);
-
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-
-  EXPECT_EQ(11, data_provider.GetUploadedLength());
-  EXPECT_EQ(2, data_provider.num_read_calls());
-  EXPECT_TRUE(callback->on_canceled_called_);
-}
-
-TEST_P(UrlRequestTest, UploadCancelReadAsync) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetEchoRequestBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::ASYNC,
-                                       callback->GetExecutor());
-  data_provider.AddRead("One");
-  data_provider.AddRead("Two");
-  data_provider.AddRead("Three");
-  data_provider.SetReadCancel(2, TestUploadDataProvider::CANCEL_ASYNC);
-
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-
-  EXPECT_EQ(11, data_provider.GetUploadedLength());
-  EXPECT_EQ(3, data_provider.num_read_calls());
-  EXPECT_TRUE(callback->on_canceled_called_);
-}
-
-// TODO(https://crbug.com/954372): Flakes in AssertClosed().
-TEST_P(UrlRequestTest, DISABLED_UploadCancelRewindSync) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetRedirectToEchoBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::ASYNC,
-                                       callback->GetExecutor());
-  data_provider.SetRewindCancel(TestUploadDataProvider::CANCEL_SYNC);
-  data_provider.SetRewindFailure(TestUploadDataProvider::CALLBACK_ASYNC);
-  data_provider.AddRead("Test");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(1, data_provider.num_read_calls());
-  EXPECT_EQ(1, data_provider.num_rewind_calls());
-  EXPECT_TRUE(callback->on_canceled_called_);
-}
-
-TEST_P(UrlRequestTest, UploadCancelRewindAsync) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  const std::string url = cronet::TestServer::GetRedirectToEchoBodyURL();
-  TestUploadDataProvider data_provider(TestUploadDataProvider::ASYNC,
-                                       callback->GetExecutor());
-  data_provider.SetRewindCancel(TestUploadDataProvider::CANCEL_ASYNC);
-  data_provider.AddRead("Test");
-  callback = StartAndWaitForComplete(url, std::move(callback), std::string(),
-                                     &data_provider);
-  data_provider.AssertClosed();
-  EXPECT_EQ(4, data_provider.GetUploadedLength());
-  EXPECT_EQ(1, data_provider.num_read_calls());
-  EXPECT_EQ(1, data_provider.num_rewind_calls());
-  EXPECT_TRUE(callback->on_canceled_called_);
-}
-
-TEST_P(UrlRequestTest, SimpleRequest) {
-  Cronet_EnginePtr engine = cronet::test::CreateTestEngine(0);
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  std::string url = cronet::TestServer::GetSimpleURL();
-
-  TestUrlRequestCallback test_callback(GetDirectExecutorParam());
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-  TestRequestFinishedInfoListener test_request_finished_info_listener;
-  MaybeAddRequestFinishedListener(request_params, engine, executor,
-                                  &test_request_finished_info_listener);
-
-  Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(), request_params,
-                                   callback, executor);
-
-  Cronet_UrlRequest_Start(request);
-
-  test_callback.WaitForDone();
-  MaybeVerifyRequestFinishedInfo(&test_request_finished_info_listener,
-                                 test_callback);
-  EXPECT_TRUE(test_callback.IsDone());
-  ASSERT_EQ("The quick brown fox jumps over the lazy dog.",
-            test_callback.response_as_string_);
-
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequest_Destroy(request);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST_P(UrlRequestTest, ReceiveBackAnnotations) {
-  Cronet_EnginePtr engine = cronet::test::CreateTestEngine(0);
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  std::string url = cronet::TestServer::GetSimpleURL();
-
-  TestUrlRequestCallback test_callback(GetDirectExecutorParam());
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-  TestRequestFinishedInfoListener test_request_finished_info_listener;
-  MaybeAddRequestFinishedListener(request_params, engine, executor,
-                                  &test_request_finished_info_listener);
-
-  int object_to_annotate = 0;
-  Cronet_UrlRequestParams_annotations_add(request_params, &object_to_annotate);
-  Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(), request_params,
-                                   callback, executor);
-
-  Cronet_UrlRequest_Start(request);
-
-  test_callback.WaitForDone();
-  MaybeVerifyRequestFinishedInfo(&test_request_finished_info_listener,
-                                 test_callback);
-  EXPECT_TRUE(test_callback.IsDone());
-  if (GetRequestFinishedListenerTypeParam() !=
-      RequestFinishedListenerType::kNoListener) {
-    ASSERT_EQ(1u,
-              Cronet_RequestFinishedInfo_annotations_size(
-                  test_request_finished_info_listener.request_finished_info()));
-    EXPECT_EQ(
-        &object_to_annotate,
-        Cronet_RequestFinishedInfo_annotations_at(
-            test_request_finished_info_listener.request_finished_info(), 0));
-  }
-
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequest_Destroy(request);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST_P(UrlRequestTest, UrlParamsAnnotationsUnchanged) {
-  Cronet_EnginePtr engine = cronet::test::CreateTestEngine(0);
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  std::string url = cronet::TestServer::GetSimpleURL();
-
-  TestUrlRequestCallback test_callback(GetDirectExecutorParam());
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-  TestRequestFinishedInfoListener test_request_finished_info_listener;
-  MaybeAddRequestFinishedListener(request_params, engine, executor,
-                                  &test_request_finished_info_listener);
-
-  int object_to_annotate = 0;
-  Cronet_UrlRequestParams_annotations_add(request_params, &object_to_annotate);
-  Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(), request_params,
-                                   callback, executor);
-  ASSERT_EQ(1u, Cronet_UrlRequestParams_annotations_size(request_params));
-  EXPECT_EQ(&object_to_annotate,
-            Cronet_UrlRequestParams_annotations_at(request_params, 0));
-  EXPECT_EQ(0, object_to_annotate);
-
-  if (request_finished_listener_ != nullptr) {
-    // This test never actually runs |request_finished_listener_|, so we delete
-    // it here.
-    Cronet_RequestFinishedInfoListener_Destroy(request_finished_listener_);
-  }
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequest_Destroy(request);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST_P(UrlRequestTest, MultiRedirect) {
-  const std::string url = cronet::TestServer::GetMultiRedirectURL();
-  auto callback = StartAndWaitForComplete(url);
-  EXPECT_EQ(2, callback->redirect_count_);
-  EXPECT_EQ(200, callback->response_info_->http_status_code);
-  EXPECT_EQ(2ul, callback->redirect_response_info_list_.size());
-  EXPECT_EQ(2ul, callback->redirect_url_list_.size());
-
-  // Check first redirect (multiredirect.html -> redirect.html).
-  TestUrlRequestCallback::UrlResponseInfo first_expected_response_info(
-      std::vector<std::string>({url}), "Found", 302, 76,
-      std::vector<std::string>(
-          {"Location", GURL(cronet::TestServer::GetRedirectURL()).path(),
-           "redirect-header0", "header-value"}));
-  ExpectResponseInfoEquals(first_expected_response_info,
-                           *callback->redirect_response_info_list_.front());
-  EXPECT_EQ(cronet::TestServer::GetRedirectURL(),
-            callback->redirect_url_list_.front());
-
-  // Check second redirect (redirect.html -> success.txt).
-  TestUrlRequestCallback::UrlResponseInfo second_expected_response_info(
-      std::vector<std::string>({cronet::TestServer::GetMultiRedirectURL(),
-                                cronet::TestServer::GetRedirectURL()}),
-      "Found", 302, 149,
-      std::vector<std::string>(
-          {"Location", GURL(cronet::TestServer::GetSuccessURL()).path(),
-           "redirect-header", "header-value"}));
-  ExpectResponseInfoEquals(second_expected_response_info,
-                           *callback->redirect_response_info_list_.back());
-  EXPECT_EQ(cronet::TestServer::GetSuccessURL(),
-            callback->redirect_url_list_.back());
-
-  // Check final response (success.txt).
-  TestUrlRequestCallback::UrlResponseInfo final_expected_response_info(
-      std::vector<std::string>({cronet::TestServer::GetMultiRedirectURL(),
-                                cronet::TestServer::GetRedirectURL(),
-                                cronet::TestServer::GetSuccessURL()}),
-      "OK", 200, 334,
-      std::vector<std::string>(
-          {"Content-Type", "text/plain", "Access-Control-Allow-Origin", "*",
-           "header-name", "header-value", "multi-header-name", "header-value1",
-           "multi-header-name", "header-value2"}));
-  ExpectResponseInfoEquals(final_expected_response_info,
-                           *callback->response_info_);
-  EXPECT_NE(0, callback->response_data_length_);
-  EXPECT_EQ(callback->ON_SUCCEEDED, callback->response_step_);
-}
-
-TEST_P(UrlRequestTest, CancelRequest) {
-  Cronet_EnginePtr engine = cronet::test::CreateTestEngine(0);
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  std::string url = cronet::TestServer::GetSimpleURL();
-
-  TestUrlRequestCallback test_callback(GetDirectExecutorParam());
-  test_callback.set_failure(test_callback.CANCEL_SYNC,
-                            test_callback.ON_RESPONSE_STARTED);
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-  TestRequestFinishedInfoListener test_request_finished_info_listener;
-  MaybeAddRequestFinishedListener(request_params, engine, executor,
-                                  &test_request_finished_info_listener);
-
-  Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(), request_params,
-                                   callback, executor);
-
-  Cronet_UrlRequest_Start(request);
-
-  test_callback.WaitForDone();
-  MaybeVerifyRequestFinishedInfo(&test_request_finished_info_listener,
-                                 test_callback);
-  EXPECT_TRUE(test_callback.IsDone());
-  EXPECT_TRUE(test_callback.on_canceled_called_);
-  ASSERT_FALSE(test_callback.on_error_called_);
-  EXPECT_TRUE(test_callback.response_as_string_.empty());
-
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequest_Destroy(request);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST_P(UrlRequestTest, FailedRequestHostNotFound) {
-  Cronet_EnginePtr engine = cronet::test::CreateTestEngine(0);
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  std::string url = "https://notfound.example.com";
-
-  TestUrlRequestCallback test_callback(GetDirectExecutorParam());
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-  TestRequestFinishedInfoListener test_request_finished_info_listener;
-  MaybeAddRequestFinishedListener(request_params, engine, executor,
-                                  &test_request_finished_info_listener);
-
-  Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(), request_params,
-                                   callback, executor);
-
-  Cronet_UrlRequest_Start(request);
-
-  test_callback.WaitForDone();
-  MaybeVerifyRequestFinishedInfo(&test_request_finished_info_listener,
-                                 test_callback);
-  EXPECT_TRUE(test_callback.IsDone());
-  EXPECT_TRUE(test_callback.on_error_called_);
-  EXPECT_FALSE(test_callback.on_canceled_called_);
-
-  EXPECT_TRUE(test_callback.response_as_string_.empty());
-  EXPECT_EQ(nullptr, test_callback.response_info_);
-  EXPECT_NE(nullptr, test_callback.last_error_);
-
-  EXPECT_EQ(Cronet_Error_ERROR_CODE_ERROR_HOSTNAME_NOT_RESOLVED,
-            Cronet_Error_error_code_get(test_callback.last_error_));
-  EXPECT_FALSE(
-      Cronet_Error_immediately_retryable_get(test_callback.last_error_));
-  EXPECT_STREQ("net::ERR_NAME_NOT_RESOLVED",
-               Cronet_Error_message_get(test_callback.last_error_));
-  EXPECT_EQ(-105,
-            Cronet_Error_internal_error_code_get(test_callback.last_error_));
-  EXPECT_EQ(
-      0, Cronet_Error_quic_detailed_error_code_get(test_callback.last_error_));
-
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequest_Destroy(request);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-}
-
-void UrlRequestTest::TestCancel(
-    TestUrlRequestCallback::FailureType failure_type,
-    TestUrlRequestCallback::ResponseStep failure_step,
-    bool expect_response_info,
-    bool expect_error) {
-  auto callback =
-      std::make_unique<TestUrlRequestCallback>(GetDirectExecutorParam());
-  callback->set_failure(failure_type, failure_step);
-  const std::string url = cronet::TestServer::GetRedirectURL();
-  callback = StartAndWaitForComplete(url, std::move(callback));
-  EXPECT_EQ(1, callback->redirect_count_);
-  EXPECT_EQ(1ul, callback->redirect_response_info_list_.size());
-
-  if (failure_type == TestUrlRequestCallback::CANCEL_SYNC ||
-      failure_type == TestUrlRequestCallback::CANCEL_ASYNC) {
-    EXPECT_EQ(TestUrlRequestCallback::ON_CANCELED, callback->response_step_);
-  }
-
-  EXPECT_EQ(expect_response_info, callback->response_info_ != nullptr);
-  EXPECT_EQ(expect_error, callback->last_error_ != nullptr);
-  EXPECT_EQ(expect_error, callback->on_error_called_);
-
-  // When |failure_type| is CANCEL_ASYNC_WITHOUT_PAUSE and |failure_step|
-  // is ON_READ_COMPLETED, there might be an onSucceeded() task
-  // already posted. If that's the case, onCanceled() will not be invoked. See
-  // crbug.com/657415.
-  if (!(failure_type == TestUrlRequestCallback::CANCEL_ASYNC_WITHOUT_PAUSE &&
-        failure_step == TestUrlRequestCallback::ON_READ_COMPLETED)) {
-    EXPECT_TRUE(callback->on_canceled_called_);
-  }
-}
-
-TEST_P(UrlRequestTest, TestCancel) {
-  TestCancel(TestUrlRequestCallback::CANCEL_SYNC,
-             TestUrlRequestCallback::ON_RECEIVED_REDIRECT, true, false);
-  TestCancel(TestUrlRequestCallback::CANCEL_ASYNC,
-             TestUrlRequestCallback::ON_RECEIVED_REDIRECT, true, false);
-  TestCancel(TestUrlRequestCallback::CANCEL_ASYNC_WITHOUT_PAUSE,
-             TestUrlRequestCallback::ON_RECEIVED_REDIRECT, true, false);
-
-  TestCancel(TestUrlRequestCallback::CANCEL_SYNC,
-             TestUrlRequestCallback::ON_RESPONSE_STARTED, true, false);
-  TestCancel(TestUrlRequestCallback::CANCEL_ASYNC,
-             TestUrlRequestCallback::ON_RESPONSE_STARTED, true, false);
-  // https://crbug.com/812334 - If request is canceled asynchronously, the
-  // 'OnReadCompleted' callback may arrive AFTER 'OnCanceled'.
-  TestCancel(TestUrlRequestCallback::CANCEL_ASYNC_WITHOUT_PAUSE,
-             TestUrlRequestCallback::ON_RESPONSE_STARTED, true, false);
-
-  TestCancel(TestUrlRequestCallback::CANCEL_SYNC,
-             TestUrlRequestCallback::ON_READ_COMPLETED, true, false);
-  TestCancel(TestUrlRequestCallback::CANCEL_ASYNC,
-             TestUrlRequestCallback::ON_READ_COMPLETED, true, false);
-  TestCancel(TestUrlRequestCallback::CANCEL_ASYNC_WITHOUT_PAUSE,
-             TestUrlRequestCallback::ON_READ_COMPLETED, true, false);
-}
-
-TEST_P(UrlRequestTest, PerfTest) {
-  const int kTestIterations = 10;
-  const int kDownloadSize = 19307439;  // used for internal server only
-
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_Engine_StartWithParams(engine, engine_params);
-
-  std::string url = cronet::TestServer::PrepareBigDataURL(kDownloadSize);
-
-  base::Time start = base::Time::Now();
-
-  for (int i = 0; i < kTestIterations; ++i) {
-    Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-    Cronet_UrlRequestParamsPtr request_params =
-        Cronet_UrlRequestParams_Create();
-    TestUrlRequestCallback test_callback(GetDirectExecutorParam());
-    test_callback.set_accumulate_response_data(false);
-    // Executor provided by the application is owned by |test_callback|.
-    Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-    // Callback provided by the application.
-    Cronet_UrlRequestCallbackPtr callback =
-        test_callback.CreateUrlRequestCallback();
-    TestRequestFinishedInfoListener test_request_finished_info_listener;
-    MaybeAddRequestFinishedListener(request_params, engine, executor,
-                                    &test_request_finished_info_listener);
-
-    Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(),
-                                     request_params, callback, executor);
-
-    Cronet_UrlRequest_Start(request);
-    test_callback.WaitForDone();
-    MaybeVerifyRequestFinishedInfo(&test_request_finished_info_listener,
-                                   test_callback);
-
-    EXPECT_TRUE(test_callback.IsDone());
-    ASSERT_EQ(kDownloadSize, test_callback.response_data_length_);
-
-    CleanupRequestFinishedListener(request_params, engine);
-    Cronet_UrlRequestParams_Destroy(request_params);
-    Cronet_UrlRequest_Destroy(request);
-    Cronet_UrlRequestCallback_Destroy(callback);
-  }
-  base::Time end = base::Time::Now();
-  base::TimeDelta delta = end - start;
-
-  LOG(INFO) << "Total time " << delta.InMillisecondsF() << " ms";
-  LOG(INFO) << "Single Iteration time "
-            << delta.InMillisecondsF() / kTestIterations << " ms";
-
-  const double bytes_per_second =
-      kDownloadSize * kTestIterations / delta.InSecondsF();
-  const double megabits_per_second = bytes_per_second / 1'000'000 * 8;
-  LOG(INFO) << "Average Throughput: " << megabits_per_second << " mbps";
-
-  Cronet_EngineParams_Destroy(engine_params);
-  Cronet_Engine_Destroy(engine);
-  cronet::TestServer::ReleaseBigDataURL();
-}
-
-TEST_P(UrlRequestTest, GetStatus) {
-  Cronet_EnginePtr engine = cronet::test::CreateTestEngine(0);
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  std::string url = cronet::TestServer::GetSimpleURL();
-
-  TestUrlRequestCallback test_callback(GetDirectExecutorParam());
-  test_callback.set_auto_advance(false);
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-  TestRequestFinishedInfoListener test_request_finished_info_listener;
-  MaybeAddRequestFinishedListener(request_params, engine, executor,
-                                  &test_request_finished_info_listener);
-
-  Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(), request_params,
-                                   callback, executor);
-  EXPECT_EQ(Cronet_UrlRequestStatusListener_Status_INVALID,
-            GetRequestStatus(request, &test_callback));
-
-  Cronet_UrlRequest_Start(request);
-  EXPECT_LE(Cronet_UrlRequestStatusListener_Status_IDLE,
-            GetRequestStatus(request, &test_callback));
-  EXPECT_GE(Cronet_UrlRequestStatusListener_Status_READING_RESPONSE,
-            GetRequestStatus(request, &test_callback));
-
-  test_callback.WaitForNextStep();
-  EXPECT_EQ(Cronet_UrlRequestStatusListener_Status_WAITING_FOR_DELEGATE,
-            GetRequestStatus(request, &test_callback));
-
-  Cronet_BufferPtr buffer = Cronet_Buffer_Create();
-  Cronet_Buffer_InitWithAlloc(buffer, 100);
-  Cronet_UrlRequest_Read(request, buffer);
-  EXPECT_LE(Cronet_UrlRequestStatusListener_Status_IDLE,
-            GetRequestStatus(request, &test_callback));
-  EXPECT_GE(Cronet_UrlRequestStatusListener_Status_READING_RESPONSE,
-            GetRequestStatus(request, &test_callback));
-
-  test_callback.WaitForNextStep();
-  EXPECT_LE(Cronet_UrlRequestStatusListener_Status_IDLE,
-            GetRequestStatus(request, &test_callback));
-  EXPECT_GE(Cronet_UrlRequestStatusListener_Status_READING_RESPONSE,
-            GetRequestStatus(request, &test_callback));
-
-  do {
-    buffer = Cronet_Buffer_Create();
-    Cronet_Buffer_InitWithAlloc(buffer, 100);
-    Cronet_UrlRequest_Read(request, buffer);
-    // Verify that late calls to GetStatus() don't invoke OnStatus() after
-    // final callbacks.
-    GetRequestStatus(request, &test_callback);
-    test_callback.WaitForNextStep();
-  } while (!Cronet_UrlRequest_IsDone(request));
-  MaybeVerifyRequestFinishedInfo(&test_request_finished_info_listener,
-                                 test_callback);
-
-  EXPECT_EQ(Cronet_UrlRequestStatusListener_Status_INVALID,
-            GetRequestStatus(request, &test_callback));
-  ASSERT_EQ("The quick brown fox jumps over the lazy dog.",
-            test_callback.response_as_string_);
-
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequest_Destroy(request);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-}
-
-class UrlRequestTestNoParam : public ::testing::Test {
-  void SetUp() override { cronet::TestServer::Start(); }
-
-  void TearDown() override { cronet::TestServer::Shutdown(); }
-};
-
-TEST_F(UrlRequestTestNoParam,
-       RequestFinishedListenerWithoutExecutorReturnsError) {
-  Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
-  Cronet_EnginePtr engine = Cronet_Engine_Create();
-  // Disable runtime CHECK of the result, so it could be verified.
-  Cronet_EngineParams_enable_check_result_set(engine_params, false);
-  EXPECT_EQ(Cronet_RESULT_SUCCESS,
-            Cronet_Engine_StartWithParams(engine, engine_params));
-  Cronet_EngineParams_Destroy(engine_params);
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  TestRequestFinishedInfoListener test_request_finished_info_listener;
-  Cronet_RequestFinishedInfoListenerPtr request_finished_listener =
-      test_request_finished_info_listener.CreateRequestFinishedListener();
-  // Executor type doesn't matter for this test.
-  TestUrlRequestCallback test_callback(/*direct_executor=*/true);
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-
-  Cronet_UrlRequestParams_request_finished_listener_set(
-      request_params, request_finished_listener);
-
-  EXPECT_EQ(Cronet_RESULT_NULL_POINTER_REQUEST_FINISHED_INFO_LISTENER_EXECUTOR,
-            Cronet_UrlRequest_InitWithParams(
-                request, engine, "http://fakeurl.example.com", request_params,
-                callback, executor));
-
-  // This test never actually runs |request_finished_listener|, so we delete
-  // it here.
-  Cronet_RequestFinishedInfoListener_Destroy(request_finished_listener);
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequest_Destroy(request);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST_F(UrlRequestTestNoParam,
-       UseRequestFinishedInfoAfterUrlRequestDestructionSuccess) {
-  Cronet_EnginePtr engine = cronet::test::CreateTestEngine(0);
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  std::string url = cronet::TestServer::GetSimpleURL();
-
-  // The UrlRequest executor type doesn't matter, but the
-  // RequestFinishedInfoListener executor type can't be direct.
-  TestUrlRequestCallback test_callback(/* direct_executor= */ false);
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-
-  base::WaitableEvent done_event;
-  struct ListenerContext {
-    raw_ptr<TestUrlRequestCallback> test_callback;
-    Cronet_UrlRequestPtr url_request;
-    raw_ptr<base::WaitableEvent> done_event;
-  };
-  ListenerContext listener_context = {&test_callback, request, &done_event};
-
-  auto* request_finished_listener =
-      Cronet_RequestFinishedInfoListener_CreateWith(
-          +[](Cronet_RequestFinishedInfoListenerPtr self,
-              Cronet_RequestFinishedInfoPtr request_finished_info,
-              Cronet_UrlResponseInfoPtr response_info, Cronet_ErrorPtr error) {
-            auto* listener_context = static_cast<ListenerContext*>(
-                Cronet_RequestFinishedInfoListener_GetClientContext(self));
-            listener_context->test_callback->WaitForDone();
-            Cronet_UrlRequest_Destroy(listener_context->url_request);
-            // The next few get methods shouldn't use-after-free on
-            // |request_finished_info| or |response_info|.
-            EXPECT_NE(nullptr, Cronet_RequestFinishedInfo_metrics_get(
-                                   request_finished_info));
-            EXPECT_NE(nullptr, Cronet_UrlResponseInfo_url_get(response_info));
-            Cronet_RequestFinishedInfoListener_Destroy(self);
-            listener_context->done_event->Signal();
-          });
-  Cronet_RequestFinishedInfoListener_SetClientContext(request_finished_listener,
-                                                      &listener_context);
-
-  Cronet_UrlRequestParams_request_finished_listener_set(
-      request_params, request_finished_listener);
-  Cronet_UrlRequestParams_request_finished_executor_set(request_params,
-                                                        executor);
-  Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(), request_params,
-                                   callback, executor);
-  Cronet_UrlRequest_Start(request);
-
-  done_event.Wait();
-  EXPECT_TRUE(test_callback.IsDone());
-  ASSERT_EQ("The quick brown fox jumps over the lazy dog.",
-            test_callback.response_as_string_);
-
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST_F(UrlRequestTestNoParam,
-       UseRequestFinishedInfoAfterUrlRequestDestructionFailure) {
-  Cronet_EnginePtr engine = cronet::test::CreateTestEngine(0);
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  std::string url = "https://notfound.example.com";
-
-  // The UrlRequest executor type doesn't matter, but the
-  // RequestFinishedInfoListener executor type can't be direct.
-  TestUrlRequestCallback test_callback(/* direct_executor= */ false);
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-
-  base::WaitableEvent done_event;
-  struct ListenerContext {
-    raw_ptr<TestUrlRequestCallback> test_callback;
-    Cronet_UrlRequestPtr url_request;
-    raw_ptr<base::WaitableEvent> done_event;
-  };
-  ListenerContext listener_context = {&test_callback, request, &done_event};
-
-  auto* request_finished_listener =
-      Cronet_RequestFinishedInfoListener_CreateWith(
-          +[](Cronet_RequestFinishedInfoListenerPtr self,
-              Cronet_RequestFinishedInfoPtr request_finished_info,
-              Cronet_UrlResponseInfoPtr response_info, Cronet_ErrorPtr error) {
-            auto* listener_context = static_cast<ListenerContext*>(
-                Cronet_RequestFinishedInfoListener_GetClientContext(self));
-            listener_context->test_callback->WaitForDone();
-            Cronet_UrlRequest_Destroy(listener_context->url_request);
-            // The next few get methods shouldn't use-after-free on
-            // |request_finished_info| or |error|.
-            EXPECT_NE(nullptr, Cronet_RequestFinishedInfo_metrics_get(
-                                   request_finished_info));
-            EXPECT_NE(nullptr, Cronet_Error_message_get(error));
-            Cronet_RequestFinishedInfoListener_Destroy(self);
-            listener_context->done_event->Signal();
-          });
-  Cronet_RequestFinishedInfoListener_SetClientContext(request_finished_listener,
-                                                      &listener_context);
-
-  Cronet_UrlRequestParams_request_finished_listener_set(
-      request_params, request_finished_listener);
-  Cronet_UrlRequestParams_request_finished_executor_set(request_params,
-                                                        executor);
-  Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(), request_params,
-                                   callback, executor);
-  Cronet_UrlRequest_Start(request);
-
-  done_event.Wait();
-  EXPECT_TRUE(test_callback.IsDone());
-
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-}
-
-TEST_F(UrlRequestTestNoParam,
-       CorrelateCallbackAndRequestInfoWithoutSynchronization) {
-  class TestUrlRequestCallbackWithCorrelation : public TestUrlRequestCallback {
-   public:
-    using TestUrlRequestCallback::TestUrlRequestCallback;
-
-    void OnSucceeded(Cronet_UrlRequestPtr request,
-                     Cronet_UrlResponseInfoPtr info) override {
-      // This method is guaranteed to run after
-      // RequestFinishedInfoListener.OnRequestFinished(), **on the same
-      // thread** (due to the use of a direct executor with the
-      // RequestFinishedInfoListener).
-      //
-      // The following read should therefore not need synchronization -- we rely
-      // on running this test under sanitizers to verify this.
-      EXPECT_NE(nullptr,
-                Cronet_RequestFinishedInfo_metrics_get(request_finished_info_));
-      TestUrlRequestCallback::OnSucceeded(request, info);
-    }
-
-    Cronet_RequestFinishedInfoPtr request_finished_info_;
-  };
-
-  Cronet_EnginePtr engine = cronet::test::CreateTestEngine(0);
-  Cronet_UrlRequestPtr request = Cronet_UrlRequest_Create();
-  Cronet_UrlRequestParamsPtr request_params = Cronet_UrlRequestParams_Create();
-  std::string url = cronet::TestServer::GetSimpleURL();
-
-  // The UrlRequest executor type doesn't matter, but the
-  // RequestFinishedInfoListener executor type *must* be direct.
-  TestUrlRequestCallbackWithCorrelation test_callback(
-      /* direct_executor= */ true);
-  // Executor provided by the application is owned by |test_callback|.
-  Cronet_ExecutorPtr executor = test_callback.GetExecutor();
-  // Callback provided by the application.
-  Cronet_UrlRequestCallbackPtr callback =
-      test_callback.CreateUrlRequestCallback();
-
-  auto* request_finished_listener =
-      Cronet_RequestFinishedInfoListener_CreateWith(
-          +[](Cronet_RequestFinishedInfoListenerPtr self,
-              Cronet_RequestFinishedInfoPtr request_finished_info,
-              Cronet_UrlResponseInfoPtr, Cronet_ErrorPtr) {
-            auto* test_callback =
-                static_cast<TestUrlRequestCallbackWithCorrelation*>(
-                    Cronet_RequestFinishedInfoListener_GetClientContext(self));
-            test_callback->request_finished_info_ = request_finished_info;
-            Cronet_RequestFinishedInfoListener_Destroy(self);
-          });
-  Cronet_RequestFinishedInfoListener_SetClientContext(request_finished_listener,
-                                                      &test_callback);
-
-  Cronet_UrlRequestParams_request_finished_listener_set(
-      request_params, request_finished_listener);
-  Cronet_UrlRequestParams_request_finished_executor_set(request_params,
-                                                        executor);
-  Cronet_UrlRequest_InitWithParams(request, engine, url.c_str(), request_params,
-                                   callback, executor);
-  Cronet_UrlRequest_Start(request);
-
-  test_callback.WaitForDone();
-  EXPECT_TRUE(test_callback.IsDone());
-  ASSERT_EQ("The quick brown fox jumps over the lazy dog.",
-            test_callback.response_as_string_);
-
-  Cronet_UrlRequest_Destroy(request);
-  Cronet_UrlRequestParams_Destroy(request_params);
-  Cronet_UrlRequestCallback_Destroy(callback);
-  Cronet_Engine_Destroy(engine);
-}
-
-}  // namespace
diff --git a/components/cronet/native/test_instructions.md b/components/cronet/native/test_instructions.md
deleted file mode 100644
index 56549831b5141..0000000000000
--- a/components/cronet/native/test_instructions.md
+++ /dev/null
@@ -1,45 +0,0 @@
-# Testing Cronet native API on desktop
-
-[TOC]
-
-## Overview
-
-The Cronet native API is cross-platform, usable on multiple desktop and mobile
-platforms.
-
-TODO(caraitto): Add mobile test information for the native API in the
-Android and iOS pages as instructions for testing vary by platform.
-
-## Checkout and build
-
-See instructions in the [common checkout and
-build](/components/cronet/build_instructions.md).
-
-## Running tests locally
-
-To run Cronet native API unit and integration tests:
-
-```shell
-$ gn gen out/Default  # Generate Ninja build files.
-$ ninja -C out/Default cronet_unittests cronet_tests  # Build both test suites.
-$ ./out/Default/cronet_unittests  # Run unit tests.
-$ ./out/Default/cronet_tests  # Run the integration tests.
-```
-
-# Running tests remotely
-
-To test against all tryjobs:
-
-```shell
-$ git cl upload  # Upload to Gerrit.
-$ git cl try  # Run the tryjob, results posted in the Gerrit review.
-```
-
-This will test against several mobile and desktop platforms, along with
-special configurations like ASAN and TSAN.
-
-You can use the -b flag to test against just one of those, like this:
-
-```shell
-$ git cl try -b linux-rel
-```
diff --git a/components/cronet/native/upload_data_sink.cc b/components/cronet/native/upload_data_sink.cc
deleted file mode 100644
index 88a42c669bc19..0000000000000
--- a/components/cronet/native/upload_data_sink.cc
+++ /dev/null
@@ -1,297 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/upload_data_sink.h"
-
-#include <inttypes.h>
-#include <utility>
-
-#include "base/bind.h"
-#include "base/check_op.h"
-#include "base/memory/raw_ptr.h"
-#include "base/strings/strcat.h"
-#include "base/strings/stringprintf.h"
-#include "base/threading/thread_task_runner_handle.h"
-#include "components/cronet/cronet_upload_data_stream.h"
-#include "components/cronet/native/engine.h"
-#include "components/cronet/native/generated/cronet.idl_impl_struct.h"
-#include "components/cronet/native/include/cronet_c.h"
-#include "components/cronet/native/io_buffer_with_cronet_buffer.h"
-#include "components/cronet/native/runnables.h"
-#include "components/cronet/native/url_request.h"
-#include "net/base/io_buffer.h"
-
-namespace cronet {
-
-// This class is called by Cronet's network stack as an implementation of
-// CronetUploadDataStream::Delegate, and forwards the calls along to
-// Cronet_UploadDataSinkImpl on the embedder's executor.
-// This class is always called on the network thread and is destroyed in
-// OnUploadDataStreamDestroyed() callback.
-class Cronet_UploadDataSinkImpl::NetworkTasks
-    : public CronetUploadDataStream::Delegate {
- public:
-  NetworkTasks(Cronet_UploadDataSinkImpl* upload_data_sink,
-               Cronet_Executor* upload_data_provider_executor);
-
-  NetworkTasks(const NetworkTasks&) = delete;
-  NetworkTasks& operator=(const NetworkTasks&) = delete;
-
-  ~NetworkTasks() override;
-
- private:
-  // CronetUploadDataStream::Delegate implementation:
-  void InitializeOnNetworkThread(
-      base::WeakPtr<CronetUploadDataStream> upload_data_stream) override;
-  void Read(scoped_refptr<net::IOBuffer> buffer, int buf_len) override;
-  void Rewind() override;
-  void OnUploadDataStreamDestroyed() override;
-
-  // Post |task| to client executor.
-  void PostTaskToExecutor(base::OnceClosure task);
-
-  // The upload data sink that is owned by url request and always accessed on
-  // the client thread. It always outlives |this| callback.
-  const raw_ptr<Cronet_UploadDataSinkImpl> upload_data_sink_ = nullptr;
-
-  // Executor for provider callback, used, but not owned, by |this|. Always
-  // outlives |this| callback.
-  Cronet_ExecutorPtr const upload_data_provider_executor_ = nullptr;
-
-  THREAD_CHECKER(network_thread_checker_);
-};
-
-Cronet_UploadDataSinkImpl::NetworkTasks::NetworkTasks(
-    Cronet_UploadDataSinkImpl* upload_data_sink,
-    Cronet_Executor* upload_data_provider_executor)
-    : upload_data_sink_(upload_data_sink),
-      upload_data_provider_executor_(upload_data_provider_executor) {
-  DETACH_FROM_THREAD(network_thread_checker_);
-}
-
-Cronet_UploadDataSinkImpl::NetworkTasks::~NetworkTasks() = default;
-
-Cronet_UploadDataSinkImpl::Cronet_UploadDataSinkImpl(
-    Cronet_UrlRequestImpl* url_request,
-    Cronet_UploadDataProvider* upload_data_provider,
-    Cronet_Executor* upload_data_provider_executor)
-    : url_request_(url_request),
-      upload_data_provider_executor_(upload_data_provider_executor),
-      upload_data_provider_(upload_data_provider) {}
-
-Cronet_UploadDataSinkImpl::~Cronet_UploadDataSinkImpl() = default;
-
-void Cronet_UploadDataSinkImpl::InitRequest(CronetURLRequest* request) {
-  int64_t length = upload_data_provider_->GetLength();
-  if (length == -1) {
-    is_chunked_ = true;
-  } else {
-    CHECK_GE(length, 0);
-    length_ = static_cast<uint64_t>(length);
-    remaining_length_ = length_;
-  }
-
-  request->SetUpload(std::make_unique<CronetUploadDataStream>(
-      new NetworkTasks(this, upload_data_provider_executor_), length));
-}
-
-void Cronet_UploadDataSinkImpl::OnReadSucceeded(uint64_t bytes_read,
-                                                bool final_chunk) {
-  {
-    base::AutoLock lock(lock_);
-    CheckState(READ);
-    in_which_user_callback_ = NOT_IN_CALLBACK;
-    if (!upload_data_provider_)
-      return;
-  }
-  if (url_request_->IsDone())
-    return;
-  if (close_when_not_in_callback_) {
-    PostCloseToExecutor();
-    return;
-  }
-  CHECK(bytes_read > 0 || (final_chunk && bytes_read == 0));
-  // Bytes read exceeds buffer length.
-  CHECK_LE(static_cast<size_t>(bytes_read), buffer_->io_buffer_len());
-  if (!is_chunked_) {
-    // Only chunked upload can have the final chunk.
-    CHECK(!final_chunk);
-    // Read upload data length exceeds specified length.
-    if (bytes_read > remaining_length_) {
-      PostCloseToExecutor();
-      std::string error_message =
-          base::StringPrintf("Read upload data length %" PRIu64
-                             " exceeds expected length %" PRIu64,
-                             length_ - remaining_length_ + bytes_read, length_);
-      url_request_->OnUploadDataProviderError(error_message.c_str());
-      return;
-    }
-    remaining_length_ -= bytes_read;
-  }
-  network_task_runner_->PostTask(
-      FROM_HERE, base::BindOnce(&CronetUploadDataStream::OnReadSuccess,
-                                upload_data_stream_, bytes_read, final_chunk));
-}
-
-void Cronet_UploadDataSinkImpl::OnReadError(Cronet_String error_message) {
-  {
-    base::AutoLock lock(lock_);
-    CheckState(READ);
-    in_which_user_callback_ = NOT_IN_CALLBACK;
-    if (!upload_data_provider_)
-      return;
-  }
-  if (url_request_->IsDone())
-    return;
-  PostCloseToExecutor();
-  url_request_->OnUploadDataProviderError(error_message);
-}
-
-void Cronet_UploadDataSinkImpl::OnRewindSucceeded() {
-  {
-    base::AutoLock lock(lock_);
-    CheckState(REWIND);
-    in_which_user_callback_ = NOT_IN_CALLBACK;
-    if (!upload_data_provider_)
-      return;
-  }
-  remaining_length_ = length_;
-  if (url_request_->IsDone())
-    return;
-  if (close_when_not_in_callback_) {
-    PostCloseToExecutor();
-    return;
-  }
-  network_task_runner_->PostTask(
-      FROM_HERE, base::BindOnce(&CronetUploadDataStream::OnRewindSuccess,
-                                upload_data_stream_));
-}
-
-void Cronet_UploadDataSinkImpl::OnRewindError(Cronet_String error_message) {
-  {
-    base::AutoLock lock(lock_);
-    CheckState(REWIND);
-    in_which_user_callback_ = NOT_IN_CALLBACK;
-    if (!upload_data_provider_)
-      return;
-  }
-  if (url_request_->IsDone())
-    return;
-  PostCloseToExecutor();
-  url_request_->OnUploadDataProviderError(error_message);
-}
-
-void Cronet_UploadDataSinkImpl::InitializeUploadDataStream(
-    base::WeakPtr<CronetUploadDataStream> upload_data_stream,
-    scoped_refptr<base::SingleThreadTaskRunner> network_task_runner) {
-  DCHECK(!upload_data_stream_);
-  DCHECK(!network_task_runner_.get());
-  upload_data_stream_ = upload_data_stream;
-  network_task_runner_ = network_task_runner;
-}
-
-void Cronet_UploadDataSinkImpl::PostCloseToExecutor() {
-  Cronet_RunnablePtr runnable = new cronet::OnceClosureRunnable(base::BindOnce(
-      &Cronet_UploadDataSinkImpl::Close, base::Unretained(this)));
-  // |runnable| is passed to executor, which destroys it after execution.
-  Cronet_Executor_Execute(upload_data_provider_executor_, runnable);
-}
-
-void Cronet_UploadDataSinkImpl::Read(scoped_refptr<net::IOBuffer> buffer,
-                                     int buf_len) {
-  if (url_request_->IsDone())
-    return;
-  Cronet_UploadDataProviderPtr upload_data_provider = nullptr;
-  {
-    base::AutoLock lock(lock_);
-    if (!upload_data_provider_)
-      return;
-    CheckState(NOT_IN_CALLBACK);
-    in_which_user_callback_ = READ;
-    upload_data_provider = upload_data_provider_;
-  }
-  buffer_ =
-      std::make_unique<Cronet_BufferWithIOBuffer>(std::move(buffer), buf_len);
-  Cronet_UploadDataProvider_Read(upload_data_provider, this,
-                                 buffer_->cronet_buffer());
-}
-
-void Cronet_UploadDataSinkImpl::Rewind() {
-  if (url_request_->IsDone())
-    return;
-  Cronet_UploadDataProviderPtr upload_data_provider = nullptr;
-  {
-    base::AutoLock lock(lock_);
-    if (!upload_data_provider_)
-      return;
-    CheckState(NOT_IN_CALLBACK);
-    in_which_user_callback_ = REWIND;
-    upload_data_provider = upload_data_provider_;
-  }
-  Cronet_UploadDataProvider_Rewind(upload_data_provider, this);
-}
-
-void Cronet_UploadDataSinkImpl::Close() {
-  Cronet_UploadDataProviderPtr upload_data_provider = nullptr;
-  {
-    base::AutoLock lock(lock_);
-    // If |upload_data_provider_| is already closed from OnResponseStarted(),
-    // don't close it again from OnError() or OnCanceled().
-    if (!upload_data_provider_)
-      return;
-    if (in_which_user_callback_ != NOT_IN_CALLBACK) {
-      // If currently in the callback, then wait until return from callback
-      // before closing.
-      close_when_not_in_callback_ = true;
-      return;
-    }
-    upload_data_provider = upload_data_provider_;
-    upload_data_provider_ = nullptr;
-  }
-  Cronet_UploadDataProvider_Close(upload_data_provider);
-}
-
-void Cronet_UploadDataSinkImpl::CheckState(UserCallback expected_state) {
-  lock_.AssertAcquired();
-  CHECK(in_which_user_callback_ == expected_state);
-}
-
-void Cronet_UploadDataSinkImpl::NetworkTasks::InitializeOnNetworkThread(
-    base::WeakPtr<CronetUploadDataStream> upload_data_stream) {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  PostTaskToExecutor(
-      base::BindOnce(&Cronet_UploadDataSinkImpl::InitializeUploadDataStream,
-                     base::Unretained(upload_data_sink_), upload_data_stream,
-                     base::ThreadTaskRunnerHandle::Get()));
-}
-
-void Cronet_UploadDataSinkImpl::NetworkTasks::Read(
-    scoped_refptr<net::IOBuffer> buffer,
-    int buf_len) {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  PostTaskToExecutor(base::BindOnce(&Cronet_UploadDataSinkImpl::Read,
-                                    base::Unretained(upload_data_sink_),
-                                    std::move(buffer), buf_len));
-}
-
-void Cronet_UploadDataSinkImpl::NetworkTasks::Rewind() {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  PostTaskToExecutor(base::BindOnce(&Cronet_UploadDataSinkImpl::Rewind,
-                                    base::Unretained(upload_data_sink_)));
-}
-
-void Cronet_UploadDataSinkImpl::NetworkTasks::OnUploadDataStreamDestroyed() {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  delete this;
-}
-
-void Cronet_UploadDataSinkImpl::NetworkTasks::PostTaskToExecutor(
-    base::OnceClosure task) {
-  Cronet_RunnablePtr runnable =
-      new cronet::OnceClosureRunnable(std::move(task));
-  // |runnable| is passed to executor, which destroys it after execution.
-  Cronet_Executor_Execute(upload_data_provider_executor_, runnable);
-}
-
-}  // namespace cronet
diff --git a/components/cronet/native/upload_data_sink.h b/components/cronet/native/upload_data_sink.h
deleted file mode 100644
index e9b6ae080e23d..0000000000000
--- a/components/cronet/native/upload_data_sink.h
+++ /dev/null
@@ -1,96 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_UPLOAD_DATA_SINK_H_
-#define COMPONENTS_CRONET_NATIVE_UPLOAD_DATA_SINK_H_
-
-#include <memory>
-
-#include "base/memory/raw_ptr.h"
-#include "base/synchronization/lock.h"
-#include "base/synchronization/waitable_event.h"
-#include "components/cronet/cronet_context.h"
-#include "components/cronet/cronet_upload_data_stream.h"
-#include "components/cronet/cronet_url_request.h"
-#include "components/cronet/native/generated/cronet.idl_impl_interface.h"
-
-namespace cronet {
-
-class Cronet_UrlRequestImpl;
-class Cronet_BufferWithIOBuffer;
-
-// Implementation of Cronet_UploadDataSink that uses CronetUploadDataStream.
-// Always accessed on client executor.
-class Cronet_UploadDataSinkImpl : public Cronet_UploadDataSink {
- public:
-  Cronet_UploadDataSinkImpl(Cronet_UrlRequestImpl* url_request,
-                            Cronet_UploadDataProvider* upload_data_provider,
-                            Cronet_Executor* upload_data_provider_executor);
-
-  Cronet_UploadDataSinkImpl(const Cronet_UploadDataSinkImpl&) = delete;
-  Cronet_UploadDataSinkImpl& operator=(const Cronet_UploadDataSinkImpl&) =
-      delete;
-
-  ~Cronet_UploadDataSinkImpl() override;
-
-  // Initialize length and attach upload to request. Called on client thread.
-  void InitRequest(CronetURLRequest* request);
-
-  // Mark stream as closed and post |Close()| callback to consumer.
-  void PostCloseToExecutor();
-
- private:
-  class NetworkTasks;
-  enum UserCallback { READ, REWIND, GET_LENGTH, NOT_IN_CALLBACK };
-
-  // Cronet_UploadDataSink
-  void OnReadSucceeded(uint64_t bytes_read, bool final_chunk) override;
-  void OnReadError(Cronet_String error_message) override;
-  void OnRewindSucceeded() override;
-  void OnRewindError(Cronet_String error_message) override;
-
-  // CronetUploadDataStream::Delegate methods posted from the network thread.
-  void InitializeUploadDataStream(
-      base::WeakPtr<CronetUploadDataStream> upload_data_stream,
-      scoped_refptr<base::SingleThreadTaskRunner> network_task_runner);
-  void Read(scoped_refptr<net::IOBuffer> buffer, int buf_len);
-  void Rewind();
-  void Close();
-
-  void CheckState(UserCallback expected_state);
-
-  // Cronet objects not owned by |this| and accessed on client thread.
-
-  // The request, which owns |this|.
-  const raw_ptr<Cronet_UrlRequestImpl> url_request_ = nullptr;
-  // Executor for provider callback, used, but not owned, by |this|. Always
-  // outlives |this| callback.
-  Cronet_ExecutorPtr const upload_data_provider_executor_ = nullptr;
-
-  // These are initialized in InitializeUploadDataStream(), so are safe to
-  // access during client callbacks, which all happen after initialization.
-  scoped_refptr<base::SingleThreadTaskRunner> network_task_runner_;
-  base::WeakPtr<CronetUploadDataStream> upload_data_stream_;
-
-  bool is_chunked_ = false;
-  uint64_t length_ = 0;
-  uint64_t remaining_length_ = 0;
-
-  // Synchronize access to |buffer_| and other objects below from different
-  // threads.
-  base::Lock lock_;
-  // Data provider callback interface, used, but not owned, by |this|.
-  // Set to nullptr when data provider is closed.
-  Cronet_UploadDataProviderPtr upload_data_provider_ = nullptr;
-
-  UserCallback in_which_user_callback_ = NOT_IN_CALLBACK;
-  // Close data provider once it returns from the callback.
-  bool close_when_not_in_callback_ = false;
-  // Keeps the net::IOBuffer and Cronet ByteBuffer alive until the next Read().
-  std::unique_ptr<Cronet_BufferWithIOBuffer> buffer_;
-};
-
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_NATIVE_UPLOAD_DATA_SINK_H_
diff --git a/components/cronet/native/url_request.cc b/components/cronet/native/url_request.cc
deleted file mode 100644
index a0a7129a3ce98..0000000000000
--- a/components/cronet/native/url_request.cc
+++ /dev/null
@@ -1,887 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "components/cronet/native/url_request.h"
-
-#include <utility>
-#include <vector>
-
-#include "base/bind.h"
-#include "base/logging.h"
-#include "base/memory/raw_ptr.h"
-#include "base/memory/ref_counted.h"
-#include "base/memory/scoped_refptr.h"
-#include "components/cronet/cronet_upload_data_stream.h"
-#include "components/cronet/native/engine.h"
-#include "components/cronet/native/generated/cronet.idl_impl_struct.h"
-#include "components/cronet/native/include/cronet_c.h"
-#include "components/cronet/native/io_buffer_with_cronet_buffer.h"
-#include "components/cronet/native/native_metrics_util.h"
-#include "components/cronet/native/runnables.h"
-#include "components/cronet/native/upload_data_sink.h"
-#include "net/base/io_buffer.h"
-#include "net/base/load_states.h"
-#include "third_party/abseil-cpp/absl/types/optional.h"
-
-namespace {
-
-using RequestFinishedInfo = base::RefCountedData<Cronet_RequestFinishedInfo>;
-using UrlResponseInfo = base::RefCountedData<Cronet_UrlResponseInfo>;
-using CronetError = base::RefCountedData<Cronet_Error>;
-
-template <typename T>
-T* GetData(scoped_refptr<base::RefCountedData<T>> ptr) {
-  return ptr == nullptr ? nullptr : &ptr->data;
-}
-
-net::RequestPriority ConvertRequestPriority(
-    Cronet_UrlRequestParams_REQUEST_PRIORITY priority) {
-  switch (priority) {
-    case Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_IDLE:
-      return net::IDLE;
-    case Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOWEST:
-      return net::LOWEST;
-    case Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_LOW:
-      return net::LOW;
-    case Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_MEDIUM:
-      return net::MEDIUM;
-    case Cronet_UrlRequestParams_REQUEST_PRIORITY_REQUEST_PRIORITY_HIGHEST:
-      return net::HIGHEST;
-  }
-  return net::DEFAULT_PRIORITY;
-}
-
-net::Idempotency ConvertIdempotency(
-    Cronet_UrlRequestParams_IDEMPOTENCY idempotency) {
-  switch (idempotency) {
-    case Cronet_UrlRequestParams_IDEMPOTENCY_DEFAULT_IDEMPOTENCY:
-      return net::DEFAULT_IDEMPOTENCY;
-    case Cronet_UrlRequestParams_IDEMPOTENCY_IDEMPOTENT:
-      return net::IDEMPOTENT;
-    case Cronet_UrlRequestParams_IDEMPOTENCY_NOT_IDEMPOTENT:
-      return net::NOT_IDEMPOTENT;
-  }
-  return net::DEFAULT_IDEMPOTENCY;
-}
-
-scoped_refptr<UrlResponseInfo> CreateCronet_UrlResponseInfo(
-    const std::vector<std::string>& url_chain,
-    int http_status_code,
-    const std::string& http_status_text,
-    const net::HttpResponseHeaders* headers,
-    bool was_cached,
-    const std::string& negotiated_protocol,
-    const std::string& proxy_server,
-    int64_t received_byte_count) {
-  auto response_info = base::MakeRefCounted<UrlResponseInfo>();
-  response_info->data.url = url_chain.back();
-  response_info->data.url_chain = url_chain;
-  response_info->data.http_status_code = http_status_code;
-  response_info->data.http_status_text = http_status_text;
-  // |headers| could be nullptr.
-  if (headers != nullptr) {
-    size_t iter = 0;
-    std::string header_name;
-    std::string header_value;
-    while (headers->EnumerateHeaderLines(&iter, &header_name, &header_value)) {
-      Cronet_HttpHeader header;
-      header.name = header_name;
-      header.value = header_value;
-      response_info->data.all_headers_list.push_back(std::move(header));
-    }
-  }
-  response_info->data.was_cached = was_cached;
-  response_info->data.negotiated_protocol = negotiated_protocol;
-  response_info->data.proxy_server = proxy_server;
-  response_info->data.received_byte_count = received_byte_count;
-  return response_info;
-}
-
-Cronet_Error_ERROR_CODE NetErrorToCronetErrorCode(int net_error) {
-  switch (net_error) {
-    case net::ERR_NAME_NOT_RESOLVED:
-      return Cronet_Error_ERROR_CODE_ERROR_HOSTNAME_NOT_RESOLVED;
-    case net::ERR_INTERNET_DISCONNECTED:
-      return Cronet_Error_ERROR_CODE_ERROR_INTERNET_DISCONNECTED;
-    case net::ERR_NETWORK_CHANGED:
-      return Cronet_Error_ERROR_CODE_ERROR_NETWORK_CHANGED;
-    case net::ERR_TIMED_OUT:
-      return Cronet_Error_ERROR_CODE_ERROR_TIMED_OUT;
-    case net::ERR_CONNECTION_CLOSED:
-      return Cronet_Error_ERROR_CODE_ERROR_CONNECTION_CLOSED;
-    case net::ERR_CONNECTION_TIMED_OUT:
-      return Cronet_Error_ERROR_CODE_ERROR_CONNECTION_TIMED_OUT;
-    case net::ERR_CONNECTION_REFUSED:
-      return Cronet_Error_ERROR_CODE_ERROR_CONNECTION_REFUSED;
-    case net::ERR_CONNECTION_RESET:
-      return Cronet_Error_ERROR_CODE_ERROR_CONNECTION_RESET;
-    case net::ERR_ADDRESS_UNREACHABLE:
-      return Cronet_Error_ERROR_CODE_ERROR_ADDRESS_UNREACHABLE;
-    case net::ERR_QUIC_PROTOCOL_ERROR:
-      return Cronet_Error_ERROR_CODE_ERROR_QUIC_PROTOCOL_FAILED;
-    default:
-      return Cronet_Error_ERROR_CODE_ERROR_OTHER;
-  }
-}
-
-bool IsCronetErrorImmediatelyRetryable(Cronet_Error_ERROR_CODE error_code) {
-  switch (error_code) {
-    case Cronet_Error_ERROR_CODE_ERROR_HOSTNAME_NOT_RESOLVED:
-    case Cronet_Error_ERROR_CODE_ERROR_INTERNET_DISCONNECTED:
-    case Cronet_Error_ERROR_CODE_ERROR_CONNECTION_REFUSED:
-    case Cronet_Error_ERROR_CODE_ERROR_ADDRESS_UNREACHABLE:
-    case Cronet_Error_ERROR_CODE_ERROR_OTHER:
-    default:
-      return false;
-    case Cronet_Error_ERROR_CODE_ERROR_NETWORK_CHANGED:
-    case Cronet_Error_ERROR_CODE_ERROR_TIMED_OUT:
-    case Cronet_Error_ERROR_CODE_ERROR_CONNECTION_CLOSED:
-    case Cronet_Error_ERROR_CODE_ERROR_CONNECTION_TIMED_OUT:
-    case Cronet_Error_ERROR_CODE_ERROR_CONNECTION_RESET:
-      return true;
-  }
-}
-
-scoped_refptr<CronetError> CreateCronet_Error(int net_error,
-                                              int quic_error,
-                                              const std::string& error_string) {
-  auto error = base::MakeRefCounted<CronetError>();
-  error->data.error_code = NetErrorToCronetErrorCode(net_error);
-  error->data.message = error_string;
-  error->data.internal_error_code = net_error;
-  error->data.quic_detailed_error_code = quic_error;
-  error->data.immediately_retryable =
-      IsCronetErrorImmediatelyRetryable(error->data.error_code);
-  return error;
-}
-
-#if DCHECK_IS_ON()
-// Runnable used to verify that Executor calls Cronet_Runnable_Destroy().
-class VerifyDestructionRunnable : public Cronet_Runnable {
- public:
-  VerifyDestructionRunnable(base::WaitableEvent* destroyed)
-      : destroyed_(destroyed) {}
-
-  VerifyDestructionRunnable(const VerifyDestructionRunnable&) = delete;
-  VerifyDestructionRunnable& operator=(const VerifyDestructionRunnable&) =
-      delete;
-
-  // Signal event indicating Runnable was properly Destroyed.
-  ~VerifyDestructionRunnable() override { destroyed_->Signal(); }
-
-  void Run() override {}
-
- private:
-  // Event indicating destructor is called.
-  const raw_ptr<base::WaitableEvent> destroyed_;
-};
-#endif  // DCHECK_IS_ON()
-
-// Convert net::LoadState to Cronet_UrlRequestStatusListener_Status.
-Cronet_UrlRequestStatusListener_Status ConvertLoadState(
-    net::LoadState load_state) {
-  switch (load_state) {
-    case net::LOAD_STATE_IDLE:
-      return Cronet_UrlRequestStatusListener_Status_IDLE;
-
-    case net::LOAD_STATE_WAITING_FOR_STALLED_SOCKET_POOL:
-      return Cronet_UrlRequestStatusListener_Status_WAITING_FOR_STALLED_SOCKET_POOL;
-
-    case net::LOAD_STATE_WAITING_FOR_AVAILABLE_SOCKET:
-      return Cronet_UrlRequestStatusListener_Status_WAITING_FOR_AVAILABLE_SOCKET;
-
-    case net::LOAD_STATE_WAITING_FOR_DELEGATE:
-      return Cronet_UrlRequestStatusListener_Status_WAITING_FOR_DELEGATE;
-
-    case net::LOAD_STATE_WAITING_FOR_CACHE:
-      return Cronet_UrlRequestStatusListener_Status_WAITING_FOR_CACHE;
-
-    case net::LOAD_STATE_DOWNLOADING_PAC_FILE:
-      return Cronet_UrlRequestStatusListener_Status_DOWNLOADING_PAC_FILE;
-
-    case net::LOAD_STATE_RESOLVING_PROXY_FOR_URL:
-      return Cronet_UrlRequestStatusListener_Status_RESOLVING_PROXY_FOR_URL;
-
-    case net::LOAD_STATE_RESOLVING_HOST_IN_PAC_FILE:
-      return Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST_IN_PAC_FILE;
-
-    case net::LOAD_STATE_ESTABLISHING_PROXY_TUNNEL:
-      return Cronet_UrlRequestStatusListener_Status_ESTABLISHING_PROXY_TUNNEL;
-
-    case net::LOAD_STATE_RESOLVING_HOST:
-      return Cronet_UrlRequestStatusListener_Status_RESOLVING_HOST;
-
-    case net::LOAD_STATE_CONNECTING:
-      return Cronet_UrlRequestStatusListener_Status_CONNECTING;
-
-    case net::LOAD_STATE_SSL_HANDSHAKE:
-      return Cronet_UrlRequestStatusListener_Status_SSL_HANDSHAKE;
-
-    case net::LOAD_STATE_SENDING_REQUEST:
-      return Cronet_UrlRequestStatusListener_Status_SENDING_REQUEST;
-
-    case net::LOAD_STATE_WAITING_FOR_RESPONSE:
-      return Cronet_UrlRequestStatusListener_Status_WAITING_FOR_RESPONSE;
-
-    case net::LOAD_STATE_READING_RESPONSE:
-      return Cronet_UrlRequestStatusListener_Status_READING_RESPONSE;
-
-    default:
-      // A load state is retrieved but there is no corresponding
-      // request status. This most likely means that the mapping is
-      // incorrect.
-      CHECK(false);
-      return Cronet_UrlRequestStatusListener_Status_INVALID;
-  }
-}
-
-}  // namespace
-
-namespace cronet {
-
-// NetworkTasks is owned by CronetURLRequest. It is constructed on client
-// thread, but invoked and deleted on the network thread.
-class Cronet_UrlRequestImpl::NetworkTasks : public CronetURLRequest::Callback {
- public:
-  NetworkTasks(const std::string& url, Cronet_UrlRequestImpl* url_request);
-
-  NetworkTasks(const NetworkTasks&) = delete;
-  NetworkTasks& operator=(const NetworkTasks&) = delete;
-
-  ~NetworkTasks() override = default;
-
-  // Callback function used for GetStatus().
-  void OnStatus(Cronet_UrlRequestStatusListenerPtr listener,
-                net::LoadState load_state);
-
- private:
-  // CronetURLRequest::Callback implementation:
-  void OnReceivedRedirect(const std::string& new_location,
-                          int http_status_code,
-                          const std::string& http_status_text,
-                          const net::HttpResponseHeaders* headers,
-                          bool was_cached,
-                          const std::string& negotiated_protocol,
-                          const std::string& proxy_server,
-                          int64_t received_byte_count) override;
-  void OnResponseStarted(int http_status_code,
-                         const std::string& http_status_text,
-                         const net::HttpResponseHeaders* headers,
-                         bool was_cached,
-                         const std::string& negotiated_protocol,
-                         const std::string& proxy_server,
-                         int64_t received_byte_count) override;
-  void OnReadCompleted(scoped_refptr<net::IOBuffer> buffer,
-                       int bytes_read,
-                       int64_t received_byte_count) override;
-  void OnSucceeded(int64_t received_byte_count) override;
-  void OnError(int net_error,
-               int quic_error,
-               const std::string& error_string,
-               int64_t received_byte_count) override;
-  void OnCanceled() override;
-  void OnDestroyed() override;
-  void OnMetricsCollected(const base::Time& request_start_time,
-                          const base::TimeTicks& request_start,
-                          const base::TimeTicks& dns_start,
-                          const base::TimeTicks& dns_end,
-                          const base::TimeTicks& connect_start,
-                          const base::TimeTicks& connect_end,
-                          const base::TimeTicks& ssl_start,
-                          const base::TimeTicks& ssl_end,
-                          const base::TimeTicks& send_start,
-                          const base::TimeTicks& send_end,
-                          const base::TimeTicks& push_start,
-                          const base::TimeTicks& push_end,
-                          const base::TimeTicks& receive_headers_end,
-                          const base::TimeTicks& request_end,
-                          bool socket_reused,
-                          int64_t sent_bytes_count,
-                          int64_t received_bytes_count,
-                          bool quic_connection_migration_attempted,
-                          bool quic_connection_migration_successful)
-      LOCKS_EXCLUDED(url_request_->lock_) override;
-
-  // The UrlRequest which owns context that owns the callback.
-  const raw_ptr<Cronet_UrlRequestImpl> url_request_ = nullptr;
-
-  // URL chain contains the URL currently being requested, and
-  // all URLs previously requested. New URLs are added before
-  // Cronet_UrlRequestCallback::OnRedirectReceived is called.
-  std::vector<std::string> url_chain_;
-
-  // Set to true when OnCanceled/OnSucceeded/OnFailed is posted.
-  // When true it is unsafe to attempt to post other callbacks
-  // like OnStatus because the request may be destroyed.
-  bool final_callback_posted_ = false;
-
-  // All methods except constructor are invoked on the network thread.
-  THREAD_CHECKER(network_thread_checker_);
-};
-
-Cronet_UrlRequestImpl::Cronet_UrlRequestImpl() = default;
-
-Cronet_UrlRequestImpl::~Cronet_UrlRequestImpl() {
-  base::AutoLock lock(lock_);
-  // Only request that has never started is allowed to exist at this point.
-  // The app must wait for OnSucceeded / OnFailed / OnCanceled  callback before
-  // destroying |this|.
-  if (request_) {
-    CHECK(!started_);
-    DestroyRequestUnlessDoneLocked(
-        Cronet_RequestFinishedInfo_FINISHED_REASON_SUCCEEDED);
-  }
-}
-
-Cronet_RESULT Cronet_UrlRequestImpl::InitWithParams(
-    Cronet_EnginePtr engine,
-    Cronet_String url,
-    Cronet_UrlRequestParamsPtr params,
-    Cronet_UrlRequestCallbackPtr callback,
-    Cronet_ExecutorPtr executor) {
-  CHECK(engine);
-  engine_ = reinterpret_cast<Cronet_EngineImpl*>(engine);
-  if (!url || std::string(url).empty())
-    return engine_->CheckResult(Cronet_RESULT_NULL_POINTER_URL);
-  if (!params)
-    return engine_->CheckResult(Cronet_RESULT_NULL_POINTER_PARAMS);
-  if (!callback)
-    return engine_->CheckResult(Cronet_RESULT_NULL_POINTER_CALLBACK);
-  if (!executor)
-    return engine_->CheckResult(Cronet_RESULT_NULL_POINTER_EXECUTOR);
-
-  VLOG(1) << "New Cronet_UrlRequest: " << url;
-
-  base::AutoLock lock(lock_);
-  if (request_) {
-    return engine_->CheckResult(
-        Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_INITIALIZED);
-  }
-
-  callback_ = callback;
-  executor_ = executor;
-
-  if (params->request_finished_listener != nullptr &&
-      params->request_finished_executor == nullptr) {
-    return engine_->CheckResult(
-        Cronet_RESULT_NULL_POINTER_REQUEST_FINISHED_INFO_LISTENER_EXECUTOR);
-  }
-
-  request_finished_listener_ = params->request_finished_listener;
-  request_finished_executor_ = params->request_finished_executor;
-  // Copy, don't move -- this function isn't allowed to change |params|.
-  annotations_ = params->annotations;
-
-  auto network_tasks = std::make_unique<NetworkTasks>(url, this);
-  network_tasks_ = network_tasks.get();
-
-  request_ = new CronetURLRequest(
-      engine_->cronet_url_request_context(), std::move(network_tasks),
-      GURL(url), ConvertRequestPriority(params->priority),
-      params->disable_cache, true /* params->disableConnectionMigration */,
-      // TODO(pauljensen): Consider exposing TrafficStats API via C++ API.
-      false /* traffic_stats_tag_set */, 0 /* traffic_stats_tag */,
-      false /* traffic_stats_uid_set */, 0 /* traffic_stats_uid */,
-      ConvertIdempotency(params->idempotency));
-
-  if (params->upload_data_provider) {
-    upload_data_sink_ = std::make_unique<Cronet_UploadDataSinkImpl>(
-        this, params->upload_data_provider,
-        params->upload_data_provider_executor
-            ? params->upload_data_provider_executor
-            : executor);
-    upload_data_sink_->InitRequest(request_);
-    request_->SetHttpMethod("POST");
-  }
-
-  if (!params->http_method.empty() &&
-      !request_->SetHttpMethod(params->http_method)) {
-    return engine_->CheckResult(
-        Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_METHOD);
-  }
-
-  for (const auto& request_header : params->request_headers) {
-    if (request_header.name.empty())
-      return engine_->CheckResult(Cronet_RESULT_NULL_POINTER_HEADER_NAME);
-    if (request_header.value.empty())
-      return engine_->CheckResult(Cronet_RESULT_NULL_POINTER_HEADER_VALUE);
-    if (!request_->AddRequestHeader(request_header.name,
-                                    request_header.value)) {
-      return engine_->CheckResult(
-          Cronet_RESULT_ILLEGAL_ARGUMENT_INVALID_HTTP_HEADER);
-    }
-  }
-  return engine_->CheckResult(Cronet_RESULT_SUCCESS);
-}
-
-Cronet_RESULT Cronet_UrlRequestImpl::Start() {
-  base::AutoLock lock(lock_);
-  if (started_) {
-    return engine_->CheckResult(
-        Cronet_RESULT_ILLEGAL_STATE_REQUEST_ALREADY_STARTED);
-  }
-  if (!request_) {
-    return engine_->CheckResult(
-        Cronet_RESULT_ILLEGAL_STATE_REQUEST_NOT_INITIALIZED);
-  }
-#if DCHECK_IS_ON()
-  Cronet_Executor_Execute(executor_,
-                          new VerifyDestructionRunnable(&runnable_destroyed_));
-#endif  // DCHECK_IS_ON()
-  request_->Start();
-  started_ = true;
-  return engine_->CheckResult(Cronet_RESULT_SUCCESS);
-}
-
-Cronet_RESULT Cronet_UrlRequestImpl::FollowRedirect() {
-  base::AutoLock lock(lock_);
-  if (!waiting_on_redirect_) {
-    return engine_->CheckResult(
-        Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_REDIRECT);
-  }
-  waiting_on_redirect_ = false;
-  if (!IsDoneLocked())
-    request_->FollowDeferredRedirect();
-  return engine_->CheckResult(Cronet_RESULT_SUCCESS);
-}
-
-Cronet_RESULT Cronet_UrlRequestImpl::Read(Cronet_BufferPtr buffer) {
-  base::AutoLock lock(lock_);
-  if (!waiting_on_read_)
-    return engine_->CheckResult(Cronet_RESULT_ILLEGAL_STATE_UNEXPECTED_READ);
-  waiting_on_read_ = false;
-  if (IsDoneLocked()) {
-    Cronet_Buffer_Destroy(buffer);
-    return engine_->CheckResult(Cronet_RESULT_SUCCESS);
-  }
-  // Create IOBuffer that will own |buffer| while it is used by |request_|.
-  net::IOBuffer* io_buffer = new IOBufferWithCronet_Buffer(buffer);
-  if (request_->ReadData(io_buffer, Cronet_Buffer_GetSize(buffer)))
-    return engine_->CheckResult(Cronet_RESULT_SUCCESS);
-  return engine_->CheckResult(Cronet_RESULT_ILLEGAL_STATE_READ_FAILED);
-}
-
-void Cronet_UrlRequestImpl::Cancel() {
-  base::AutoLock lock(lock_);
-  if (started_) {
-    // If request has posted callbacks to client executor, then it is possible
-    // that |request_| will be destroyed before callback is executed. The
-    // callback runnable uses IsDone() to avoid calling client callback in this
-    // case.
-    DestroyRequestUnlessDoneLocked(
-        Cronet_RequestFinishedInfo_FINISHED_REASON_CANCELED);
-  }
-}
-
-bool Cronet_UrlRequestImpl::IsDone() {
-  base::AutoLock lock(lock_);
-  return IsDoneLocked();
-}
-
-bool Cronet_UrlRequestImpl::IsDoneLocked() const {
-  lock_.AssertAcquired();
-  return started_ && request_ == nullptr;
-}
-
-bool Cronet_UrlRequestImpl::DestroyRequestUnlessDone(
-    Cronet_RequestFinishedInfo_FINISHED_REASON finished_reason) {
-  base::AutoLock lock(lock_);
-  return DestroyRequestUnlessDoneLocked(finished_reason);
-}
-
-bool Cronet_UrlRequestImpl::DestroyRequestUnlessDoneLocked(
-    Cronet_RequestFinishedInfo_FINISHED_REASON finished_reason) {
-  lock_.AssertAcquired();
-  if (request_ == nullptr)
-    return true;
-  DCHECK(error_ == nullptr ||
-         finished_reason == Cronet_RequestFinishedInfo_FINISHED_REASON_FAILED);
-  request_->Destroy(finished_reason ==
-                    Cronet_RequestFinishedInfo_FINISHED_REASON_CANCELED);
-  // Request can no longer be used as CronetURLRequest::Destroy() will
-  // eventually delete |request_| from the network thread, so setting |request_|
-  // to nullptr doesn't introduce a memory leak.
-  request_ = nullptr;
-  return false;
-}
-
-void Cronet_UrlRequestImpl::GetStatus(
-    Cronet_UrlRequestStatusListenerPtr listener) {
-  {
-    base::AutoLock lock(lock_);
-    if (started_ && request_) {
-      status_listeners_.insert(listener);
-      request_->GetStatus(
-          base::BindOnce(&Cronet_UrlRequestImpl::NetworkTasks::OnStatus,
-                         base::Unretained(network_tasks_), listener));
-      return;
-    }
-  }
-  PostTaskToExecutor(
-      base::BindOnce(Cronet_UrlRequestStatusListener_OnStatus, listener,
-                     Cronet_UrlRequestStatusListener_Status_INVALID));
-}
-
-void Cronet_UrlRequestImpl::PostCallbackOnFailedToExecutor() {
-  PostTaskToExecutor(base::BindOnce(
-      &Cronet_UrlRequestImpl::InvokeCallbackOnFailed, base::Unretained(this)));
-}
-
-void Cronet_UrlRequestImpl::OnUploadDataProviderError(
-    const std::string& error_message) {
-  base::AutoLock lock(lock_);
-  // If |error_| is not nullptr, that means that another network error is
-  // already reported.
-  if (error_)
-    return;
-  error_ = CreateCronet_Error(
-      0, 0, "Failure from UploadDataProvider: " + error_message);
-  error_->data.error_code = Cronet_Error_ERROR_CODE_ERROR_CALLBACK;
-
-  request_->MaybeReportMetricsAndRunCallback(
-      base::BindOnce(&Cronet_UrlRequestImpl::PostCallbackOnFailedToExecutor,
-                     base::Unretained(this)));
-}
-
-void Cronet_UrlRequestImpl::PostTaskToExecutor(base::OnceClosure task) {
-  Cronet_RunnablePtr runnable =
-      new cronet::OnceClosureRunnable(std::move(task));
-  // |runnable| is passed to executor, which destroys it after execution.
-  Cronet_Executor_Execute(executor_, runnable);
-}
-
-void Cronet_UrlRequestImpl::InvokeCallbackOnRedirectReceived(
-    const std::string& new_location) {
-  if (IsDone())
-    return;
-  Cronet_UrlRequestCallback_OnRedirectReceived(
-      callback_, this, GetData(response_info_), new_location.c_str());
-}
-
-void Cronet_UrlRequestImpl::InvokeCallbackOnResponseStarted() {
-  if (IsDone())
-    return;
-#if DCHECK_IS_ON()
-  // Verify that Executor calls Cronet_Runnable_Destroy().
-  if (!runnable_destroyed_.TimedWait(base::Seconds(5))) {
-    LOG(ERROR) << "Cronet Executor didn't call Cronet_Runnable_Destroy() in "
-                  "5s; still waiting.";
-    runnable_destroyed_.Wait();
-  }
-#endif  // DCHECK_IS_ON()
-  Cronet_UrlRequestCallback_OnResponseStarted(callback_, this,
-                                              GetData(response_info_));
-}
-
-void Cronet_UrlRequestImpl::InvokeCallbackOnReadCompleted(
-    std::unique_ptr<Cronet_Buffer> cronet_buffer,
-    int bytes_read) {
-  if (IsDone())
-    return;
-  Cronet_UrlRequestCallback_OnReadCompleted(
-      callback_, this, GetData(response_info_), cronet_buffer.release(),
-      bytes_read);
-}
-
-void Cronet_UrlRequestImpl::InvokeCallbackOnSucceeded() {
-  if (DestroyRequestUnlessDone(
-          Cronet_RequestFinishedInfo_FINISHED_REASON_SUCCEEDED)) {
-    return;
-  }
-  InvokeAllStatusListeners();
-  MaybeReportMetrics(Cronet_RequestFinishedInfo_FINISHED_REASON_SUCCEEDED);
-  Cronet_UrlRequestCallback_OnSucceeded(callback_, this,
-                                        GetData(response_info_));
-  // |this| may have been deleted here.
-}
-
-void Cronet_UrlRequestImpl::InvokeCallbackOnFailed() {
-  if (DestroyRequestUnlessDone(
-          Cronet_RequestFinishedInfo_FINISHED_REASON_FAILED)) {
-    return;
-  }
-  InvokeAllStatusListeners();
-  MaybeReportMetrics(Cronet_RequestFinishedInfo_FINISHED_REASON_FAILED);
-  Cronet_UrlRequestCallback_OnFailed(callback_, this, GetData(response_info_),
-                                     GetData(error_));
-  // |this| may have been deleted here.
-}
-
-void Cronet_UrlRequestImpl::InvokeCallbackOnCanceled() {
-  InvokeAllStatusListeners();
-  MaybeReportMetrics(Cronet_RequestFinishedInfo_FINISHED_REASON_CANCELED);
-  Cronet_UrlRequestCallback_OnCanceled(callback_, this,
-                                       GetData(response_info_));
-  // |this| may have been deleted here.
-}
-
-void Cronet_UrlRequestImpl::InvokeAllStatusListeners() {
-  std::unordered_multiset<Cronet_UrlRequestStatusListenerPtr> status_listeners;
-  {
-    base::AutoLock lock(lock_);
-    // Verify the request has already been destroyed, which ensures no more
-    // status listeners can be added.
-    DCHECK(!request_);
-    status_listeners.swap(status_listeners_);
-  }
-  for (Cronet_UrlRequestStatusListener* status_listener : status_listeners) {
-    Cronet_UrlRequestStatusListener_OnStatus(
-        status_listener, Cronet_UrlRequestStatusListener_Status_INVALID);
-  }
-#if DCHECK_IS_ON()
-  // Verify no status listeners added during OnStatus() callbacks.
-  base::AutoLock lock(lock_);
-  DCHECK(status_listeners_.empty());
-#endif  // DCHECK_IS_ON()
-}
-
-void Cronet_UrlRequestImpl::MaybeReportMetrics(
-    Cronet_RequestFinishedInfo_FINISHED_REASON finished_reason) {
-  if (request_finished_info_ == nullptr)
-    return;
-  request_finished_info_->data.annotations = std::move(annotations_);
-  request_finished_info_->data.finished_reason = finished_reason;
-
-  engine_->ReportRequestFinished(request_finished_info_, response_info_,
-                                 error_);
-  if (request_finished_listener_ != nullptr) {
-    DCHECK(request_finished_executor_ != nullptr);
-    // Execute() owns and deletes the runnable.
-    request_finished_executor_->Execute(
-        new cronet::OnceClosureRunnable(base::BindOnce(
-            [](Cronet_RequestFinishedInfoListenerPtr request_finished_listener,
-               scoped_refptr<RequestFinishedInfo> request_finished_info,
-               scoped_refptr<UrlResponseInfo> response_info,
-               scoped_refptr<CronetError> error) {
-              request_finished_listener->OnRequestFinished(
-                  GetData(request_finished_info), GetData(response_info),
-                  GetData(error));
-            },
-            request_finished_listener_, request_finished_info_, response_info_,
-            error_)));
-  }
-}
-
-Cronet_UrlRequestImpl::NetworkTasks::NetworkTasks(
-    const std::string& url,
-    Cronet_UrlRequestImpl* url_request)
-    : url_request_(url_request), url_chain_({url}) {
-  DETACH_FROM_THREAD(network_thread_checker_);
-  DCHECK(url_request);
-}
-
-void Cronet_UrlRequestImpl::NetworkTasks::OnReceivedRedirect(
-    const std::string& new_location,
-    int http_status_code,
-    const std::string& http_status_text,
-    const net::HttpResponseHeaders* headers,
-    bool was_cached,
-    const std::string& negotiated_protocol,
-    const std::string& proxy_server,
-    int64_t received_byte_count) {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  {
-    base::AutoLock lock(url_request_->lock_);
-    url_request_->waiting_on_redirect_ = true;
-    url_request_->response_info_ = CreateCronet_UrlResponseInfo(
-        url_chain_, http_status_code, http_status_text, headers, was_cached,
-        negotiated_protocol, proxy_server, received_byte_count);
-  }
-
-  // Have to do this after creating responseInfo.
-  url_chain_.push_back(new_location);
-
-  // Invoke Cronet_UrlRequestCallback_OnRedirectReceived on client executor.
-  url_request_->PostTaskToExecutor(
-      base::BindOnce(&Cronet_UrlRequestImpl::InvokeCallbackOnRedirectReceived,
-                     base::Unretained(url_request_), new_location));
-}
-
-void Cronet_UrlRequestImpl::NetworkTasks::OnResponseStarted(
-    int http_status_code,
-    const std::string& http_status_text,
-    const net::HttpResponseHeaders* headers,
-    bool was_cached,
-    const std::string& negotiated_protocol,
-    const std::string& proxy_server,
-    int64_t received_byte_count) {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  {
-    base::AutoLock lock(url_request_->lock_);
-    url_request_->waiting_on_read_ = true;
-    url_request_->response_info_ = CreateCronet_UrlResponseInfo(
-        url_chain_, http_status_code, http_status_text, headers, was_cached,
-        negotiated_protocol, proxy_server, received_byte_count);
-  }
-
-  if (url_request_->upload_data_sink_)
-    url_request_->upload_data_sink_->PostCloseToExecutor();
-
-  // Invoke Cronet_UrlRequestCallback_OnResponseStarted on client executor.
-  url_request_->PostTaskToExecutor(
-      base::BindOnce(&Cronet_UrlRequestImpl::InvokeCallbackOnResponseStarted,
-                     base::Unretained(url_request_)));
-}
-
-void Cronet_UrlRequestImpl::NetworkTasks::OnReadCompleted(
-    scoped_refptr<net::IOBuffer> buffer,
-    int bytes_read,
-    int64_t received_byte_count) {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  IOBufferWithCronet_Buffer* io_buffer =
-      reinterpret_cast<IOBufferWithCronet_Buffer*>(buffer.get());
-  std::unique_ptr<Cronet_Buffer> cronet_buffer(io_buffer->Release());
-  {
-    base::AutoLock lock(url_request_->lock_);
-    url_request_->waiting_on_read_ = true;
-    url_request_->response_info_->data.received_byte_count =
-        received_byte_count;
-  }
-
-  // Invoke Cronet_UrlRequestCallback_OnReadCompleted on client executor.
-  url_request_->PostTaskToExecutor(base::BindOnce(
-      &Cronet_UrlRequestImpl::InvokeCallbackOnReadCompleted,
-      base::Unretained(url_request_), std::move(cronet_buffer), bytes_read));
-}
-
-void Cronet_UrlRequestImpl::NetworkTasks::OnSucceeded(
-    int64_t received_byte_count) {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  {
-    base::AutoLock lock(url_request_->lock_);
-    url_request_->response_info_->data.received_byte_count =
-        received_byte_count;
-  }
-
-  // Invoke Cronet_UrlRequestCallback_OnSucceeded on client executor.
-  url_request_->PostTaskToExecutor(
-      base::BindOnce(&Cronet_UrlRequestImpl::InvokeCallbackOnSucceeded,
-                     base::Unretained(url_request_)));
-  final_callback_posted_ = true;
-}
-
-void Cronet_UrlRequestImpl::NetworkTasks::OnError(
-    int net_error,
-    int quic_error,
-    const std::string& error_string,
-    int64_t received_byte_count) {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  {
-    base::AutoLock lock(url_request_->lock_);
-    if (url_request_->response_info_)
-      url_request_->response_info_->data.received_byte_count =
-          received_byte_count;
-    url_request_->error_ =
-        CreateCronet_Error(net_error, quic_error, error_string);
-  }
-
-  if (url_request_->upload_data_sink_)
-    url_request_->upload_data_sink_->PostCloseToExecutor();
-
-  // Invoke Cronet_UrlRequestCallback_OnFailed on client executor.
-  url_request_->PostTaskToExecutor(
-      base::BindOnce(&Cronet_UrlRequestImpl::InvokeCallbackOnFailed,
-                     base::Unretained(url_request_)));
-  final_callback_posted_ = true;
-}
-
-void Cronet_UrlRequestImpl::NetworkTasks::OnCanceled() {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  if (url_request_->upload_data_sink_)
-    url_request_->upload_data_sink_->PostCloseToExecutor();
-
-  // Invoke Cronet_UrlRequestCallback_OnCanceled on client executor.
-  url_request_->PostTaskToExecutor(
-      base::BindOnce(&Cronet_UrlRequestImpl::InvokeCallbackOnCanceled,
-                     base::Unretained(url_request_)));
-  final_callback_posted_ = true;
-}
-
-void Cronet_UrlRequestImpl::NetworkTasks::OnDestroyed() {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  DCHECK(url_request_);
-}
-
-void Cronet_UrlRequestImpl::NetworkTasks::OnMetricsCollected(
-    const base::Time& request_start_time,
-    const base::TimeTicks& request_start,
-    const base::TimeTicks& dns_start,
-    const base::TimeTicks& dns_end,
-    const base::TimeTicks& connect_start,
-    const base::TimeTicks& connect_end,
-    const base::TimeTicks& ssl_start,
-    const base::TimeTicks& ssl_end,
-    const base::TimeTicks& send_start,
-    const base::TimeTicks& send_end,
-    const base::TimeTicks& push_start,
-    const base::TimeTicks& push_end,
-    const base::TimeTicks& receive_headers_end,
-    const base::TimeTicks& request_end,
-    bool socket_reused,
-    int64_t sent_bytes_count,
-    int64_t received_bytes_count,
-    bool,  // quic_connection_migration_attempted
-    bool   // quic_connection_migration_successful
-) {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  base::AutoLock lock(url_request_->lock_);
-  DCHECK_EQ(url_request_->request_finished_info_, nullptr)
-      << "Metrics collection should only happen once.";
-  url_request_->request_finished_info_ =
-      base::MakeRefCounted<RequestFinishedInfo>();
-  auto& metrics = url_request_->request_finished_info_->data.metrics;
-  metrics.emplace();
-  using native_metrics_util::ConvertTime;
-  ConvertTime(request_start, request_start, request_start_time,
-              &metrics->request_start);
-  ConvertTime(dns_start, request_start, request_start_time,
-              &metrics->dns_start);
-  ConvertTime(dns_end, request_start, request_start_time, &metrics->dns_end);
-  ConvertTime(connect_start, request_start, request_start_time,
-              &metrics->connect_start);
-  ConvertTime(connect_end, request_start, request_start_time,
-              &metrics->connect_end);
-  ConvertTime(ssl_start, request_start, request_start_time,
-              &metrics->ssl_start);
-  ConvertTime(ssl_end, request_start, request_start_time, &metrics->ssl_end);
-  ConvertTime(send_start, request_start, request_start_time,
-              &metrics->sending_start);
-  ConvertTime(send_end, request_start, request_start_time,
-              &metrics->sending_end);
-  ConvertTime(push_start, request_start, request_start_time,
-              &metrics->push_start);
-  ConvertTime(push_end, request_start, request_start_time, &metrics->push_end);
-  ConvertTime(receive_headers_end, request_start, request_start_time,
-              &metrics->response_start);
-  ConvertTime(request_end, request_start, request_start_time,
-              &metrics->request_end);
-  metrics->socket_reused = socket_reused;
-  metrics->sent_byte_count = sent_bytes_count;
-  metrics->received_byte_count = received_bytes_count;
-}
-
-void Cronet_UrlRequestImpl::NetworkTasks::OnStatus(
-    Cronet_UrlRequestStatusListenerPtr listener,
-    net::LoadState load_state) {
-  DCHECK_CALLED_ON_VALID_THREAD(network_thread_checker_);
-  if (final_callback_posted_)
-    return;
-  {
-    base::AutoLock lock(url_request_->lock_);
-    auto element = url_request_->status_listeners_.find(listener);
-    CHECK(element != url_request_->status_listeners_.end());
-    url_request_->status_listeners_.erase(element);
-  }
-
-  // Invoke Cronet_UrlRequestCallback_OnCanceled on client executor.
-  url_request_->PostTaskToExecutor(
-      base::BindOnce(&Cronet_UrlRequestStatusListener_OnStatus, listener,
-                     ConvertLoadState(load_state)));
-}
-
-}  // namespace cronet
-
-CRONET_EXPORT Cronet_UrlRequestPtr Cronet_UrlRequest_Create() {
-  return new cronet::Cronet_UrlRequestImpl();
-}
diff --git a/components/cronet/native/url_request.h b/components/cronet/native/url_request.h
deleted file mode 100644
index a2c52fea8631e..0000000000000
--- a/components/cronet/native/url_request.h
+++ /dev/null
@@ -1,209 +0,0 @@
-// Copyright 2018 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#ifndef COMPONENTS_CRONET_NATIVE_URL_REQUEST_H_
-#define COMPONENTS_CRONET_NATIVE_URL_REQUEST_H_
-
-#include <memory>
-#include <string>
-#include <unordered_set>
-
-#include "base/memory/raw_ptr.h"
-#include "base/synchronization/lock.h"
-#include "base/synchronization/waitable_event.h"
-#include "base/thread_annotations.h"
-#include "components/cronet/cronet_context.h"
-#include "components/cronet/cronet_url_request.h"
-#include "components/cronet/native/generated/cronet.idl_impl_interface.h"
-
-namespace net {
-enum LoadState;
-}  // namespace net
-
-namespace cronet {
-
-class Cronet_EngineImpl;
-class Cronet_UploadDataSinkImpl;
-
-// Implementation of Cronet_UrlRequest that uses CronetContext.
-class Cronet_UrlRequestImpl : public Cronet_UrlRequest {
- public:
-  Cronet_UrlRequestImpl();
-
-  Cronet_UrlRequestImpl(const Cronet_UrlRequestImpl&) = delete;
-  Cronet_UrlRequestImpl& operator=(const Cronet_UrlRequestImpl&) = delete;
-
-  ~Cronet_UrlRequestImpl() override;
-
-  // Cronet_UrlRequest
-  Cronet_RESULT InitWithParams(Cronet_EnginePtr engine,
-                               Cronet_String url,
-                               Cronet_UrlRequestParamsPtr params,
-                               Cronet_UrlRequestCallbackPtr callback,
-                               Cronet_ExecutorPtr executor) override;
-  Cronet_RESULT Start() override;
-  Cronet_RESULT FollowRedirect() override;
-  Cronet_RESULT Read(Cronet_BufferPtr buffer) override;
-  void Cancel() override;
-  bool IsDone() override;
-  void GetStatus(Cronet_UrlRequestStatusListenerPtr listener) override;
-
-  // Upload data provider has reported error while reading or rewinding
-  // so request must fail.
-  void OnUploadDataProviderError(const std::string& error_message);
-
- private:
-  class NetworkTasks;
-
-  // Return |true| if request has started and is now done.
-  // Must be called under |lock_| held.
-  bool IsDoneLocked() const SHARED_LOCKS_REQUIRED(lock_);
-
-  // Helper method to set final status of CronetUrlRequest and clean up the
-  // native request adapter. Returns true if request is already done, false
-  // request is not done and is destroyed.
-  bool DestroyRequestUnlessDone(
-      Cronet_RequestFinishedInfo_FINISHED_REASON finished_reason);
-
-  // Helper method to set final status of CronetUrlRequest and clean up the
-  // native request adapter. Returns true if request is already done, false
-  // request is not done and is destroyed. Must be called under |lock_| held.
-  bool DestroyRequestUnlessDoneLocked(
-      Cronet_RequestFinishedInfo_FINISHED_REASON finished_reason)
-      EXCLUSIVE_LOCKS_REQUIRED(lock_);
-
-  // Helper method to post |task| to the |executor_|.
-  void PostTaskToExecutor(base::OnceClosure task);
-
-  // Helper methods to invoke application |callback_|.
-  void InvokeCallbackOnRedirectReceived(const std::string& new_location);
-  void InvokeCallbackOnResponseStarted();
-  void InvokeCallbackOnReadCompleted(
-      std::unique_ptr<Cronet_Buffer> cronet_buffer,
-      int bytes_read);
-  void InvokeCallbackOnSucceeded();
-  void InvokeCallbackOnFailed();
-  void InvokeCallbackOnCanceled();
-
-  // Runs InvokeCallbackOnFailed() on the client executor.
-  void PostCallbackOnFailedToExecutor();
-
-  // Invoke all members of |status_listeners_|. Should be called prior to
-  // invoking a final callback. Once a final callback has been called, |this|
-  // and |executor_| may be deleted and so the callbacks cannot be issued.
-  void InvokeAllStatusListeners();
-
-  // Reports metrics if metrics were collected, otherwise does nothing. This
-  // method should only be called once on Callback's executor thread and before
-  // Callback's OnSucceeded, OnFailed and OnCanceled.
-  //
-  // Adds |finished_reason| to the reported RequestFinishedInfo. Also passes
-  // pointers to |response_info_| and |error_|.
-  //
-  // Also, the field |annotations_| is moved into the RequestFinishedInfo.
-  //
-  // |finished_reason|: Success / fail / cancel status of request.
-  void MaybeReportMetrics(
-      Cronet_RequestFinishedInfo_FINISHED_REASON finished_reason);
-
-  // Synchronize access to |request_| and other objects below from different
-  // threads.
-  base::Lock lock_;
-  // NetworkTask object lives on the network thread. Owned by |request_|.
-  // Outlives this.
-  raw_ptr<NetworkTasks> network_tasks_ GUARDED_BY(lock_) = nullptr;
-  // Cronet URLRequest used for this operation.
-  raw_ptr<CronetURLRequest> request_ GUARDED_BY(lock_) = nullptr;
-  bool started_ GUARDED_BY(lock_) = false;
-  bool waiting_on_redirect_ GUARDED_BY(lock_) = false;
-  bool waiting_on_read_ GUARDED_BY(lock_) = false;
-  // Set of status_listeners_ that have not yet been called back.
-  std::unordered_multiset<Cronet_UrlRequestStatusListenerPtr> status_listeners_
-      GUARDED_BY(lock_);
-
-  // Report containing metrics and other information to send to attached
-  // RequestFinishedListener(s). A nullptr value indicates that metrics haven't
-  // been collected.
-  //
-  // Ownership is shared since we guarantee that the RequestFinishedInfo will
-  // be valid if its UrlRequest isn't destroyed. We also guarantee that it's
-  // valid in RequestFinishedListener.OnRequestFinished() even if the
-  // UrlRequest is destroyed (and furthermore, each listener finishes at
-  // different times).
-  //
-  // NOTE: this field isn't protected by |lock_| since we pass this field as a
-  // unowned pointer to OnRequestFinished(). The pointee of this field cannot
-  // be updated after that call is made.
-  scoped_refptr<base::RefCountedData<Cronet_RequestFinishedInfo>>
-      request_finished_info_;
-
-  // Annotations passed via UrlRequestParams.annotations. These annotations
-  // aren't used by Cronet itself -- they're just moved into the
-  // RequestFinishedInfo passed to RequestFinishedInfoListener instances.
-  std::vector<Cronet_RawDataPtr> annotations_;
-
-  // Optional; allows a listener to receive request info and stats.
-  //
-  // A nullptr value indicates that there is no RequestFinishedInfo listener
-  // specified for the request (however, the Engine may have additional
-  // listeners -- Engine listeners apply to all its UrlRequests).
-  //
-  // Owned by the app -- must outlive this UrlRequest.
-  Cronet_RequestFinishedInfoListenerPtr request_finished_listener_ = nullptr;
-
-  // Executor upon which |request_finished_listener_| will run. If
-  // |request_finished_listener_| is not nullptr, this won't be nullptr either.
-  //
-  // Owned by the app -- must outlive this UrlRequest.
-  Cronet_ExecutorPtr request_finished_executor_ = nullptr;
-
-  // Response info updated by callback with number of bytes received. May be
-  // nullptr, if no response has been received.
-  //
-  // Ownership is shared since we guarantee that the UrlResponseInfo will
-  // be valid if its UrlRequest isn't destroyed. We also guarantee that it's
-  // valid in RequestFinishedListener.OnRequestFinished() even if the
-  // UrlRequest is destroyed (and furthermore, each listener finishes at
-  // different times).
-  //
-  // NOTE: the synchronization of this field is complex -- it can't be
-  // completely protected by |lock_| since we pass this field as a unowned
-  // pointer to OnSucceed(), OnFailed(), and OnCanceled(). The pointee of this
-  // field cannot be updated after one of those callback calls is made.
-  scoped_refptr<base::RefCountedData<Cronet_UrlResponseInfo>> response_info_;
-
-  // The error reported by request. May be nullptr if no error has occurred.
-  //
-  // Ownership is shared since we guarantee that the Error will be valid if its
-  // UrlRequest isn't destroyed. We also guarantee that it's valid in
-  // RequestFinishedListener.OnRequestFinished() even if the UrlRequest is
-  // destroyed (and furthermore, each listener finishes at different times).
-  //
-  // NOTE: the synchronization of this field is complex -- it can't be
-  // completely protected by |lock_| since we pass this field as an unowned
-  // pointer to OnSucceed(), OnFailed(), and OnCanceled(). The pointee of this
-  // field cannot be updated after one of those callback calls is made.
-  scoped_refptr<base::RefCountedData<Cronet_Error>> error_;
-
-  // The upload data stream if specified.
-  std::unique_ptr<Cronet_UploadDataSinkImpl> upload_data_sink_;
-
-  // Application callback interface, used, but not owned, by |this|.
-  Cronet_UrlRequestCallbackPtr callback_ = nullptr;
-  // Executor for application callback, used, but not owned, by |this|.
-  Cronet_ExecutorPtr executor_ = nullptr;
-
-  // Cronet Engine used to run network operations. Not owned, accessed from
-  // client thread. Must outlive this request.
-  raw_ptr<Cronet_EngineImpl> engine_ = nullptr;
-
-#if DCHECK_IS_ON()
-  // Event indicating Executor is properly destroying Runnables.
-  base::WaitableEvent runnable_destroyed_;
-#endif  // DCHECK_IS_ON()
-};
-
-}  // namespace cronet
-
-#endif  // COMPONENTS_CRONET_NATIVE_URL_REQUEST_H_
-- 
2.39.0.314.g84b9a713c41-goog

