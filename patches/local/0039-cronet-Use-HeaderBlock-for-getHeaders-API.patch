From 117d5c767d5155aeefb5e981442f4a13915aba26 Mon Sep 17 00:00:00 2001
From: Motomu Utsumi <motomuman@google.com>
Date: Wed, 8 Mar 2023 16:05:01 +0900
Subject: [PATCH 1/1] cronet: Use HeaderBlock for getHeaders API

Bug: 265674359
Test: TH
Change-Id: I93c0d6d5aae4a5e970720a356c04f02fe5ccce8b
---
 components/cronet/android/BUILD.gn            |  2 +
 .../android/net/http/BidirectionalStream.java |  4 +-
 .../api/src/android/net/http/HeaderBlock.java | 49 +++++++++++++++
 .../api/src/android/net/http/UrlRequest.java  |  2 +-
 .../src/android/net/http/UrlResponseInfo.java | 23 -------
 .../net/impl/CronetBidirectionalStream.java   | 12 ++--
 .../chromium/net/impl/CronetEngineBase.java   |  3 +-
 .../chromium/net/impl/CronetUrlRequest.java   | 26 +++-----
 .../net/impl/CronetUrlRequestContext.java     |  5 +-
 .../chromium/net/impl/HeaderBlockImpl.java    | 60 +++++++++++++++++++
 .../org/chromium/net/impl/UrlRequestBase.java |  8 ---
 .../net/impl/UrlRequestBuilderImpl.java       | 12 ++--
 .../net/impl/UrlResponseInfoImpl.java         | 39 +-----------
 .../net/impl/VersionSafeCallbacks.java        |  3 +-
 14 files changed, 142 insertions(+), 106 deletions(-)
 create mode 100644 components/cronet/android/api/src/android/net/http/HeaderBlock.java
 create mode 100644 components/cronet/android/java/src/org/chromium/net/impl/HeaderBlockImpl.java

diff --git a/components/cronet/android/BUILD.gn b/components/cronet/android/BUILD.gn
index 84ddf5514..58df5bdf1 100644
--- a/components/cronet/android/BUILD.gn
+++ b/components/cronet/android/BUILD.gn
@@ -235,6 +235,7 @@ android_library("cronet_api_java") {
     "api/src/android/net/http/ExperimentalBidirectionalStream.java",
     "api/src/android/net/http/ExperimentalHttpEngine.java",
     "api/src/android/net/http/ExperimentalUrlRequest.java",
+    "api/src/android/net/http/HeaderBlock.java",
     "api/src/android/net/http/IHttpEngineBuilder.java",
     "api/src/android/net/http/InlineExecutionProhibitedException.java",
     "api/src/android/net/http/NetworkException.java",
@@ -290,6 +291,7 @@ android_library("cronet_impl_common_base_java") {
     "java/src/org/chromium/net/impl/CronetLogger.java",
     "java/src/org/chromium/net/impl/CronetLoggerFactory.java",
     "java/src/org/chromium/net/impl/CronetManifest.java",
+    "java/src/org/chromium/net/impl/HeaderBlockImpl.java",
     "java/src/org/chromium/net/impl/NetworkExceptionImpl.java",
     "java/src/org/chromium/net/impl/NoOpLogger.java",
     "java/src/org/chromium/net/impl/Preconditions.java",
diff --git a/components/cronet/android/api/src/android/net/http/BidirectionalStream.java b/components/cronet/android/api/src/android/net/http/BidirectionalStream.java
index 096886357..6b5b318cc 100644
--- a/components/cronet/android/api/src/android/net/http/BidirectionalStream.java
+++ b/components/cronet/android/api/src/android/net/http/BidirectionalStream.java
@@ -235,7 +235,7 @@ public abstract class BidirectionalStream {
          * @param trailers the trailers received
          */
         public void onResponseTrailersReceived(@NonNull BidirectionalStream stream,
-                @NonNull UrlResponseInfo info, @NonNull UrlResponseInfo.HeaderBlock trailers) {}
+                @NonNull UrlResponseInfo info, @NonNull HeaderBlock trailers) {}
 
         /**
          * Invoked when there is no data to be read or written and the stream is closed successfully
@@ -305,7 +305,7 @@ public abstract class BidirectionalStream {
      * See {@link Builder#addHeader(String, String)}
      */
     @NonNull
-    public abstract List<Map.Entry<String, String>> getHeaders();
+    public abstract HeaderBlock getHeaders();
 
     /**
      * See {@link Builder#setPriority(int)}
diff --git a/components/cronet/android/api/src/android/net/http/HeaderBlock.java b/components/cronet/android/api/src/android/net/http/HeaderBlock.java
new file mode 100644
index 000000000..e6e5ef5b0
--- /dev/null
+++ b/components/cronet/android/api/src/android/net/http/HeaderBlock.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2023 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.net.http;
+
+import androidx.annotation.NonNull;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Unmodifiable container of headers or trailers.
+ */
+public abstract class HeaderBlock {
+    /**
+     * Returns an unmodifiable list of the header field and value pairs.
+     * For response, the headers are in the same order they are received over the wire.
+     * For request, the headers are in the same order they are added.
+     *
+     * @return an unmodifiable list of header field and value pairs
+     */
+    @NonNull
+    public abstract List<Map.Entry<String, String>> getAsList();
+
+    /**
+     * Returns an unmodifiable map from header field names to lists of values.
+     * Order of each list of values for a single header field is:
+     * For response, the same order they were received over the wire.
+     * For request, the same order they were added.
+     * The iteration order of keys is unspecified.
+     *
+     * @return an unmodifiable map from header field names to lists of values
+     */
+    @NonNull
+    public abstract Map<String, List<String>> getAsMap();
+}
diff --git a/components/cronet/android/api/src/android/net/http/UrlRequest.java b/components/cronet/android/api/src/android/net/http/UrlRequest.java
index 87a0f6d50..7d5d17b95 100644
--- a/components/cronet/android/api/src/android/net/http/UrlRequest.java
+++ b/components/cronet/android/api/src/android/net/http/UrlRequest.java
@@ -476,7 +476,7 @@ public abstract class UrlRequest {
      * See {@link UrlRequest.Builder#addHeader(String, String)}
      */
     @NonNull
-    public abstract List<Map.Entry<String, String>> getHeaders();
+    public abstract HeaderBlock getHeaders();
 
     /**
      * See {@link Builder#setCacheDisabled(boolean)}
diff --git a/components/cronet/android/api/src/android/net/http/UrlResponseInfo.java b/components/cronet/android/api/src/android/net/http/UrlResponseInfo.java
index ce080e945..2a127c502 100644
--- a/components/cronet/android/api/src/android/net/http/UrlResponseInfo.java
+++ b/components/cronet/android/api/src/android/net/http/UrlResponseInfo.java
@@ -17,29 +17,6 @@ import java.util.Map;
  * response.
  */
 public abstract class UrlResponseInfo {
-    /**
-     * Unmodifiable container of response headers or trailers.
-     */
-    public abstract static class HeaderBlock {
-        /**
-         * Returns an unmodifiable list of the response header field and value pairs.
-         * The headers are in the same order they are received over the wire.
-         *
-         * @return an unmodifiable list of response header field and value pairs
-         */
-        @NonNull
-        public abstract List<Map.Entry<String, String>> getAsList();
-
-        /**
-         * Returns an unmodifiable map from response-header field names to lists of values.
-         * Each list of values for a single header field is in the same order they
-         * were received over the wire. The iteration order of keys is unspecified.
-         *
-         * @return an unmodifiable map from response-header field names to lists of values
-         */
-        @NonNull
-        public abstract Map<String, List<String>> getAsMap();
-    }
 
     /**
      * Returns the URL the response is for. This is the URL after following
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetBidirectionalStream.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetBidirectionalStream.java
index 65edda28c..4089b1b31 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetBidirectionalStream.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetBidirectionalStream.java
@@ -14,6 +14,7 @@ import org.chromium.base.annotations.NativeClassQualifiedName;
 import org.chromium.base.annotations.NativeMethods;
 import android.net.http.BidirectionalStream;
 import android.net.http.CallbackException;
+import android.net.http.HeaderBlock;
 import android.net.http.HttpException;
 import android.net.http.ExperimentalBidirectionalStream;
 import android.net.http.NetworkException;
@@ -93,7 +94,7 @@ public class CronetBidirectionalStream extends ExperimentalBidirectionalStream {
     private final int mInitialPriority;
     private final String mInitialMethod;
     private final String mRequestHeaders[];
-    private final List<Map.Entry<String, String>> mRequestHeaderEntries;
+    private final HeaderBlock mRequestHeaderBlock;
     private final boolean mDelayRequestHeadersUntilFirstFlush;
     private final Collection<Object> mRequestAnnotations;
     private final boolean mTrafficStatsTagSet;
@@ -251,7 +252,7 @@ public class CronetBidirectionalStream extends ExperimentalBidirectionalStream {
         mExecutor = executor;
         mInitialMethod = httpMethod;
         mRequestHeaders = stringsFromHeaderList(requestHeaders);
-        mRequestHeaderEntries = requestHeaders;
+        mRequestHeaderBlock = new HeaderBlockImpl(requestHeaders);
         mDelayRequestHeadersUntilFirstFlush = delayRequestHeadersUntilNextFlush;
         mPendingData = new LinkedList<>();
         mFlushData = new LinkedList<>();
@@ -295,8 +296,8 @@ public class CronetBidirectionalStream extends ExperimentalBidirectionalStream {
     }
 
     @Override
-    public List<Map.Entry<String, String>> getHeaders() {
-        return mRequestHeaderEntries;
+    public HeaderBlock getHeaders() {
+        return mRequestHeaderBlock;
     }
 
     @Override
@@ -661,8 +662,7 @@ public class CronetBidirectionalStream extends ExperimentalBidirectionalStream {
     @SuppressWarnings("unused")
     @CalledByNative
     private void onResponseTrailersReceived(String[] trailers) {
-        final UrlResponseInfo.HeaderBlock trailersBlock =
-                new UrlResponseInfoImpl.HeaderBlockImpl(headersListFromStrings(trailers));
+        final HeaderBlock trailersBlock = new HeaderBlockImpl(headersListFromStrings(trailers));
         postTaskToExecutor(new Runnable() {
             @Override
             public void run() {
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBase.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBase.java
index 5b5311f3e..18d30e7e1 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBase.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBase.java
@@ -10,6 +10,7 @@ import android.net.http.BidirectionalStream;
 import android.net.http.ExperimentalBidirectionalStream;
 import android.net.http.ExperimentalHttpEngine;
 import android.net.http.ExperimentalUrlRequest;
+import android.net.http.HeaderBlock;
 import android.net.http.RequestFinishedInfo;
 import android.net.http.UrlRequest;
 
@@ -70,7 +71,7 @@ public abstract class CronetEngineBase extends ExperimentalHttpEngine {
             boolean disableCache, boolean disableConnectionMigration, boolean allowDirectExecutor,
             boolean trafficStatsTagSet, int trafficStatsTag, boolean trafficStatsUidSet,
             int trafficStatsUid, @Nullable RequestFinishedInfo.Listener requestFinishedListener,
-            @Idempotency int idempotency, long networkHandle);
+            @Idempotency int idempotency, long networkHandle, HeaderBlock headerBlock);
 
     /**
      * Creates a {@link BidirectionalStream} object. {@code callback} methods will
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequest.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequest.java
index 7827b18f4..0fd3113ad 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequest.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequest.java
@@ -6,6 +6,7 @@ package org.chromium.net.impl;
 
 import static java.lang.Math.max;
 
+import android.net.http.HeaderBlock;
 import android.os.Build;
 
 import androidx.annotation.RequiresApi;
@@ -88,7 +89,7 @@ public final class CronetUrlRequest extends UrlRequestBase {
     private final int mPriority;
     private final int mIdempotency;
     private String mInitialMethod;
-    private final HeadersList mRequestHeaders = new HeadersList();
+    private final HeaderBlock mRequestHeaders;
     private final Collection<Object> mRequestAnnotations;
     private final boolean mDisableCache;
     private final boolean mDisableConnectionMigration;
@@ -156,7 +157,7 @@ public final class CronetUrlRequest extends UrlRequestBase {
             boolean disableCache, boolean disableConnectionMigration, boolean allowDirectExecutor,
             boolean trafficStatsTagSet, int trafficStatsTag, boolean trafficStatsUidSet,
             int trafficStatsUid, RequestFinishedInfo.Listener requestFinishedListener,
-            int idempotency, long networkHandle) {
+            int idempotency, long networkHandle, HeaderBlock headerBlock) {
         if (url == null) {
             throw new NullPointerException("URL is required");
         }
@@ -188,6 +189,7 @@ public final class CronetUrlRequest extends UrlRequestBase {
                 : null;
         mIdempotency = convertIdempotency(idempotency);
         mNetworkHandle = networkHandle;
+        mRequestHeaders = headerBlock;
     }
 
     @Override
@@ -257,22 +259,10 @@ public final class CronetUrlRequest extends UrlRequestBase {
     }
 
     @Override
-    public List<Map.Entry<String, String>> getHeaders() {
+    public HeaderBlock getHeaders() {
         return mRequestHeaders;
     }
 
-    @Override
-    public void addHeader(String header, String value) {
-        checkNotStarted();
-        if (header == null) {
-            throw new NullPointerException("Invalid header name.");
-        }
-        if (value == null) {
-            throw new NullPointerException("Invalid header value.");
-        }
-        mRequestHeaders.add(new AbstractMap.SimpleImmutableEntry<String, String>(header, value));
-    }
-
     @Override
     public void setUploadDataProvider(UploadDataProvider uploadDataProvider, Executor executor) {
         if (uploadDataProvider == null) {
@@ -304,7 +294,7 @@ public final class CronetUrlRequest extends UrlRequestBase {
                 }
 
                 boolean hasContentType = false;
-                for (Map.Entry<String, String> header : mRequestHeaders) {
+                for (Map.Entry<String, String> header : mRequestHeaders.getAsList()) {
                     if (header.getKey().equalsIgnoreCase("Content-Type")
                             && !header.getValue().isEmpty()) {
                         hasContentType = true;
@@ -537,10 +527,10 @@ public final class CronetUrlRequest extends UrlRequestBase {
      * We are not really interested in their specific size but something which is close enough.
      */
     @VisibleForTesting
-    static long estimateHeadersSizeInBytes(HeadersList headers) {
+    static long estimateHeadersSizeInBytes(HeaderBlock headers) {
         if (headers == null) return 0;
         long responseHeaderSizeInBytes = 0;
-        for (Map.Entry<String, String> entry : headers) {
+        for (Map.Entry<String, String> entry : headers.getAsList()) {
             String key = entry.getKey();
             if (key != null) responseHeaderSizeInBytes += key.length();
             String value = entry.getValue();
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
index fb2ea0eb2..7e8d6d51a 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
@@ -6,6 +6,7 @@ package org.chromium.net.impl;
 
 import android.net.Network;
 import android.net.http.ApiVersion;
+import android.net.http.HeaderBlock;
 import android.os.ConditionVariable;
 import android.os.Process;
 
@@ -285,7 +286,7 @@ public class CronetUrlRequestContext extends CronetEngineBase {
             boolean disableConnectionMigration, boolean allowDirectExecutor,
             boolean trafficStatsTagSet, int trafficStatsTag, boolean trafficStatsUidSet,
             int trafficStatsUid, RequestFinishedInfo.Listener requestFinishedListener,
-            int idempotency, long networkHandle) {
+            int idempotency, long networkHandle, HeaderBlock headerBlock) {
         if (networkHandle == DEFAULT_NETWORK_HANDLE) {
             networkHandle = mNetworkHandle;
         }
@@ -294,7 +295,7 @@ public class CronetUrlRequestContext extends CronetEngineBase {
             return new CronetUrlRequest(this, url, priority, callback, executor, requestAnnotations,
                     disableCache, disableConnectionMigration, allowDirectExecutor,
                     trafficStatsTagSet, trafficStatsTag, trafficStatsUidSet, trafficStatsUid,
-                    requestFinishedListener, idempotency, networkHandle);
+                    requestFinishedListener, idempotency, networkHandle, headerBlock);
         }
     }
 
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/HeaderBlockImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/HeaderBlockImpl.java
new file mode 100644
index 000000000..5b34fd410
--- /dev/null
+++ b/components/cronet/android/java/src/org/chromium/net/impl/HeaderBlockImpl.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2023 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.chromium.net.impl;
+
+import android.net.http.HeaderBlock;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeMap;
+
+/**
+ * An implementation of {@link HeaderBlock}.
+ */
+public class HeaderBlockImpl extends HeaderBlock {
+    private final List<Map.Entry<String, String>> mAllHeadersList;
+    private Map<String, List<String>> mHeadersMap;
+
+    HeaderBlockImpl(List<Map.Entry<String, String>> allHeadersList) {
+        mAllHeadersList = Collections.unmodifiableList(allHeadersList);
+    }
+
+    @Override
+    public List<Map.Entry<String, String>> getAsList() {
+        return mAllHeadersList;
+    }
+
+    @Override
+    public Map<String, List<String>> getAsMap() {
+        // This is potentially racy...but races will only result in wasted resource.
+        if (mHeadersMap != null) {
+            return mHeadersMap;
+        }
+        Map<String, List<String>> map = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+        for (Map.Entry<String, String> entry : mAllHeadersList) {
+            List<String> values = map.computeIfAbsent(
+                    entry.getKey(),
+                    key -> new ArrayList<>());
+            values.add(entry.getValue());
+        }
+        map.replaceAll((key, values) -> Collections.unmodifiableList(values));
+        mHeadersMap = Collections.unmodifiableMap(map);
+        return mHeadersMap;
+    }
+}
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBase.java b/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBase.java
index 864a06cfa..ad79a42d6 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBase.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBase.java
@@ -29,14 +29,6 @@ public abstract class UrlRequestBase extends ExperimentalUrlRequest {
      */
     protected abstract void setHttpMethod(String method);
 
-    /**
-     * Adds a request header. Must be done before request has started.
-     *
-     * @param header header name.
-     * @param value header value.
-     */
-    protected abstract void addHeader(String header, String value);
-
     /**
      * Sets upload data provider. Must be done before request has started. May only be
      * invoked once per request. Switches method to "POST" if not explicitly
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBuilderImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBuilderImpl.java
index 0b94de7cf..75eb01679 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBuilderImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBuilderImpl.java
@@ -19,8 +19,10 @@ import android.net.http.UrlRequest;
 
 import androidx.annotation.Nullable;
 
+import java.util.AbstractMap;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Map;
 import java.util.concurrent.Executor;
 
 /**
@@ -45,7 +47,7 @@ public class UrlRequestBuilderImpl extends ExperimentalUrlRequest.Builder {
     private String mMethod;
 
     // List of request headers, stored as header field name and value pairs.
-    private final ArrayList<Pair<String, String>> mRequestHeaders = new ArrayList<>();
+    private final ArrayList<Map.Entry<String, String>> mRequestHeaders = new ArrayList<>();
     // Disable the cache for just this request.
     private boolean mDisableCache;
     // Disable connection migration for just this request.
@@ -127,7 +129,7 @@ public class UrlRequestBuilderImpl extends ExperimentalUrlRequest.Builder {
                     new Exception());
             return this;
         }
-        mRequestHeaders.add(Pair.create(header, value));
+        mRequestHeaders.add(new AbstractMap.SimpleImmutableEntry<String, String>(header, value));
         return this;
     }
 
@@ -226,13 +228,11 @@ public class UrlRequestBuilderImpl extends ExperimentalUrlRequest.Builder {
         final UrlRequestBase request = mCronetEngine.createRequest(mUrl, mCallback, mExecutor,
                 mPriority, mRequestAnnotations, mDisableCache, mDisableConnectionMigration,
                 mAllowDirectExecutor, mTrafficStatsTagSet, mTrafficStatsTag, mTrafficStatsUidSet,
-                mTrafficStatsUid, mRequestFinishedListener, mIdempotency, mNetworkHandle);
+                mTrafficStatsUid, mRequestFinishedListener, mIdempotency, mNetworkHandle,
+                new HeaderBlockImpl(mRequestHeaders));
         if (mMethod != null) {
             request.setHttpMethod(mMethod);
         }
-        for (Pair<String, String> header : mRequestHeaders) {
-            request.addHeader(header.first, header.second);
-        }
         if (mUploadDataProvider != null) {
             request.setUploadDataProvider(mUploadDataProvider, mUploadDataProviderExecutor);
         }
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/UrlResponseInfoImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/UrlResponseInfoImpl.java
index 4e42555ec..de9ab25bd 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/UrlResponseInfoImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/UrlResponseInfoImpl.java
@@ -4,15 +4,14 @@
 
 package org.chromium.net.impl;
 
+import android.net.http.HeaderBlock;
 import android.net.http.UrlRequest;
 import android.net.http.UrlResponseInfo;
 
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-import java.util.TreeMap;
 import java.util.concurrent.atomic.AtomicLong;
 
 /**
@@ -32,42 +31,6 @@ public final class UrlResponseInfoImpl extends UrlResponseInfo {
     private final AtomicLong mReceivedByteCount;
     private final HeaderBlockImpl mHeaders;
 
-    /**
-     * Unmodifiable container of response headers or trailers.
-     */
-    public static final class HeaderBlockImpl extends HeaderBlock {
-        private final List<Map.Entry<String, String>> mAllHeadersList;
-        private Map<String, List<String>> mHeadersMap;
-
-        HeaderBlockImpl(List<Map.Entry<String, String>> allHeadersList) {
-            mAllHeadersList = allHeadersList;
-        }
-
-        @Override
-        public List<Map.Entry<String, String>> getAsList() {
-            return mAllHeadersList;
-        }
-
-        @Override
-        public Map<String, List<String>> getAsMap() {
-            // This is potentially racy...but races will only result in wasted resource.
-            if (mHeadersMap != null) {
-                return mHeadersMap;
-            }
-            Map<String, List<String>> map = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
-            for (Map.Entry<String, String> entry : mAllHeadersList) {
-                List<String> values = new ArrayList<String>();
-                if (map.containsKey(entry.getKey())) {
-                    values.addAll(map.get(entry.getKey()));
-                }
-                values.add(entry.getValue());
-                map.put(entry.getKey(), Collections.unmodifiableList(values));
-            }
-            mHeadersMap = Collections.unmodifiableMap(map);
-            return mHeadersMap;
-        }
-    }
-
     /**
      * Creates an implementation of {@link UrlResponseInfo}.
      *
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java b/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java
index 2277d3f48..8e0c2ce9c 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java
@@ -5,6 +5,7 @@
 package org.chromium.net.impl;
 
 import android.net.http.BidirectionalStream;
+import android.net.http.HeaderBlock;
 import android.net.http.HttpException;
 import android.net.http.NetworkQualityRttListener;
 import android.net.http.NetworkQualityThroughputListener;
@@ -123,7 +124,7 @@ public class VersionSafeCallbacks {
 
         @Override
         public void onResponseTrailersReceived(BidirectionalStream stream, UrlResponseInfo info,
-                UrlResponseInfo.HeaderBlock trailers) {
+                HeaderBlock trailers) {
             mWrappedCallback.onResponseTrailersReceived(stream, info, trailers);
         }
 
-- 
2.40.0.rc1.284.g88254d51c5-goog

