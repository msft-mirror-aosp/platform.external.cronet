From 8bbefa5d30097cd50a31ab962f2ce6506a3f16e9 Mon Sep 17 00:00:00 2001
From: Dan Stahr <danstahr@google.com>
Date: Wed, 11 Jan 2023 11:39:25 +0000
Subject: [PATCH] Remove all mentions of Cronet from public class names and
 javadoc.

I left some Cronet references around in places which are closely
tied to the Cronet implementation and aren't part of the public API.
These should be harmless.

I also made some minor changes to the API classes to satisfy
Metalava requirements for hidden methods.

Test: m

Change-Id: I3f9ec5c9c156040d656adabbc2ea8d2796aa6514
---
 components/cronet/android/BUILD.gn            |  20 +--
 .../android/net/http/BidirectionalStream.java |   6 +-
 .../android/net/http/CallbackException.java   |   2 +-
 .../net/http/ConnectionMigrationOptions.java  |   2 +-
 .../api/src/android/net/http/DnsOptions.java  |  24 ++-
 .../http/ExperimentalBidirectionalStream.java |  12 +-
 ...ngine.java => ExperimentalHttpEngine.java} |  86 +++------
 .../net/http/ExperimentalUrlRequest.java      |  12 +-
 .../{CronetEngine.java => HttpEngine.java}    | 100 +++++------
 ...ronetException.java => HttpException.java} |   4 +-
 ...neBuilder.java => IHttpEngineBuilder.java} |  44 ++---
 .../android/net/http/NetworkException.java    |  24 +--
 .../api/src/android/net/http/QuicOptions.java |  53 +++---
 .../android/net/http/RequestFinishedInfo.java |   6 +-
 .../api/src/android/net/http/UrlRequest.java  |  10 +-
 ...etCallback.java => ByteArrayCallback.java} |   8 +-
 ...{CronetResponse.java => HttpResponse.java} |  10 +-
 .../ImplicitFlowControlCallback.java          |  10 +-
 ...ck.java => InMemoryTransformCallback.java} |  26 +--
 ...nCronetCallback.java => JsonCallback.java} |  10 +-
 .../net/http/apihelpers/RedirectHandler.java  |   4 +-
 ...er.java => RequestCompletionListener.java} |  12 +-
 ...ronetCallback.java => StringCallback.java} |  10 +-
 .../http/apihelpers/UploadDataProviders.java  |  16 +-
 .../http/apihelpers/UrlRequestCallbacks.java  |  74 ++++----
 .../impl/BidirectionalStreamBuilderImpl.java  |   4 +-
 .../net/impl/CronetBidirectionalStream.java   |   8 +-
 .../chromium/net/impl/CronetEngineBase.java   |   4 +-
 .../net/impl/CronetEngineBuilderImpl.java     |  30 ++--
 .../net/impl/CronetExceptionImpl.java         |   6 +-
 .../chromium/net/impl/CronetUrlRequest.java   |   6 +-
 .../net/impl/CronetUrlRequestContext.java     |   4 +-
 .../impl/NativeCronetEngineBuilderImpl.java   |  10 +-
 .../net/impl/NetworkExceptionImpl.java        |   2 +-
 .../chromium/net/impl/QuicExceptionImpl.java  |   4 +-
 .../net/impl/RequestFinishedInfoImpl.java     |   8 +-
 .../net/impl/UrlRequestBuilderImpl.java       |   4 +-
 .../net/impl/VersionSafeCallbacks.java        |   6 +-
 .../CronetHttpURLConnection.java              |  10 +-
 .../CronetHttpURLStreamHandler.java           |   6 +-
 .../CronetURLStreamHandlerFactory.java        |   6 +-
 .../net/BidirectionalStreamQuicTest.java      |  14 +-
 .../chromium/net/BidirectionalStreamTest.java |  30 ++--
 .../src/org/chromium/net/BrotliTest.java      |  18 +-
 .../src/org/chromium/net/CronetTestRule.java  |  26 +--
 .../net/CronetUrlRequestContextTest.java      | 166 +++++++++---------
 .../chromium/net/CronetUrlRequestTest.java    |  24 +--
 .../src/org/chromium/net/DiskStorageTest.java |  44 ++---
 .../chromium/net/ExperimentalOptionsTest.java |  22 +--
 .../chromium/net/MockCertVerifierTest.java    |  12 +-
 .../src/org/chromium/net/NQETest.java         |  32 ++--
 .../net/NetworkChangeNotifierTest.java        |   2 +-
 .../chromium/net/NetworkErrorLoggingTest.java |  18 +-
 .../src/org/chromium/net/PkpTest.java         |  16 +-
 .../src/org/chromium/net/QuicTest.java        |  22 +--
 .../net/TestBidirectionalStreamCallback.java  |   6 +-
 .../chromium/net/TestUrlRequestCallback.java  |   6 +-
 .../chromium/net/impl/CronetLoggerTest.java   |  38 ++--
 .../CronetBufferedOutputStreamTest.java       |   4 +-
 .../CronetChunkedOutputStreamTest.java        |   4 +-
 .../CronetFixedModeOutputStreamTest.java      |   4 +-
 .../CronetHttpURLConnectionTest.java          |  14 +-
 .../net/urlconnection/QuicUploadTest.java     |  10 +-
 63 files changed, 602 insertions(+), 633 deletions(-)
 rename components/cronet/android/api/src/android/net/http/{ExperimentalCronetEngine.java => ExperimentalHttpEngine.java} (89%)
 rename components/cronet/android/api/src/android/net/http/{CronetEngine.java => HttpEngine.java} (86%)
 rename components/cronet/android/api/src/android/net/http/{CronetException.java => HttpException.java} (86%)
 rename components/cronet/android/api/src/android/net/http/{ICronetEngineBuilder.java => IHttpEngineBuilder.java} (59%)
 rename components/cronet/android/api/src/android/net/http/apihelpers/{ByteArrayCronetCallback.java => ByteArrayCallback.java} (62%)
 rename components/cronet/android/api/src/android/net/http/apihelpers/{CronetResponse.java => HttpResponse.java} (84%)
 rename components/cronet/android/api/src/android/net/http/apihelpers/{InMemoryTransformCronetCallback.java => InMemoryTransformCallback.java} (80%)
 rename components/cronet/android/api/src/android/net/http/apihelpers/{JsonCronetCallback.java => JsonCallback.java} (71%)
 rename components/cronet/android/api/src/android/net/http/apihelpers/{CronetRequestCompletionListener.java => RequestCompletionListener.java} (76%)
 rename components/cronet/android/api/src/android/net/http/apihelpers/{StringCronetCallback.java => StringCallback.java} (85%)

diff --git a/components/cronet/android/BUILD.gn b/components/cronet/android/BUILD.gn
index a289bfcc..8454f05d 100644
--- a/components/cronet/android/BUILD.gn
+++ b/components/cronet/android/BUILD.gn
@@ -229,13 +229,13 @@ android_library("cronet_api_java") {
     "api/src/android/net/http/BidirectionalStream.java",
     "api/src/android/net/http/CallbackException.java",
     "api/src/android/net/http/ConnectionMigrationOptions.java",
-    "api/src/android/net/http/CronetEngine.java",
-    "api/src/android/net/http/CronetException.java",
+    "api/src/android/net/http/HttpEngine.java",
+    "api/src/android/net/http/HttpException.java",
     "api/src/android/net/http/DnsOptions.java",
     "api/src/android/net/http/ExperimentalBidirectionalStream.java",
-    "api/src/android/net/http/ExperimentalCronetEngine.java",
+    "api/src/android/net/http/ExperimentalHttpEngine.java",
     "api/src/android/net/http/ExperimentalUrlRequest.java",
-    "api/src/android/net/http/ICronetEngineBuilder.java",
+    "api/src/android/net/http/IHttpEngineBuilder.java",
     "api/src/android/net/http/InlineExecutionProhibitedException.java",
     "api/src/android/net/http/NetworkException.java",
     "api/src/android/net/http/NetworkQualityRttListener.java",
@@ -247,16 +247,16 @@ android_library("cronet_api_java") {
     "api/src/android/net/http/UploadDataSink.java",
     "api/src/android/net/http/UrlRequest.java",
     "api/src/android/net/http/UrlResponseInfo.java",
-    "api/src/android/net/http/apihelpers/ByteArrayCronetCallback.java",
+    "api/src/android/net/http/apihelpers/ByteArrayCallback.java",
     "api/src/android/net/http/apihelpers/ContentTypeParametersParser.java",
-    "api/src/android/net/http/apihelpers/CronetRequestCompletionListener.java",
-    "api/src/android/net/http/apihelpers/CronetResponse.java",
+    "api/src/android/net/http/apihelpers/RequestCompletionListener.java",
+    "api/src/android/net/http/apihelpers/HttpResponse.java",
     "api/src/android/net/http/apihelpers/ImplicitFlowControlCallback.java",
-    "api/src/android/net/http/apihelpers/InMemoryTransformCronetCallback.java",
-    "api/src/android/net/http/apihelpers/JsonCronetCallback.java",
+    "api/src/android/net/http/apihelpers/InMemoryTransformCallback.java",
+    "api/src/android/net/http/apihelpers/JsonCallback.java",
     "api/src/android/net/http/apihelpers/RedirectHandler.java",
     "api/src/android/net/http/apihelpers/RedirectHandlers.java",
-    "api/src/android/net/http/apihelpers/StringCronetCallback.java",
+    "api/src/android/net/http/apihelpers/StringCallback.java",
     "api/src/android/net/http/apihelpers/UploadDataProviders.java",
     "api/src/android/net/http/apihelpers/UrlRequestCallbacks.java",
     _generated_interface_api_version_java,
diff --git a/components/cronet/android/api/src/android/net/http/BidirectionalStream.java b/components/cronet/android/api/src/android/net/http/BidirectionalStream.java
index b206a019..454c36af 100644
--- a/components/cronet/android/api/src/android/net/http/BidirectionalStream.java
+++ b/components/cronet/android/api/src/android/net/http/BidirectionalStream.java
@@ -22,7 +22,7 @@ public abstract class BidirectionalStream {
     /**
      * Builder for {@link BidirectionalStream}s. Allows configuring stream before constructing
      * it via {@link Builder#build}. Created by
-     * {@link ExperimentalCronetEngine#newBidirectionalStreamBuilder}.
+     * {@link ExperimentalHttpEngine#newBidirectionalStreamBuilder}.
      */
     public abstract static class Builder {
         /**
@@ -191,7 +191,7 @@ public abstract class BidirectionalStream {
         /**
          * Invoked if the stream failed for any reason after {@link BidirectionalStream#start}.
          * <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error codes</a> are
-         * mapped to {@link UrlRequestException#getCronetInternalErrorCode} codes. Once invoked,
+         * mapped to {@link NetworkException#getInternalErrorCode} codes. Once invoked,
          * no further {@link BidirectionalStream.Callback} methods will be invoked.
          *
          * @param stream the stream which has failed
@@ -200,7 +200,7 @@ public abstract class BidirectionalStream {
          * @param error information about the failure
          */
         public abstract void onFailed(
-                BidirectionalStream stream, UrlResponseInfo info, CronetException error);
+                BidirectionalStream stream, UrlResponseInfo info, HttpException error);
 
         /**
          * Invoked if the stream was canceled via {@link BidirectionalStream#cancel}. Once
diff --git a/components/cronet/android/api/src/android/net/http/CallbackException.java b/components/cronet/android/api/src/android/net/http/CallbackException.java
index 7bd70f61..a114d8a9 100644
--- a/components/cronet/android/api/src/android/net/http/CallbackException.java
+++ b/components/cronet/android/api/src/android/net/http/CallbackException.java
@@ -10,7 +10,7 @@ package android.net.http;
  * case {@link java.io.IOException#getCause getCause()} can be used to find the thrown
  * exception.
  */
-public abstract class CallbackException extends CronetException {
+public abstract class CallbackException extends HttpException {
     /**
       * Constructs an exception that wraps {@code cause} thrown by a {@link UrlRequest.Callback}.
       *
diff --git a/components/cronet/android/api/src/android/net/http/ConnectionMigrationOptions.java b/components/cronet/android/api/src/android/net/http/ConnectionMigrationOptions.java
index ede4cbce..b07607be 100644
--- a/components/cronet/android/api/src/android/net/http/ConnectionMigrationOptions.java
+++ b/components/cronet/android/api/src/android/net/http/ConnectionMigrationOptions.java
@@ -9,7 +9,7 @@ import androidx.annotation.Nullable;
 import java.time.Duration;
 
 /**
- * A class configuring Cronet's connection migration functionality.
+ * A class configuring the HTTP connection migration functionality.
  *
  * <p>Connection migration stops open connections to servers from being destroyed when the
  * client device switches its L4 connectivity (typically the IP address as a result of using
diff --git a/components/cronet/android/api/src/android/net/http/DnsOptions.java b/components/cronet/android/api/src/android/net/http/DnsOptions.java
index 1971c58d..287b671d 100644
--- a/components/cronet/android/api/src/android/net/http/DnsOptions.java
+++ b/components/cronet/android/api/src/android/net/http/DnsOptions.java
@@ -12,13 +12,13 @@ import androidx.annotation.RequiresApi;
 import java.time.Duration;
 
 /**
- * A class configuring Cronet's host resolution functionality. Note that while we refer to {@code
+ * A class configuring the host resolution functionality. Note that while we refer to {@code
  * DNS} as the most common mechanism being used for brevity, settings apply to other means of
  * resolving hostnames like hosts file resolution.
  *
- * <p>Cronet resolve hostnames in two ways - either by using the system resolver (using {@code
+ * <p>Hostnames can be resolved in two ways - either by using the system resolver (using {@code
  * getaddrinfo} provided by system libraries), or by using a custom resolver which is built into the
- * networking stack Cronet uses.
+ * HTTP networking stack.
  *
  * <p>The built-in stack provides several advantages over using the system resolver:
  *
@@ -31,8 +31,6 @@ import java.time.Duration;
  *   <li>{@code struct addrinfo} provides no TTL (Time To Live) of the returned addresses. This
  *       restricts flexibility of handling caching (e.g. allowing the use of stale DNS records) and
  *       requires us to either rely on OS DNS caches, or be extremely conservative with the TTL.
- *   <li>As part of the OS, {@code getaddrinfo} evolves slowly. Using a custom stack enables Cronet
- *       to introduce features like encrypted DNS faster.
  * </ul>
  *
  * <p>Most configuration in this class is only applicable if the built-in DNS resolver is used.
@@ -124,7 +122,7 @@ public final class DnsOptions {
     }
 
     /**
-     * A class configuring Cronet's stale DNS functionality.
+     * A class configuring the stale DNS functionality.
      *
      * <p>DNS resolution is one of the steps on the critical path to making a URL request, but it
      * can be slow for various reasons (underlying network latency, buffer bloat, packet loss,
@@ -246,8 +244,8 @@ public final class DnsOptions {
 
             /**
              * Sets whether to return results originating from other networks or not. Normally,
-             * Cronet clears the DNS cache entirely when switching connections, e.g. between two
-             * Wi-Fi networks or from Wi-Fi to 4G.
+             * the HTTP stack clears the DNS cache entirely when switching connections, e.g. between
+             * two Wi-Fi networks or from Wi-Fi to 4G.
              *
              * @return the builder for chaining
              */
@@ -260,10 +258,10 @@ public final class DnsOptions {
              * Sets whether to allow use of stale DNS results when network resolver fails to resolve
              * the hostname.
              *
-             * <p>Depending on the use case, if Cronet quickly sees a fresh failure, it may be
-             * desirable to use the failure as it is technically the fresher result, and we had such
-             * a fresh result quickly; or, prefer having any result (even if stale) to use over
-             * having a failure.
+             * <p>Depending on the use case, if the DNS resolver quickly sees a fresh failure, it
+             * may be desirable to use the failure as it is technically the fresher result, and we
+             * had such a fresh result quickly; or, prefer having any result (even if stale) to use
+             * over dealing with a DNS failure.
              *
              * @return the builder for chaining
              */
@@ -370,7 +368,7 @@ public final class DnsOptions {
         /**
          * Sets whether the DNS cache should be persisted to disk.
          *
-         * <p>Only relevant if {@link CronetEngine.Builder#setStoragePath(String)} is
+         * <p>Only relevant if {@link HttpEngine.Builder#setStoragePath(String)} is
          * set.
          *
          * @return the builder for chaining
diff --git a/components/cronet/android/api/src/android/net/http/ExperimentalBidirectionalStream.java b/components/cronet/android/api/src/android/net/http/ExperimentalBidirectionalStream.java
index 205ce177..6bba0b9a 100644
--- a/components/cronet/android/api/src/android/net/http/ExperimentalBidirectionalStream.java
+++ b/components/cronet/android/api/src/android/net/http/ExperimentalBidirectionalStream.java
@@ -80,14 +80,14 @@ public abstract class ExperimentalBidirectionalStream extends BidirectionalStrea
         }
 
         /**
-         * Binds the request to the specified network handle. Cronet will send this request only
-         * using the network associated to this handle. If this network disconnects the request will
-         * fail, the exact error will depend on the stage of request processing when the network
-         * disconnects. Network handles can be obtained through {@code Network#getNetworkHandle}.
-         * Only available starting from Android Marshmallow.
+         * Binds the request to the specified network handle. The HTTP stack will send this request
+         * only using the network associated to this handle. If this network disconnects the request
+         * will  fail, the exact error will depend on the stage of request processing when
+         * the network disconnects. Network handles can be obtained
+         * through {@code Network#getNetworkHandle}.
          *
          * @param networkHandle the network handle to bind the request to. Specify
-         *        {@link ExperimentalCronetEngine#UNBIND_NETWORK_HANDLE} to unbind.
+         *        {@link ExperimentalHttpEngine#UNBIND_NETWORK_HANDLE} to unbind.
          * @return the builder to facilitate chaining.
          */
         public Builder bindToNetwork(long networkHandle) {
diff --git a/components/cronet/android/api/src/android/net/http/ExperimentalCronetEngine.java b/components/cronet/android/api/src/android/net/http/ExperimentalHttpEngine.java
similarity index 89%
rename from components/cronet/android/api/src/android/net/http/ExperimentalCronetEngine.java
rename to components/cronet/android/api/src/android/net/http/ExperimentalHttpEngine.java
index 87faa43e..cfc9b71d 100644
--- a/components/cronet/android/api/src/android/net/http/ExperimentalCronetEngine.java
+++ b/components/cronet/android/api/src/android/net/http/ExperimentalHttpEngine.java
@@ -22,20 +22,14 @@ import java.util.Set;
 import java.util.concurrent.Executor;
 
 /**
- * {@link CronetEngine} that exposes experimental features. To obtain an
- * instance of this class, cast a {@code CronetEngine} to this type. Every
- * instance of {@code CronetEngine} can be cast to an instance of this class,
- * as they are backed by the same implementation and hence perform identically.
- * Instances of this class are not meant for general use, but instead only
- * to access experimental features. Experimental features may be deprecated in the
- * future. Use at your own risk.
+ * {@link HttpEngine} that exposes experimental features.
  *
- * {@hide since this class exposes experimental features that should be hidden.}
+ * <p>{@hide since this class exposes experimental features that should be hidden.}
  *
  * @deprecated scheduled for deletion, don't use in new code.
  */
 @Deprecated
-public abstract class ExperimentalCronetEngine extends CronetEngine {
+public abstract class ExperimentalHttpEngine extends HttpEngine {
     /**
      * The value of a connection metric is unknown.
      */
@@ -83,32 +77,26 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
      */
     public static final int EFFECTIVE_CONNECTION_TYPE_4G = 5;
 
-    /**
-     * The value to be used to undo any previous network binding.
-     */
+    /** The value to be used to undo any previous network binding. */
     public static final long UNBIND_NETWORK_HANDLE = -1;
 
     /**
-     * A version of {@link CronetEngine.Builder} that exposes experimental
-     * features. Instances of this class are not meant for general use, but
-     * instead only to access experimental features. Experimental features
-     * may be deprecated in the future. Use at your own risk.
+     * A version of {@link HttpEngine.Builder} that exposes experimental features. Instances of
+     * this class are not meant for general use, but instead only to access experimental features.
+     * Experimental features may be deprecated in the future. Use at your own risk.
      */
-    public static class Builder extends CronetEngine.Builder {
+    public static class Builder extends HttpEngine.Builder {
         private JSONObject mParsedExperimentalOptions;
         private final List<ExperimentalOptionsPatch> mExperimentalOptionsPatches =
                 new ArrayList<>();
 
         /**
-         * Constructs a {@link Builder} object that facilitates creating a
-         * {@link CronetEngine}. The default configuration enables HTTP/2 and
-         * disables QUIC, SDCH and the HTTP cache.
+         * Constructs a {@link Builder} object that facilitates creating a {@link HttpEngine}. The
+         * default configuration enables HTTP/2 and disables QUIC, SDCH and the HTTP cache.
          *
-         * @param context Android {@link Context}, which is used by
-         *                {@link Builder} to retrieve the application
-         *                context. A reference to only the application
-         *                context will be kept, so as to avoid extending
-         *                the lifetime of {@code context} unnecessarily.
+         * @param context Android {@link Context}, which is used by the Builder to retrieve the
+         *     application context. A reference to only the application context will be kept, so as
+         * to avoid extending the lifetime of {@code context} unnecessarily.
          */
         public Builder(Context context) {
             super(context);
@@ -120,33 +108,14 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
          * implementation.
          *
          * @param builderDelegate delegate that provides the actual implementation.
-         *
-         * {@hide}
+         *     <p>{@hide}
          */
-        public Builder(ICronetEngineBuilder builderDelegate) {
+        public Builder(IHttpEngineBuilder builderDelegate) {
             super(builderDelegate);
         }
 
         /**
-         * Enables the network quality estimator, which collects and reports
-         * measurements of round trip time (RTT) and downstream throughput at
-         * various layers of the network stack. After enabling the estimator,
-         * listeners of RTT and throughput can be added with
-         * {@link #addRttListener} and {@link #addThroughputListener} and
-         * removed with {@link #removeRttListener} and
-         * {@link #removeThroughputListener}. The estimator uses memory and CPU
-         * only when enabled.
-         * @param value {@code true} to enable network quality estimator,
-         *            {@code false} to disable.
-         * @return the builder to facilitate chaining.
-         */
-        public Builder enableNetworkQualityEstimator(boolean value) {
-            mBuilderDelegate.enableNetworkQualityEstimator(value);
-            return this;
-        }
-
-        /**
-         * Sets experimental options to be used in Cronet.
+         * Sets experimental options to be used.
          *
          * @param options JSON formatted experimental options.
          * @return the builder to facilitate chaining.
@@ -161,9 +130,9 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
         }
 
         /**
-         * Sets the thread priority of Cronet's internal thread.
+         * Sets the thread priority of the internal thread.
          *
-         * @param priority the thread priority of Cronet's internal thread.
+         * @param priority the thread priority of the internal thread.
          *        A Linux priority level, from -20 for highest scheduling
          *        priority to 19 for lowest scheduling priority. For more
          *        information on values, see
@@ -183,7 +152,7 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
          * @hide
          */
         @VisibleForTesting
-        public ICronetEngineBuilder getBuilderDelegate() {
+        public IHttpEngineBuilder getBuilderDelegate() {
             return mBuilderDelegate;
         }
 
@@ -219,7 +188,7 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
         public Builder setQuicOptions(QuicOptions options) {
             // If the delegate builder supports enabling connection migration directly, just use it
             if (mBuilderDelegate.getSupportedConfigOptions().contains(
-                    ICronetEngineBuilder.QUIC_OPTIONS)) {
+                    IHttpEngineBuilder.QUIC_OPTIONS)) {
                 mBuilderDelegate.setQuicOptions(options);
                 return this;
             }
@@ -322,7 +291,7 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
         public Builder setDnsOptions(DnsOptions options) {
             // If the delegate builder supports enabling connection migration directly, just use it
             if (mBuilderDelegate.getSupportedConfigOptions().contains(
-                    ICronetEngineBuilder.DNS_OPTIONS)) {
+                    IHttpEngineBuilder.DNS_OPTIONS)) {
                 mBuilderDelegate.setDnsOptions(options);
                 return this;
             }
@@ -388,7 +357,7 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
         public Builder setConnectionMigrationOptions(ConnectionMigrationOptions options) {
             // If the delegate builder supports enabling connection migration directly, just use it
             if (mBuilderDelegate.getSupportedConfigOptions().contains(
-                    ICronetEngineBuilder.CONNECTION_MIGRATION_OPTIONS)) {
+                    IHttpEngineBuilder.CONNECTION_MIGRATION_OPTIONS)) {
                 mBuilderDelegate.setConnectionMigrationOptions(options);
                 return this;
             }
@@ -458,11 +427,6 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
             return this;
         }
 
-        @Override
-        public Builder enableSdch(boolean value) {
-            return this;
-        }
-
         @Override
         public Builder enableHttpCache(int cacheMode, long maxSize) {
             super.enableHttpCache(cacheMode, maxSize);
@@ -489,7 +453,7 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
         }
 
         @Override
-        public ExperimentalCronetEngine build() {
+        public ExperimentalHttpEngine build() {
             if (mParsedExperimentalOptions == null && mExperimentalOptionsPatches.isEmpty()) {
                 return mBuilderDelegate.build();
             }
@@ -650,12 +614,12 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
      * Establishes a new connection to the resource specified by the {@link URL} {@code url}
      * using the given proxy.
      * <p>
-     * <b>Note:</b> Cronet's {@link java.net.HttpURLConnection} implementation is subject to certain
+     * <b>Note:</b> this {@link java.net.HttpURLConnection} implementation is subject to certain
      * limitations, see {@link #createURLStreamHandlerFactory} for details.
      *
      * @param url URL of resource to connect to.
      * @param proxy proxy to use when establishing connection.
-     * @return an {@link java.net.HttpURLConnection} instance implemented by this CronetEngine.
+     * @return an {@link java.net.HttpURLConnection} instance implemented by this HttpEngine.
      * @throws IOException if an error occurs while opening the connection.
      */
     // TODO(pauljensen): Expose once implemented, http://crbug.com/418111
diff --git a/components/cronet/android/api/src/android/net/http/ExperimentalUrlRequest.java b/components/cronet/android/api/src/android/net/http/ExperimentalUrlRequest.java
index d2affc92..88361b99 100644
--- a/components/cronet/android/api/src/android/net/http/ExperimentalUrlRequest.java
+++ b/components/cronet/android/api/src/android/net/http/ExperimentalUrlRequest.java
@@ -106,14 +106,14 @@ public abstract class ExperimentalUrlRequest extends UrlRequest {
         }
 
         /**
-         * Binds the request to the specified network handle. Cronet will send this request only
-         * using the network associated to this handle. If this network disconnects the request will
-         * fail, the exact error will depend on the stage of request processing when the network
-         * disconnects. Network handles can be obtained through {@code Network#getNetworkHandle}.
-         * Only available starting from Android Marshmallow.
+         * Binds the request to the specified network handle. The HTTP stack will send this request
+         * only using the network associated to this handle. If this network disconnects the request
+         * will  fail, the exact error will depend on the stage of request processing when
+         * the network disconnects. Network handles can be obtained
+         * through {@code Network#getNetworkHandle}.
          *
          * @param networkHandle the network handle to bind the request to. Specify
-         *        {@link ExperimentalCronetEngine#UNBIND_NETWORK_HANDLE} to unbind.
+         *        {@link ExperimentalHttpEngine#UNBIND_NETWORK_HANDLE} to unbind.
          * @return the builder to facilitate chaining.
          */
         public Builder bindToNetwork(long networkHandle) {
diff --git a/components/cronet/android/api/src/android/net/http/CronetEngine.java b/components/cronet/android/api/src/android/net/http/HttpEngine.java
similarity index 86%
rename from components/cronet/android/api/src/android/net/http/CronetEngine.java
rename to components/cronet/android/api/src/android/net/http/HttpEngine.java
index 0c3de7d4..45c2260f 100644
--- a/components/cronet/android/api/src/android/net/http/CronetEngine.java
+++ b/components/cronet/android/api/src/android/net/http/HttpEngine.java
@@ -21,16 +21,16 @@ import javax.net.ssl.HttpsURLConnection;
  * available on the current platform. An instance of this class can be created
  * using {@link Builder}.
  */
-public abstract class CronetEngine {
+public abstract class HttpEngine {
 
     public static Builder builder(Context context) {
         return new Builder(context);
     }
 
     /**
-     * A builder for {@link CronetEngine}s, which allows runtime configuration of
-     * {@code CronetEngine}. Configuration options are set on the builder and
-     * then {@link #build} is called to create the {@code CronetEngine}.
+     * A builder for {@link HttpEngine}s, which allows runtime configuration of
+     * {@link HttpEngine}. Configuration options are set on the builder and
+     * then {@link #build} is called to create the {@link HttpEngine}.
      */
     // NOTE(kapishnikov): In order to avoid breaking the existing API clients, all future methods
     // added to this class and other API classes must have default implementation.
@@ -40,11 +40,11 @@ public abstract class CronetEngine {
          * Reference to the actual builder implementation.
          * {@hide exclude from JavaDoc}.
          */
-        protected final ICronetEngineBuilder mBuilderDelegate;
+        protected final IHttpEngineBuilder mBuilderDelegate;
 
         /**
          * Constructs a {@link Builder} object that facilitates creating a
-         * {@link CronetEngine}. The default configuration enables HTTP/2 and
+         * {@link HttpEngine}. The default configuration enables HTTP/2 and
          * QUIC, but disables the HTTP cache.
          *
          * @param context Android {@link Context}, which is used by
@@ -66,13 +66,13 @@ public abstract class CronetEngine {
          *
          * {@hide}
          */
-        Builder(ICronetEngineBuilder builderDelegate) {
+        Builder(IHttpEngineBuilder builderDelegate) {
             mBuilderDelegate = builderDelegate;
         }
 
         /**
-         * Constructs a User-Agent string including application name and version,
-         * system build version, model and id, and Cronet version.
+         * Constructs a default User-Agent string including the system build version, model and id,
+         * and the HTTP stack version.
          *
          * @return User-Agent string.
          */
@@ -99,8 +99,8 @@ public abstract class CronetEngine {
          * exist.
          * <p>
          * <b>NOTE:</b> Do not use the same storage directory with more than one
-         * {@code CronetEngine} at a time. Access to the storage directory does
-         * not support concurrent access by multiple {@code CronetEngine}s.
+         * {@link HttpEngine} at a time. Access to the storage directory does
+         * not support concurrent access by multiple {@link HttpEngine} instances.
          *
          * @param value path to existing directory.
          * @return the builder to facilitate chaining.
@@ -112,8 +112,8 @@ public abstract class CronetEngine {
 
         /**
          * Sets whether <a href="https://www.chromium.org/quic">QUIC</a> protocol
-         * is enabled. Defaults to enabled. If QUIC is enabled, then QUIC User Agent Id
-         * containing application name and Cronet version is sent to the server.
+         * is enabled. Defaults to enabled.
+         *
          * @param value {@code true} to enable QUIC, {@code false} to disable.
          * @return the builder to facilitate chaining.
          */
@@ -133,15 +133,6 @@ public abstract class CronetEngine {
             return this;
         }
 
-        /**
-         * @deprecated SDCH is deprecated in Cronet M63. This method is a no-op.
-         * {@hide exclude from JavaDoc}.
-         */
-        @Deprecated
-        public Builder enableSdch(boolean value) {
-            return this;
-        }
-
         /**
          * Sets whether <a href="https://tools.ietf.org/html/rfc7932">Brotli</a> compression is
          * enabled. If enabled, Brotli will be advertised in Accept-Encoding request headers.
@@ -277,8 +268,9 @@ public abstract class CronetEngine {
         }
 
         /**
-         * Configures the behavior of Cronet when using QUIC. For more details, see documentation
-         * of {@link QuicOptions} and the individual methods of {@link QuicOptions.Builder}.
+         * Configures the behavior of the HTTP stack when using QUIC. For more details, see
+         * documentation of {@link QuicOptions} and the individual methods
+         * of {@link QuicOptions.Builder}.
          *
          * <p>Only relevant if {@link #enableQuic(boolean)} is enabled.
          *
@@ -346,27 +338,27 @@ public abstract class CronetEngine {
         }
 
         /**
-         * Build a {@link CronetEngine} using this builder's configuration.
-         * @return constructed {@link CronetEngine}.
+         * Build a {@link HttpEngine} using this builder's configuration.
+         * @return constructed {@link HttpEngine}.
          */
-        public CronetEngine build() {
+        public HttpEngine build() {
             return mBuilderDelegate.build();
         }
 
         /**
-         * Creates an implementation of {@link ICronetEngineBuilder} that can be used
+         * Creates an implementation of {@link IHttpEngineBuilder} that can be used
          * to delegate the builder calls to.
          *
          * @param context Android Context to use.
-         * @return the created {@code ICronetEngineBuilder}.
+         * @return the created {@link IHttpEngineBuilder}.
          */
-        private static ICronetEngineBuilder createBuilderDelegate(Context context) {
+        private static IHttpEngineBuilder createBuilderDelegate(Context context) {
             // TODO class name
             try {
                 Class<?> clazz = context.getClassLoader().loadClass(
                         "org.chromium.net.impl.NativeCronetEngineBuilderImpl");
 
-                return (ICronetEngineBuilder) clazz.getConstructor(Context.class).newInstance(
+                return (IHttpEngineBuilder) clazz.getConstructor(Context.class).newInstance(
                         context);
             } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
                 throw new IllegalArgumentException(e);
@@ -380,19 +372,18 @@ public abstract class CronetEngine {
     public abstract String getVersionString();
 
     /**
-     * Shuts down the {@link CronetEngine} if there are no active requests,
+     * Shuts down the {@link HttpEngine} if there are no active requests,
      * otherwise throws an exception.
      *
-     * Cannot be called on network thread - the thread Cronet calls into
+     * Cannot be called on network thread - the thread the HTTP stack calls into
      * Executor on (which is different from the thread the Executor invokes
-     * callbacks on). May block until all the {@code CronetEngine}'s
-     * resources have been cleaned up.
+     * callbacks on). May block until all the {@link HttpEngine} resources have been cleaned up.
      */
     public abstract void shutdown();
 
     /**
      * Starts NetLog logging to a file. The NetLog will contain events emitted
-     * by all live CronetEngines. The NetLog is useful for debugging.
+     * by all live {@link HttpEngine} instances. The NetLog is useful for debugging.
      * The file can be viewed using a Chrome browser navigated to
      * chrome://net-internals/#import
      * @param fileName the complete file path. It must not be empty. If the file
@@ -404,14 +395,18 @@ public abstract class CronetEngine {
      *            only be used with the user's consent and in situations where the log
      *            won't be public.
      *            {@code false} to just include basic events.
+     *
+     * {@hide}
      */
-    public abstract void startNetLogToFile(String fileName, boolean logAll);
+    public void startNetLogToFile(String fileName, boolean logAll) {}
 
     /**
      * Stops NetLog logging and flushes file to disk. If a logging session is
      * not in progress, this call is ignored.
+     *
+     * {@hide}
      */
-    public abstract void stopNetLog();
+    public void stopNetLog() {}
 
     /**
      * Returns differences in metrics collected by Cronet since the last call to
@@ -419,7 +414,7 @@ public abstract class CronetEngine {
      * <p>
      * Cronet collects these metrics globally. This means deltas returned by
      * {@code getGlobalMetricsDeltas()} will include measurements of requests
-     * processed by other {@link CronetEngine} instances. Since this function
+     * processed by other {@link HttpEngine} instances. Since this function
      * returns differences in metrics collected since the last call, and these
      * metrics are collected globally, a call to any {@code CronetEngine}
      * instance's {@code getGlobalMetricsDeltas()} method will affect the deltas
@@ -433,18 +428,23 @@ public abstract class CronetEngine {
      * @return differences in metrics collected by Cronet, since the last call
      *         to {@code getGlobalMetricsDeltas()}, serialized as a
      *         <a href=https://developers.google.com/protocol-buffers>protobuf
-     *         </a>.
+     *         </a>, or an empty array if collecting metrics is not supported.
+     *
+     * {@hide}
      */
-    public abstract byte[] getGlobalMetricsDeltas();
+    public byte[] getGlobalMetricsDeltas() {
+        return new byte[0];
+    }
 
     /**
      * Establishes a new connection to the resource specified by the {@link URL} {@code url}.
      * <p>
-     * <b>Note:</b> Cronet's {@link java.net.HttpURLConnection} implementation is subject to certain
+     * <b>Note:</b> This {@link java.net.HttpURLConnection} implementation is subject to certain
      * limitations, see {@link #createURLStreamHandlerFactory} for details.
      *
      * @param url URL of resource to connect to.
-     * @return an {@link java.net.HttpURLConnection} instance implemented by this CronetEngine.
+     * @return an {@link java.net.HttpURLConnection} instance implemented
+     *     by this {@link HttpEngine}.
      * @throws IOException if an error occurs while opening the connection.
      */
     public abstract URLConnection openConnection(URL url) throws IOException;
@@ -452,10 +452,11 @@ public abstract class CronetEngine {
     /**
      * Creates a {@link URLStreamHandlerFactory} to handle HTTP and HTTPS
      * traffic. An instance of this class can be installed via
-     * {@link URL#setURLStreamHandlerFactory} thus using this CronetEngine by default for
+     * {@link URL#setURLStreamHandlerFactory} thus using this {@link HttpEngine} by default for
      * all requests created via {@link URL#openConnection}.
      * <p>
-     * Cronet does not use certain HTTP features provided via the system:
+     * This {@link java.net.HttpURLConnection} implementation does not implement all features
+     * offered by the API:
      * <ul>
      * <li>the HTTP cache installed via
      *     {@link HttpResponseCache#install(java.io.File, long) HttpResponseCache.install()}</li>
@@ -464,10 +465,9 @@ public abstract class CronetEngine {
      * <li>the HTTP cookie storage installed via {@link java.net.CookieHandler#setDefault}</li>
      * </ul>
      * <p>
-     * While Cronet supports and encourages requests using the HTTPS protocol,
-     * Cronet does not provide support for the
-     * {@link HttpsURLConnection} API. This lack of support also
-     * includes not using certain HTTPS features provided via the system:
+     * While we support and encourages requests using the HTTPS protocol, we don't provide support
+     * for the {@link HttpsURLConnection} API. This lack of support also includes not using certain
+     * HTTPS features provided via {@link HttpsURLConnection}:
      * <ul>
      * <li>the HTTPS hostname verifier installed via {@link
      *   HttpsURLConnection#setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)
@@ -478,7 +478,7 @@ public abstract class CronetEngine {
      * </ul>
      *
      * @return an {@link URLStreamHandlerFactory} instance implemented by this
-     *         CronetEngine.
+     *         {@link HttpEngine}.
      */
     public abstract URLStreamHandlerFactory createURLStreamHandlerFactory();
 
diff --git a/components/cronet/android/api/src/android/net/http/CronetException.java b/components/cronet/android/api/src/android/net/http/HttpException.java
similarity index 86%
rename from components/cronet/android/api/src/android/net/http/CronetException.java
rename to components/cronet/android/api/src/android/net/http/HttpException.java
index 127a6623..273eefb8 100644
--- a/components/cronet/android/api/src/android/net/http/CronetException.java
+++ b/components/cronet/android/api/src/android/net/http/HttpException.java
@@ -9,7 +9,7 @@ import java.io.IOException;
 /**
  * Base exception passed to {@link UrlRequest.Callback#onFailed UrlRequest.Callback.onFailed()}.
  */
-public class CronetException extends IOException {
+public class HttpException extends IOException {
     /**
      * Constructs an exception that is caused by {@code cause}.
      *
@@ -18,7 +18,7 @@ public class CronetException extends IOException {
      *         java.io.IOException#getCause getCause()} method). A null value is permitted, and
      *         indicates that the cause is nonexistent or unknown.
      */
-    protected CronetException(String message, Throwable cause) {
+    protected HttpException(String message, Throwable cause) {
         super(message, cause);
     }
 }
diff --git a/components/cronet/android/api/src/android/net/http/ICronetEngineBuilder.java b/components/cronet/android/api/src/android/net/http/IHttpEngineBuilder.java
similarity index 59%
rename from components/cronet/android/api/src/android/net/http/ICronetEngineBuilder.java
rename to components/cronet/android/api/src/android/net/http/IHttpEngineBuilder.java
index b9f78129..3c8395b0 100644
--- a/components/cronet/android/api/src/android/net/http/ICronetEngineBuilder.java
+++ b/components/cronet/android/api/src/android/net/http/IHttpEngineBuilder.java
@@ -8,15 +8,15 @@ import java.util.Collections;
 import java.util.Set;
 
 /**
- * Defines methods that the actual implementation of {@link CronetEngine.Builder} has to implement.
- * {@code CronetEngine.Builder} uses this interface to delegate the calls.
+ * Defines methods that the actual implementation of {@link HttpEngine.Builder} has to implement.
+ * {@link HttpEngine.Builder} uses this interface to delegate the calls.
  * For the documentation of individual methods, please see the identically named methods in
- * {@link CronetEngine.Builder} and
- * {@link ExperimentalCronetEngine.Builder}.
+ * {@link HttpEngine.Builder} and
+ * {@link ExperimentalHttpEngine.Builder}.
  *
  * <p>{@hide internal class}
  */
-public abstract class ICronetEngineBuilder {
+public abstract class IHttpEngineBuilder {
     // The fields below list values which are known to getSupportedConfigOptions().
     //
     // Given the fields are final the constant value associated with them is compiled into
@@ -29,48 +29,48 @@ public abstract class ICronetEngineBuilder {
     public static final int QUIC_OPTIONS = 3;
 
     // Public API methods.
-    public abstract ICronetEngineBuilder addPublicKeyPins(String hostName, Set<byte[]> pinsSha256,
+    public abstract IHttpEngineBuilder addPublicKeyPins(String hostName, Set<byte[]> pinsSha256,
             boolean includeSubdomains, Instant expirationInstant);
 
-    public abstract ICronetEngineBuilder addQuicHint(String host, int port, int alternatePort);
+    public abstract IHttpEngineBuilder addQuicHint(String host, int port, int alternatePort);
 
-    public abstract ICronetEngineBuilder enableHttp2(boolean value);
+    public abstract IHttpEngineBuilder enableHttp2(boolean value);
 
-    public abstract ICronetEngineBuilder enableHttpCache(int cacheMode, long maxSize);
+    public abstract IHttpEngineBuilder enableHttpCache(int cacheMode, long maxSize);
 
-    public abstract ICronetEngineBuilder enablePublicKeyPinningBypassForLocalTrustAnchors(
+    public abstract IHttpEngineBuilder enablePublicKeyPinningBypassForLocalTrustAnchors(
             boolean value);
 
-    public abstract ICronetEngineBuilder enableQuic(boolean value);
+    public abstract IHttpEngineBuilder enableQuic(boolean value);
 
-    public abstract ICronetEngineBuilder enableSdch(boolean value);
+    public abstract IHttpEngineBuilder enableSdch(boolean value);
 
-    public ICronetEngineBuilder enableBrotli(boolean value) {
+    public IHttpEngineBuilder enableBrotli(boolean value) {
         // Do nothing for older implementations.
         return this;
     }
 
-    public ICronetEngineBuilder setQuicOptions(QuicOptions quicOptions) {
+    public IHttpEngineBuilder setQuicOptions(QuicOptions quicOptions) {
         return this;
     }
 
-    public ICronetEngineBuilder setDnsOptions(DnsOptions dnsOptions) {
+    public IHttpEngineBuilder setDnsOptions(DnsOptions dnsOptions) {
         return this;
     }
 
-    public ICronetEngineBuilder setConnectionMigrationOptions(
+    public IHttpEngineBuilder setConnectionMigrationOptions(
             ConnectionMigrationOptions connectionMigrationOptions) {
         return this;
     }
 
-    public abstract ICronetEngineBuilder setExperimentalOptions(String options);
-    public abstract ICronetEngineBuilder setStoragePath(String value);
+    public abstract IHttpEngineBuilder setExperimentalOptions(String options);
+    public abstract IHttpEngineBuilder setStoragePath(String value);
 
-    public abstract ICronetEngineBuilder setUserAgent(String userAgent);
+    public abstract IHttpEngineBuilder setUserAgent(String userAgent);
 
     public abstract String getDefaultUserAgent();
 
-    public abstract ExperimentalCronetEngine build();
+    public abstract ExperimentalHttpEngine build();
 
     /**
      * Returns the set of configuration options the builder is able to support natively. This is
@@ -89,11 +89,11 @@ public abstract class ICronetEngineBuilder {
     // removing the experimental methods from the implementation layer without breaking
     // the client.
 
-    public ICronetEngineBuilder enableNetworkQualityEstimator(boolean value) {
+    public IHttpEngineBuilder enableNetworkQualityEstimator(boolean value) {
         return this;
     }
 
-    public ICronetEngineBuilder setThreadPriority(int priority) {
+    public IHttpEngineBuilder setThreadPriority(int priority) {
         return this;
     }
 }
\ No newline at end of file
diff --git a/components/cronet/android/api/src/android/net/http/NetworkException.java b/components/cronet/android/api/src/android/net/http/NetworkException.java
index 3b5a19eb..4e5c0301 100644
--- a/components/cronet/android/api/src/android/net/http/NetworkException.java
+++ b/components/cronet/android/api/src/android/net/http/NetworkException.java
@@ -6,12 +6,10 @@ package android.net.http;
 
 /**
  * Exception passed to {@link UrlRequest.Callback#onFailed UrlRequest.Callback.onFailed()} when
- * Cronet fails to process a network request. In this case {@link #getErrorCode} and
- * {@link #getCronetInternalErrorCode} can be used to get more information about the specific
- * type of failure. If {@link #getErrorCode} returns {@link #ERROR_QUIC_PROTOCOL_FAILED},
- * this exception can be cast to a {@link QuicException} which can provide further details.
+ * the HTTP stack fails to process a network request. In this case {@link #getErrorCode} can be used
+ * to get more information about the specific type of failure.
  */
-public abstract class NetworkException extends CronetException {
+public abstract class NetworkException extends HttpException {
     /**
      * Error code indicating the host being sent the request could not be resolved to an IP address.
      */
@@ -61,7 +59,7 @@ public abstract class NetworkException extends CronetException {
     public static final int ERROR_QUIC_PROTOCOL_FAILED = 10;
     /**
      * Error code indicating another type of error was encountered.
-     * {@link #getCronetInternalErrorCode} can be consulted to get a more specific cause.
+     * {@link #getInternalErrorCode} can be consulted to get a more specific cause.
      */
     public static final int ERROR_OTHER = 11;
 
@@ -85,15 +83,19 @@ public abstract class NetworkException extends CronetException {
     public abstract int getErrorCode();
 
     /**
-     * Returns a Cronet internal error code. This may provide more specific error
-     * diagnosis than {@link #getErrorCode}, but the constant values are not exposed to Java and
+     * Returns an internal error code. This may provide more specific error
+     * diagnosis than {@link #getErrorCode}, but the constant values are not exposed publicly and
      * may change over time. See
      * <a href=https://chromium.googlesource.com/chromium/src/+/main/net/base/net_error_list.h>
-     * here</a> for the lastest list of values.
+     * here</a> for the latest list of values.
      *
-     * @return Cronet internal error code.
+     * @return internal error code or 0 if the internal error code is unknown
+     *
+     * {@hide as semantics aren't stable}
      */
-    public abstract int getCronetInternalErrorCode();
+    public int getInternalErrorCode() {
+        return 0;
+    }
 
     /**
      * Returns {@code true} if retrying this request right away might succeed, {@code false}
diff --git a/components/cronet/android/api/src/android/net/http/QuicOptions.java b/components/cronet/android/api/src/android/net/http/QuicOptions.java
index 7e9b9f70..9b46d236 100644
--- a/components/cronet/android/api/src/android/net/http/QuicOptions.java
+++ b/components/cronet/android/api/src/android/net/http/QuicOptions.java
@@ -12,11 +12,11 @@ import java.util.LinkedHashSet;
 import java.util.Set;
 
 /**
- * Configuration options for QUIC in Cronet.
+ * Configuration options for QUIC.
  *
  * <p>The settings in this class are only relevant if QUIC is enabled. Use
- * {@link CronetEngine.Builder#enableQuic(boolean)} to enable / disable QUIC for
- * the Cronet engine.
+ * {@link HttpEngine.Builder#enableQuic(boolean)} to enable / disable QUIC for
+ * the HTTP engine.
  */
 public class QuicOptions {
     private final Set<String> mQuicHostAllowlist;
@@ -317,7 +317,7 @@ public class QuicOptions {
          * Adds a host to the QUIC allowlist.
          *
          * <p>If no hosts are specified, the per-host allowlist functionality is disabled.
-         * Otherwise, Cronet will only use QUIC when talking to hosts on the allowlist.
+         * Otherwise, the HTTP stack will only use QUIC when talking to hosts on the allowlist.
          *
          * @return the builder for chaining
          */
@@ -329,13 +329,13 @@ public class QuicOptions {
         /**
          * Adds a QUIC version to the list of QUIC versions to enable.
          *
-         * <p>If no versions are specified, Cronet will use a list of default QUIC versions.
+         * <p>If no versions are specified, the HTTP stack will use a list of default QUIC versions.
          *
          * <p>The version format is specified by
          * <a
          * href="https://github.com/google/quiche/blob/main/quiche/quic/core/quic_versions.cc#L344">QUICHE</a>.
-         * Outside of filtering out values known to be obsolete, Cronet doesn't process the versions
-         * anyhow and simply passes them along to QUICHE.
+         * Outside of filtering out values known to be obsolete, the values are passed along
+         * to QUICHE without further processing.
          *
          * @return the builder for chaining
          *
@@ -354,10 +354,10 @@ public class QuicOptions {
          * (for instance, {@code NBHD}).
          *
          * <p>As the QUIC tags are under active development and some are only relevant to the
-         * server, Cronet doesn't attempt to maintain a complete list of all supported QUIC flags as
-         * a part of the API. The flags. Flags supported by QUICHE, a QUIC implementation used by
-         * Cronet and Google servers, can be found <a
-         * href=https://github.com/google/quiche/blob/main/quiche/quic/core/crypto/crypto_protocol.h">here</a>.
+         * server, the HTTP stack doesn't attempt to maintain a complete list of all supported QUIC
+         * flags as a part of the API. The flags. Flags supported by QUICHE, a QUIC implementation
+         * used by this HTTP stack and Google servers, can be found
+         * <a href=https://github.com/google/quiche/blob/main/quiche/quic/core/crypto/crypto_protocol.h">here</a>.
          *
          * @return the builder for chaining
          *
@@ -387,9 +387,8 @@ public class QuicOptions {
          * Sets how many server configurations (metadata like list of alt svc, whether QUIC is
          * supported, etc.) should be held in memory.
          *
-         * <p>If the storage path is set ({@link
-         * CronetEngine.Builder#setStoragePath(String)}, Cronet will also persist
-         * the server configurations on disk.
+         * <p>If the storage path is set ({@link HttpEngine.Builder#setStoragePath(String)},
+         * the HTTP stack will also persist the server configurations on disk.
          *
          * @return the builder for chaining
          */
@@ -403,7 +402,7 @@ public class QuicOptions {
          * handshakes).
          *
          * <p>To set the default user agent for HTTP requests, use
-         * {@link CronetEngine.Builder#setUserAgent(String)} instead.
+         * {@link HttpEngine.Builder#setUserAgent(String)} instead.
          *
          * @return the builder for chaining
          */
@@ -490,8 +489,8 @@ public class QuicOptions {
         /**
          * Sets the maximum desired time between packets on wire.
          *
-         * <p>When the retransmittable-on-wire time is exceeded Cronet will probe quality of the
-         * network using artificial traffic. Smaller timeouts will typically  result in faster
+         * <p>When the retransmittable-on-wire time is exceeded the HTTP stack will probe quality
+         * of the network using artificial traffic. Smaller timeouts will typically result in faster
          * discovery of a broken or degrading path, but also larger usage of resources (battery,
          * data).
          *
@@ -539,15 +538,15 @@ public class QuicOptions {
         }
 
         /**
-         * Sets the initial for which Cronet shouldn't attempt to use QUIC for a given server after
-         * the server's QUIC support turned out to be broken.
+         * Sets the initial for which the HTTP stack shouldn't attempt to use QUIC for a given
+         * server after the server's QUIC support turned out to be broken.
          *
-         * <p>Once Cronet detects that a server advertises QUIC but doesn't actually speak it, it
-         * marks the server as broken and doesn't attempt to use QUIC when talking to the server for
-         * an amount of time. Once Cronet is past this point it will try using QUIC again. This is
-         * to balance short term (there's no point wasting resources to try QUIC if the server is
-         * broken) and long term (the breakage might have been temporary, using QUIC is generally
-         * beneficial) interests.
+         * <p>Once the HTTP stack detects that a server advertises QUIC but doesn't actually speak
+         * it, it marks the server as broken and doesn't attempt to use QUIC when talking
+         * to the server for an amount of time. Once past this point it will try using QUIC again.
+         * This is to balance short term (there's no point wasting resources to try QUIC
+         * if the server is broken) and long term (the breakage might have been temporary, using
+         * QUIC is generally beneficial) interests.
          *
          * <p>The delay is increased every unsuccessful consecutive retry. See
          * {@link #increaseBrokenServicePeriodExponentially(boolean)} for details.
@@ -584,8 +583,8 @@ public class QuicOptions {
         }
 
         /**
-         * Sets whether Cronet should wait for the primary path (usually QUIC) to be ready even if
-         * there's a secondary path of reaching the server (SPDY / HTTP2) which is ready
+         * Sets whether the HTTP stack should wait for the primary path (usually QUIC) to be ready
+         * even if there's a secondary path of reaching the server (SPDY / HTTP2) which is ready
          * immediately.
          *
          * @return the builder for chaining
diff --git a/components/cronet/android/api/src/android/net/http/RequestFinishedInfo.java b/components/cronet/android/api/src/android/net/http/RequestFinishedInfo.java
index 80651139..59ab9d8d 100644
--- a/components/cronet/android/api/src/android/net/http/RequestFinishedInfo.java
+++ b/components/cronet/android/api/src/android/net/http/RequestFinishedInfo.java
@@ -292,11 +292,11 @@ public abstract class RequestFinishedInfo {
     public abstract UrlResponseInfo getResponseInfo();
 
     /**
-     * If the request failed, returns the same {@link CronetException} provided to
+     * If the request failed, returns the same {@link HttpException} provided to
      * {@link UrlRequest.Callback#onFailed}.
      *
-     * @return the request's {@link CronetException}, if the request failed
+     * @return the request's {@link HttpException}, if the request failed
      */
     @Nullable
-    public abstract CronetException getException();
+    public abstract HttpException getException();
 }
diff --git a/components/cronet/android/api/src/android/net/http/UrlRequest.java b/components/cronet/android/api/src/android/net/http/UrlRequest.java
index 99634a45..b29951c7 100644
--- a/components/cronet/android/api/src/android/net/http/UrlRequest.java
+++ b/components/cronet/android/api/src/android/net/http/UrlRequest.java
@@ -10,15 +10,15 @@ import java.util.concurrent.Executor;
 /**
  * Controls an HTTP request (GET, PUT, POST etc).
  * Created by {@link UrlRequest.Builder}, which can be obtained by calling
- * {@link CronetEngine#newUrlRequestBuilder}.
+ * {@link HttpEngine#newUrlRequestBuilder}.
  * Note: All methods must be called on the {@link Executor} passed to
- * {@link CronetEngine#newUrlRequestBuilder}.
+ * {@link HttpEngine#newUrlRequestBuilder}.
  */
 public abstract class UrlRequest {
     /**
      * Builder for {@link UrlRequest}s. Allows configuring requests before constructing them
      * with {@link Builder#build}. The builder can be created by calling
-     * {@link CronetEngine#newUrlRequestBuilder}.
+     * {@link HttpEngine#newUrlRequestBuilder}.
      */
     public abstract static class Builder {
         /**
@@ -120,7 +120,7 @@ public abstract class UrlRequest {
     }
 
     /**
-     * Users of Cronet extend this class to receive callbacks indicating the
+     * Users of the HTTP stack extend this class to receive callbacks indicating the
      * progress of a {@link UrlRequest} being processed. An instance of this class
      * is passed in to {@link UrlRequest.Builder}'s constructor when
      * constructing the {@code UrlRequest}.
@@ -215,7 +215,7 @@ public abstract class UrlRequest {
          * @param error information about error.
          */
         public abstract void onFailed(
-                UrlRequest request, UrlResponseInfo info, CronetException error);
+                UrlRequest request, UrlResponseInfo info, HttpException error);
 
         /**
          * Invoked if request was canceled via {@link UrlRequest#cancel}. Once
diff --git a/components/cronet/android/api/src/android/net/http/apihelpers/ByteArrayCronetCallback.java b/components/cronet/android/api/src/android/net/http/apihelpers/ByteArrayCallback.java
similarity index 62%
rename from components/cronet/android/api/src/android/net/http/apihelpers/ByteArrayCronetCallback.java
rename to components/cronet/android/api/src/android/net/http/apihelpers/ByteArrayCallback.java
index 855d5ddd..2adfd0fa 100644
--- a/components/cronet/android/api/src/android/net/http/apihelpers/ByteArrayCronetCallback.java
+++ b/components/cronet/android/api/src/android/net/http/apihelpers/ByteArrayCallback.java
@@ -7,13 +7,13 @@ package android.net.http.apihelpers;
 import android.net.http.UrlResponseInfo;
 
 /**
- * A specialization of {@link InMemoryTransformCronetCallback} which returns the body bytes
+ * A specialization of {@link InMemoryTransformCallback} which returns the body bytes
  * verbatim without any interpretation.
  */
-public abstract class ByteArrayCronetCallback extends InMemoryTransformCronetCallback<byte[]> {
+public abstract class ByteArrayCallback extends InMemoryTransformCallback<byte[]> {
     @Override // Override to return the subtype
-    public ByteArrayCronetCallback addCompletionListener(
-            CronetRequestCompletionListener<? super byte[]> listener) {
+    public ByteArrayCallback addCompletionListener(
+            RequestCompletionListener<? super byte[]> listener) {
         super.addCompletionListener(listener);
         return this;
     }
diff --git a/components/cronet/android/api/src/android/net/http/apihelpers/CronetResponse.java b/components/cronet/android/api/src/android/net/http/apihelpers/HttpResponse.java
similarity index 84%
rename from components/cronet/android/api/src/android/net/http/apihelpers/CronetResponse.java
rename to components/cronet/android/api/src/android/net/http/apihelpers/HttpResponse.java
index 97517a4a..68662b00 100644
--- a/components/cronet/android/api/src/android/net/http/apihelpers/CronetResponse.java
+++ b/components/cronet/android/api/src/android/net/http/apihelpers/HttpResponse.java
@@ -11,17 +11,17 @@ import android.net.http.UrlResponseInfo;
 import java.util.Objects;
 
 /**
- * A helper object encompassing the headers, body and metadata of a response to Cronet URL requests.
+ * A helper object encompassing the headers, body and metadata of a response to HTTP URL requests.
  *
  * @param <T> the response body type
  */
-public class CronetResponse<T> {
+public class HttpResponse<T> {
     /** The headers and other metadata of the response. */
     private final UrlResponseInfo mUrlResponseInfo;
     /** The full body of the response, after performing a user-defined deserialization. */
     private final @Nullable T mResponseBody;
 
-    CronetResponse(UrlResponseInfo urlResponseInfo, @Nullable T responseBody) {
+    HttpResponse(UrlResponseInfo urlResponseInfo, @Nullable T responseBody) {
         this.mUrlResponseInfo = urlResponseInfo;
         this.mResponseBody = responseBody;
     }
@@ -39,8 +39,8 @@ public class CronetResponse<T> {
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
-        if (!(o instanceof CronetResponse)) return false;
-        CronetResponse<?> that = (CronetResponse<?>) o;
+        if (!(o instanceof HttpResponse)) return false;
+        HttpResponse<?> that = (HttpResponse<?>) o;
         return Objects.equals(mUrlResponseInfo, that.mUrlResponseInfo)
                 && Objects.equals(mResponseBody, that.mResponseBody);
     }
diff --git a/components/cronet/android/api/src/android/net/http/apihelpers/ImplicitFlowControlCallback.java b/components/cronet/android/api/src/android/net/http/apihelpers/ImplicitFlowControlCallback.java
index 8c5d838b..9737542b 100644
--- a/components/cronet/android/api/src/android/net/http/apihelpers/ImplicitFlowControlCallback.java
+++ b/components/cronet/android/api/src/android/net/http/apihelpers/ImplicitFlowControlCallback.java
@@ -5,7 +5,7 @@
 package android.net.http.apihelpers;
 
 import android.net.http.CallbackException;
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 import android.net.http.UrlRequest;
 
 import androidx.annotation.Nullable;
@@ -37,8 +37,8 @@ public abstract class ImplicitFlowControlCallback extends UrlRequest.Callback {
 
     /**
      * Invoked when the final set of headers, after all redirects, is received. Will only be invoked
-     * once for each request. It's guaranteed that Cronet doesn't start reading the body until this
-     * method returns.
+     * once for each request. It's guaranteed that the HTTP stack doesn't start reading the body
+     * until this method returns.
      *
      * @param info Response information.
      * @throws Exception if an error occurs while processing response start. {@link #onFailed} will
@@ -79,7 +79,7 @@ public abstract class ImplicitFlowControlCallback extends UrlRequest.Callback {
      * @param info Response information. May be {@code null} if no response was received.
      * @param exception information about error.
      */
-    protected abstract void onFailed(@Nullable UrlResponseInfo info, CronetException exception);
+    protected abstract void onFailed(@Nullable UrlResponseInfo info, HttpException exception);
 
     /**
      * Invoked if request was canceled via {@link UrlRequest#cancel}. Once invoked, no other {@link
@@ -120,7 +120,7 @@ public abstract class ImplicitFlowControlCallback extends UrlRequest.Callback {
     }
 
     @Override
-    public final void onFailed(UrlRequest request, UrlResponseInfo info, CronetException error) {
+    public final void onFailed(UrlRequest request, UrlResponseInfo info, HttpException error) {
         onFailed(info, error);
     }
 
diff --git a/components/cronet/android/api/src/android/net/http/apihelpers/InMemoryTransformCronetCallback.java b/components/cronet/android/api/src/android/net/http/apihelpers/InMemoryTransformCallback.java
similarity index 80%
rename from components/cronet/android/api/src/android/net/http/apihelpers/InMemoryTransformCronetCallback.java
rename to components/cronet/android/api/src/android/net/http/apihelpers/InMemoryTransformCallback.java
index 2383e33a..e83fa446 100644
--- a/components/cronet/android/api/src/android/net/http/apihelpers/InMemoryTransformCronetCallback.java
+++ b/components/cronet/android/api/src/android/net/http/apihelpers/InMemoryTransformCallback.java
@@ -6,7 +6,7 @@ package android.net.http.apihelpers;
 
 import androidx.annotation.Nullable;
 
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 import android.net.http.UrlResponseInfo;
 
 import java.io.ByteArrayOutputStream;
@@ -18,16 +18,16 @@ import java.util.List;
 import java.util.Set;
 
 /**
- * An abstract Cronet callback that reads the entire body to memory and optionally deserializes the
+ * An abstract callback that reads the entire body to memory and optionally deserializes the
  * body before passing it back to the issuer of the HTTP request.
  *
- * <p>The requester can subscribe for updates about the request by adding completion mListeners on
- * the callback. When the request reaches a terminal state, the mListeners are informed in order of
+ * <p>The requester can subscribe for updates about the request by adding completion listeners on
+ * the callback. When the request reaches a terminal state, the listeners are informed in order of
  * addition.
  *
  * @param <T> the response body type
  */
-public abstract class InMemoryTransformCronetCallback<T> extends ImplicitFlowControlCallback {
+public abstract class InMemoryTransformCallback<T> extends ImplicitFlowControlCallback {
     private static final String CONTENT_LENGTH_HEADER_NAME = "Content-Length";
     // See ArrayList.MAX_ARRAY_SIZE for reasoning.
     private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
@@ -36,14 +36,14 @@ public abstract class InMemoryTransformCronetCallback<T> extends ImplicitFlowCon
     private WritableByteChannel mResponseBodyChannel;
 
     /** The set of listeners observing the associated request. */
-    private final Set<CronetRequestCompletionListener<? super T>> mListeners =
+    private final Set<RequestCompletionListener<? super T>> mListeners =
             new LinkedHashSet<>();
 
     /**
      * Transforms (deserializes) the plain full body into a user-defined object.
      *
      * <p>It is assumed that the implementing classes handle edge cases (such as empty and malformed
-     * bodies) appropriately. Cronet doesn't inspects the objects and passes them (or any
+     * bodies) appropriately. The HTTP stack doesn't inspect the objects and passes them (or any
      * exceptions) along to the issuer of the request.
      */
     protected abstract T transformBodyBytes(UrlResponseInfo info, byte[] bodyBytes);
@@ -53,10 +53,10 @@ public abstract class InMemoryTransformCronetCallback<T> extends ImplicitFlowCon
      * state, in order of addition. If a listener is added multiple times, it will only be called
      * once according to the first time it was added.
      *
-     * @see CronetRequestCompletionListener
+     * @see RequestCompletionListener
      */
     public ImplicitFlowControlCallback addCompletionListener(
-            CronetRequestCompletionListener<? super T> listener) {
+            RequestCompletionListener<? super T> listener) {
         mListeners.add(listener);
         return this;
     }
@@ -81,21 +81,21 @@ public abstract class InMemoryTransformCronetCallback<T> extends ImplicitFlowCon
     @Override
     protected final void onSucceeded(UrlResponseInfo info) {
         T body = transformBodyBytes(info, mResponseBodyStream.toByteArray());
-        for (CronetRequestCompletionListener<? super T> callback : mListeners) {
+        for (RequestCompletionListener<? super T> callback : mListeners) {
             callback.onSucceeded(info, body);
         }
     }
 
     @Override
-    protected final void onFailed(@Nullable UrlResponseInfo info, CronetException exception) {
-        for (CronetRequestCompletionListener<? super T> callback : mListeners) {
+    protected final void onFailed(@Nullable UrlResponseInfo info, HttpException exception) {
+        for (RequestCompletionListener<? super T> callback : mListeners) {
             callback.onFailed(info, exception);
         }
     }
 
     @Override
     protected final void onCanceled(@Nullable UrlResponseInfo info) {
-        for (CronetRequestCompletionListener<? super T> callback : mListeners) {
+        for (RequestCompletionListener<? super T> callback : mListeners) {
             callback.onCanceled(info);
         }
     }
diff --git a/components/cronet/android/api/src/android/net/http/apihelpers/JsonCronetCallback.java b/components/cronet/android/api/src/android/net/http/apihelpers/JsonCallback.java
similarity index 71%
rename from components/cronet/android/api/src/android/net/http/apihelpers/JsonCronetCallback.java
rename to components/cronet/android/api/src/android/net/http/apihelpers/JsonCallback.java
index 51ae9d2c..06f24412 100644
--- a/components/cronet/android/api/src/android/net/http/apihelpers/JsonCronetCallback.java
+++ b/components/cronet/android/api/src/android/net/http/apihelpers/JsonCallback.java
@@ -10,11 +10,11 @@ import org.json.JSONObject;
 import android.net.http.UrlResponseInfo;
 
 /**
- * A specialization of {@link InMemoryTransformCronetCallback} that interprets the response body as
+ * A specialization of {@link InMemoryTransformCallback} that interprets the response body as
  * JSON.
  */
-public abstract class JsonCronetCallback extends InMemoryTransformCronetCallback<JSONObject> {
-    private static final StringCronetCallback STRING_CALLBACK = new StringCronetCallback() {
+public abstract class JsonCallback extends InMemoryTransformCallback<JSONObject> {
+    private static final StringCallback STRING_CALLBACK = new StringCallback() {
         @Override
         protected boolean shouldFollowRedirect(UrlResponseInfo info, String newLocationUrl) {
             throw new UnsupportedOperationException();
@@ -22,8 +22,8 @@ public abstract class JsonCronetCallback extends InMemoryTransformCronetCallback
     };
 
     @Override // Override to return the subtype
-    public JsonCronetCallback addCompletionListener(
-            CronetRequestCompletionListener<? super JSONObject> listener) {
+    public JsonCallback addCompletionListener(
+            RequestCompletionListener<? super JSONObject> listener) {
         super.addCompletionListener(listener);
         return this;
     }
diff --git a/components/cronet/android/api/src/android/net/http/apihelpers/RedirectHandler.java b/components/cronet/android/api/src/android/net/http/apihelpers/RedirectHandler.java
index f42df0da..8f763836 100644
--- a/components/cronet/android/api/src/android/net/http/apihelpers/RedirectHandler.java
+++ b/components/cronet/android/api/src/android/net/http/apihelpers/RedirectHandler.java
@@ -7,7 +7,7 @@ package android.net.http.apihelpers;
 import android.net.http.UrlResponseInfo;
 
 /**
- * An interface for classes specifying how Cronet should behave on redirects.
+ * An interface for classes specifying how the HTTP stack should behave on redirects.
  */
 public interface RedirectHandler {
     /**
@@ -15,7 +15,7 @@ public interface RedirectHandler {
      *
      * @param info the response info of the redirect response
      * @param newLocationUrl the redirect location
-     * @return whether Cronet should follow teh redirect or not
+     * @return whether the redirect should be followed
      */
     boolean shouldFollowRedirect(UrlResponseInfo info, String newLocationUrl) throws Exception;
 }
diff --git a/components/cronet/android/api/src/android/net/http/apihelpers/CronetRequestCompletionListener.java b/components/cronet/android/api/src/android/net/http/apihelpers/RequestCompletionListener.java
similarity index 76%
rename from components/cronet/android/api/src/android/net/http/apihelpers/CronetRequestCompletionListener.java
rename to components/cronet/android/api/src/android/net/http/apihelpers/RequestCompletionListener.java
index 224d765e..5e73604a 100644
--- a/components/cronet/android/api/src/android/net/http/apihelpers/CronetRequestCompletionListener.java
+++ b/components/cronet/android/api/src/android/net/http/apihelpers/RequestCompletionListener.java
@@ -6,18 +6,18 @@ package android.net.http.apihelpers;
 
 import androidx.annotation.Nullable;
 
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 import android.net.http.UrlResponseInfo;
 
 /**
- * A completion listener for accepting the results of a Cronet request asynchronously.
+ * A completion listener for accepting the results of a the HTTP stack request asynchronously.
  *
- * <p>To attach to a Cronet request use {@link InMemoryTransformCronetCallback} and call {@link
- * InMemoryTransformCronetCallback#addCompletionListener}.
+ * <p>To attach to an HTTP request use {@link InMemoryTransformCallback} and call {@link
+ * InMemoryTransformCallback#addCompletionListener}.
  *
  * @param <T> the response body type
  */
-public interface CronetRequestCompletionListener<T> {
+public interface RequestCompletionListener<T> {
     /**
      * Invoked if request failed for any reason after starting the request. Once invoked, no other
      * methods will be invoked on this object. {@code exception} provides information
@@ -26,7 +26,7 @@ public interface CronetRequestCompletionListener<T> {
      * @param info Response information. May be {@code null} if no response was received.
      * @param exception detailed information about the error that occurred.
      */
-    void onFailed(@Nullable UrlResponseInfo info, CronetException exception);
+    void onFailed(@Nullable UrlResponseInfo info, HttpException exception);
 
     /**
      * Invoked if request was canceled via {@code UrlRequest#cancel}. Once invoked, no other
diff --git a/components/cronet/android/api/src/android/net/http/apihelpers/StringCronetCallback.java b/components/cronet/android/api/src/android/net/http/apihelpers/StringCallback.java
similarity index 85%
rename from components/cronet/android/api/src/android/net/http/apihelpers/StringCronetCallback.java
rename to components/cronet/android/api/src/android/net/http/apihelpers/StringCallback.java
index fba59dcd..60319dc1 100644
--- a/components/cronet/android/api/src/android/net/http/apihelpers/StringCronetCallback.java
+++ b/components/cronet/android/api/src/android/net/http/apihelpers/StringCallback.java
@@ -11,19 +11,19 @@ import java.util.List;
 import java.util.Map;
 
 /**
- * A specialization of {@link InMemoryTransformCronetCallback} that interprets the response body as
+ * A specialization of {@link InMemoryTransformCallback} that interprets the response body as
  * a string.
  *
  * <p>The charset used to decode the string is derived from the {@code Content-Type} header.
  */
-public abstract class StringCronetCallback extends InMemoryTransformCronetCallback<String> {
+public abstract class StringCallback extends InMemoryTransformCallback<String> {
     private static final String CONTENT_TYPE_HEADER_NAME = "Content-Type";
 
-    StringCronetCallback() {}
+    StringCallback() {}
 
     @Override
-    public StringCronetCallback addCompletionListener(
-            CronetRequestCompletionListener<? super String> listener) {
+    public StringCallback addCompletionListener(
+            RequestCompletionListener<? super String> listener) {
         super.addCompletionListener(listener);
         return this;
     }
diff --git a/components/cronet/android/api/src/android/net/http/apihelpers/UploadDataProviders.java b/components/cronet/android/api/src/android/net/http/apihelpers/UploadDataProviders.java
index f27bb3a1..0739a41a 100644
--- a/components/cronet/android/api/src/android/net/http/apihelpers/UploadDataProviders.java
+++ b/components/cronet/android/api/src/android/net/http/apihelpers/UploadDataProviders.java
@@ -105,9 +105,7 @@ public final class UploadDataProviders {
 
         @Override
         public void read(UploadDataSink uploadDataSink, ByteBuffer byteBuffer) throws IOException {
-            if (!byteBuffer.hasRemaining()) {
-                throw new IllegalStateException("Cronet passed a buffer with no bytes remaining");
-            }
+            checkHasBytesRemaining(byteBuffer);
             FileChannel channel = getChannel();
             int bytesRead = 0;
             while (bytesRead == 0) {
@@ -165,9 +163,7 @@ public final class UploadDataProviders {
 
         @Override
         public void read(UploadDataSink uploadDataSink, ByteBuffer byteBuffer) {
-            if (!byteBuffer.hasRemaining()) {
-                throw new IllegalStateException("Cronet passed a buffer with no bytes remaining");
-            }
+            checkHasBytesRemaining(byteBuffer);
             if (byteBuffer.remaining() >= mUploadBuffer.remaining()) {
                 byteBuffer.put(mUploadBuffer);
             } else {
@@ -186,6 +182,14 @@ public final class UploadDataProviders {
         }
     }
 
+    private static ByteBuffer checkHasBytesRemaining(ByteBuffer buffer) {
+        if (!buffer.hasRemaining()) {
+            throw new IllegalStateException("buffer with no bytes remaining");
+        }
+
+        return buffer;
+    }
+
     // Prevent instantiation
     private UploadDataProviders() {}
 }
diff --git a/components/cronet/android/api/src/android/net/http/apihelpers/UrlRequestCallbacks.java b/components/cronet/android/api/src/android/net/http/apihelpers/UrlRequestCallbacks.java
index 76a0e4cd..638fa67d 100644
--- a/components/cronet/android/api/src/android/net/http/apihelpers/UrlRequestCallbacks.java
+++ b/components/cronet/android/api/src/android/net/http/apihelpers/UrlRequestCallbacks.java
@@ -4,15 +4,17 @@
 
 package android.net.http.apihelpers;
 
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 
 import androidx.annotation.Nullable;
 
 import org.json.JSONObject;
 
+import android.net.http.UrlRequest;
 import android.net.http.UrlResponseInfo;
 
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
 import java.util.concurrent.Future;
 
 /**
@@ -25,47 +27,47 @@ import java.util.concurrent.Future;
  *
  * <p>The helper callbacks come in two flavors - either the caller provides a callback to be invoked
  * when the request finishes (successfully or not), or the caller is given a {@link Future} which
- * completes when Cronet finishes processing the request.
+ * completes when the HTTP stack finishes processing the request.
  */
 public class UrlRequestCallbacks {
-    public static ByteArrayCronetCallback forByteArrayBody(
-            RedirectHandler redirectHandler, CronetRequestCompletionListener<byte[]> listener) {
+    public static ByteArrayCallback forByteArrayBody(
+            RedirectHandler redirectHandler, RequestCompletionListener<byte[]> listener) {
         return newByteArrayCallback(redirectHandler).addCompletionListener(listener);
     }
 
-    public static CallbackAndResponseFuturePair<byte[], ByteArrayCronetCallback> forByteArrayBody(
+    public static CallbackAndResponseFuturePair<byte[], ByteArrayCallback> forByteArrayBody(
             RedirectHandler redirectHandler) {
-        ByteArrayCronetCallback callback = newByteArrayCallback(redirectHandler);
-        Future<CronetResponse<byte[]>> future = addResponseFutureListener(callback);
+        ByteArrayCallback callback = newByteArrayCallback(redirectHandler);
+        Future<HttpResponse<byte[]>> future = addResponseFutureListener(callback);
         return new CallbackAndResponseFuturePair<>(future, callback);
     }
 
-    public static StringCronetCallback forStringBody(
-            RedirectHandler redirectHandler, CronetRequestCompletionListener<String> listener) {
+    public static StringCallback forStringBody(
+            RedirectHandler redirectHandler, RequestCompletionListener<String> listener) {
         return newStringCallback(redirectHandler).addCompletionListener(listener);
     }
 
-    public static CallbackAndResponseFuturePair<String, StringCronetCallback> forStringBody(
+    public static CallbackAndResponseFuturePair<String, StringCallback> forStringBody(
             RedirectHandler redirectHandler) {
-        StringCronetCallback callback = newStringCallback(redirectHandler);
-        Future<CronetResponse<String>> future = addResponseFutureListener(callback);
+        StringCallback callback = newStringCallback(redirectHandler);
+        Future<HttpResponse<String>> future = addResponseFutureListener(callback);
         return new CallbackAndResponseFuturePair<>(future, callback);
     }
 
-    public static JsonCronetCallback forJsonBody(
-            RedirectHandler redirectHandler, CronetRequestCompletionListener<JSONObject> listener) {
+    public static JsonCallback forJsonBody(
+            RedirectHandler redirectHandler, RequestCompletionListener<JSONObject> listener) {
         return newJsonCallback(redirectHandler).addCompletionListener(listener);
     }
 
-    public static CallbackAndResponseFuturePair<JSONObject, JsonCronetCallback> forJsonBody(
+    public static CallbackAndResponseFuturePair<JSONObject, JsonCallback> forJsonBody(
             RedirectHandler redirectHandler) {
-        JsonCronetCallback callback = newJsonCallback(redirectHandler);
-        Future<CronetResponse<JSONObject>> future = addResponseFutureListener(callback);
+        JsonCallback callback = newJsonCallback(redirectHandler);
+        Future<HttpResponse<JSONObject>> future = addResponseFutureListener(callback);
         return new CallbackAndResponseFuturePair<>(future, callback);
     }
 
-    private static ByteArrayCronetCallback newByteArrayCallback(RedirectHandler redirectHandler) {
-        return new ByteArrayCronetCallback() {
+    private static ByteArrayCallback newByteArrayCallback(RedirectHandler redirectHandler) {
+        return new ByteArrayCallback() {
             @Override
             protected boolean shouldFollowRedirect(UrlResponseInfo info, String newLocationUrl)
                     throws Exception {
@@ -74,8 +76,8 @@ public class UrlRequestCallbacks {
         };
     }
 
-    private static StringCronetCallback newStringCallback(RedirectHandler redirectHandler) {
-        return new StringCronetCallback() {
+    private static StringCallback newStringCallback(RedirectHandler redirectHandler) {
+        return new StringCallback() {
             @Override
             protected boolean shouldFollowRedirect(UrlResponseInfo info, String newLocationUrl)
                     throws Exception {
@@ -84,8 +86,8 @@ public class UrlRequestCallbacks {
         };
     }
 
-    private static JsonCronetCallback newJsonCallback(RedirectHandler redirectHandler) {
-        return new JsonCronetCallback() {
+    private static JsonCallback newJsonCallback(RedirectHandler redirectHandler) {
+        return new JsonCallback() {
             @Override
             protected boolean shouldFollowRedirect(UrlResponseInfo info, String newLocationUrl)
                     throws Exception {
@@ -94,50 +96,50 @@ public class UrlRequestCallbacks {
         };
     }
 
-    private static <T> Future<CronetResponse<T>> addResponseFutureListener(
-            InMemoryTransformCronetCallback<T> callback) {
-        CompletableFuture<CronetResponse<T>> completableFuture = new CompletableFuture<>();
-        callback.addCompletionListener(new CronetRequestCompletionListener<T>() {
+    private static <T> Future<HttpResponse<T>> addResponseFutureListener(
+            InMemoryTransformCallback<T> callback) {
+        CompletableFuture<HttpResponse<T>> completableFuture = new CompletableFuture<>();
+        callback.addCompletionListener(new RequestCompletionListener<T>() {
             @Override
-            public void onFailed(@Nullable UrlResponseInfo info, CronetException exception) {
+            public void onFailed(@Nullable UrlResponseInfo info, HttpException exception) {
                 completableFuture.completeExceptionally(exception);
             }
 
             @Override
             public void onCanceled(@Nullable UrlResponseInfo info) {
                 completableFuture.completeExceptionally(
-                        new CronetException("The request was canceled!", null) {});
+                        new HttpException("The request was canceled!", null) {});
             }
 
             @Override
             public void onSucceeded(UrlResponseInfo info, T body) {
-                completableFuture.complete(new CronetResponse<>(info, body));
+                completableFuture.complete(new HttpResponse<>(info, body));
             }
         });
         return completableFuture;
     }
 
     /**
-     * A named pair-like structure encapsulating Cronet callbacks and associated response futures.
+     * A named pair-like structure encapsulating callbacks and associated response futures.
      *
-     * <p>The request should be used to pass to {@code CronetEngine.newUrlRequest()}, the future
+     * <p>The request should be used to pass to {@code HttpEngine#newUrlRequestBuilder}, the future
      * will contain the response to the request.
      *
      * @param <CallbackT> the subtype of the callback
      * @param <ResponseBodyT> The type of the deserialized response body
      */
     public static class CallbackAndResponseFuturePair<
-            ResponseBodyT, CallbackT extends InMemoryTransformCronetCallback<ResponseBodyT>> {
-        private final Future<CronetResponse<ResponseBodyT>> mFuture;
+            ResponseBodyT, CallbackT extends InMemoryTransformCallback<ResponseBodyT>> {
+        private final Future<HttpResponse<ResponseBodyT>> mFuture;
         private final CallbackT mCallback;
 
         CallbackAndResponseFuturePair(
-                Future<CronetResponse<ResponseBodyT>> future, CallbackT callback) {
+                Future<HttpResponse<ResponseBodyT>> future, CallbackT callback) {
             this.mFuture = future;
             this.mCallback = callback;
         }
 
-        public Future<CronetResponse<ResponseBodyT>> getFuture() {
+        public Future<HttpResponse<ResponseBodyT>> getFuture() {
             return mFuture;
         }
 
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/BidirectionalStreamBuilderImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/BidirectionalStreamBuilderImpl.java
index 182d170b..14dbb698 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/BidirectionalStreamBuilderImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/BidirectionalStreamBuilderImpl.java
@@ -7,7 +7,7 @@ import android.annotation.SuppressLint;
 import android.os.Build;
 
 import android.net.http.BidirectionalStream;
-import android.net.http.CronetEngine;
+import android.net.http.HttpEngine;
 import android.net.http.ExperimentalBidirectionalStream;
 
 import java.util.AbstractMap;
@@ -63,7 +63,7 @@ public class BidirectionalStreamBuilderImpl extends ExperimentalBidirectionalStr
      * different events
      *     occuring
      * @param executor the {@link Executor} on which {@code callback} methods will be invoked
-     * @param cronetEngine the {@link CronetEngine} used to create the stream
+     * @param cronetEngine the {@link HttpEngine} used to create the stream
      */
     BidirectionalStreamBuilderImpl(String url, BidirectionalStream.Callback callback,
             Executor executor, CronetEngineBase cronetEngine) {
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetBidirectionalStream.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetBidirectionalStream.java
index e50a00e5..a9e6b8e6 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetBidirectionalStream.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetBidirectionalStream.java
@@ -14,7 +14,7 @@ import org.chromium.base.annotations.NativeClassQualifiedName;
 import org.chromium.base.annotations.NativeMethods;
 import android.net.http.BidirectionalStream;
 import android.net.http.CallbackException;
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 import android.net.http.ExperimentalBidirectionalStream;
 import android.net.http.NetworkException;
 import android.net.http.RequestFinishedInfo;
@@ -100,7 +100,7 @@ public class CronetBidirectionalStream extends ExperimentalBidirectionalStream {
     private final boolean mTrafficStatsUidSet;
     private final int mTrafficStatsUid;
     private final long mNetworkHandle;
-    private CronetException mException;
+    private HttpException mException;
 
     /*
      * Synchronizes access to mNativeStream, mReadState and mWriteState.
@@ -780,7 +780,7 @@ public class CronetBidirectionalStream extends ExperimentalBidirectionalStream {
     /**
      * Fails the stream with an exception. Only called on the Executor.
      */
-    private void failWithExceptionOnExecutor(CronetException e) {
+    private void failWithExceptionOnExecutor(HttpException e) {
         mException = e;
         // Do not call into mCallback if request is complete.
         synchronized (mNativeStreamLock) {
@@ -813,7 +813,7 @@ public class CronetBidirectionalStream extends ExperimentalBidirectionalStream {
     /**
      * Fails the stream with an exception. Can be called on any thread.
      */
-    private void failWithException(final CronetException exception) {
+    private void failWithException(final HttpException exception) {
         postTaskToExecutor(new Runnable() {
             @Override
             public void run() {
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBase.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBase.java
index 813beb3c..47d60752 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBase.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBase.java
@@ -8,7 +8,7 @@ import androidx.annotation.Nullable;
 
 import android.net.http.BidirectionalStream;
 import android.net.http.ExperimentalBidirectionalStream;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.ExperimentalUrlRequest;
 import android.net.http.RequestFinishedInfo;
 import android.net.http.UrlRequest;
@@ -24,7 +24,7 @@ import java.util.concurrent.Executor;
 /**
  * Base class of {@link CronetUrlRequestContext}.
  */
-public abstract class CronetEngineBase extends ExperimentalCronetEngine {
+public abstract class CronetEngineBase extends ExperimentalHttpEngine {
     /*
      * Network handle representing the default network. To be used when a network has not been
      * explicitly set.
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBuilderImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBuilderImpl.java
index b0a98959..62ff8a27 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBuilderImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetEngineBuilderImpl.java
@@ -11,8 +11,8 @@ import android.util.Base64;
 import androidx.annotation.IntDef;
 import androidx.annotation.VisibleForTesting;
 
-import android.net.http.CronetEngine;
-import android.net.http.ICronetEngineBuilder;
+import android.net.http.HttpEngine;
+import android.net.http.IHttpEngineBuilder;
 
 import java.io.File;
 import java.lang.annotation.Retention;
@@ -27,9 +27,9 @@ import java.util.Set;
 import java.util.regex.Pattern;
 
 /**
- * Implementation of {@link ICronetEngineBuilder}.
+ * Implementation of {@link IHttpEngineBuilder}.
  */
-public abstract class CronetEngineBuilderImpl extends ICronetEngineBuilder {
+public abstract class CronetEngineBuilderImpl extends IHttpEngineBuilder {
     /**
      * A hint that a host supports QUIC.
      */
@@ -99,13 +99,13 @@ public abstract class CronetEngineBuilderImpl extends ICronetEngineBuilder {
         int toPublicBuilderCacheMode() {
             switch (this) {
                 case DISABLED:
-                    return CronetEngine.Builder.HTTP_CACHE_DISABLED;
+                    return HttpEngine.Builder.HTTP_CACHE_DISABLED;
                 case DISK_NO_HTTP:
-                    return CronetEngine.Builder.HTTP_CACHE_DISK_NO_HTTP;
+                    return HttpEngine.Builder.HTTP_CACHE_DISK_NO_HTTP;
                 case DISK:
-                    return CronetEngine.Builder.HTTP_CACHE_DISK;
+                    return HttpEngine.Builder.HTTP_CACHE_DISK;
                 case MEMORY:
-                    return CronetEngine.Builder.HTTP_CACHE_IN_MEMORY;
+                    return HttpEngine.Builder.HTTP_CACHE_IN_MEMORY;
                 default:
                     throw new IllegalArgumentException("Unknown internal builder cache mode");
             }
@@ -114,13 +114,13 @@ public abstract class CronetEngineBuilderImpl extends ICronetEngineBuilder {
         @VisibleForTesting
         static HttpCacheMode fromPublicBuilderCacheMode(@HttpCacheSetting int cacheMode) {
             switch (cacheMode) {
-                case CronetEngine.Builder.HTTP_CACHE_DISABLED:
+                case HttpEngine.Builder.HTTP_CACHE_DISABLED:
                     return DISABLED;
-                case CronetEngine.Builder.HTTP_CACHE_DISK_NO_HTTP:
+                case HttpEngine.Builder.HTTP_CACHE_DISK_NO_HTTP:
                     return DISK_NO_HTTP;
-                case CronetEngine.Builder.HTTP_CACHE_DISK:
+                case HttpEngine.Builder.HTTP_CACHE_DISK:
                     return DISK;
-                case CronetEngine.Builder.HTTP_CACHE_IN_MEMORY:
+                case HttpEngine.Builder.HTTP_CACHE_IN_MEMORY:
                     return MEMORY;
                 default:
                     throw new IllegalArgumentException("Unknown public builder cache mode");
@@ -160,7 +160,7 @@ public abstract class CronetEngineBuilderImpl extends ICronetEngineBuilder {
         enableQuic(true);
         enableHttp2(true);
         enableBrotli(false);
-        enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISABLED, 0);
+        enableHttpCache(HttpEngine.Builder.HTTP_CACHE_DISABLED, 0);
         enableNetworkQualityEstimator(false);
         enablePublicKeyPinningBypassForLocalTrustAnchors(true);
     }
@@ -243,8 +243,8 @@ public abstract class CronetEngineBuilderImpl extends ICronetEngineBuilder {
         return mBrotiEnabled;
     }
 
-    @IntDef({CronetEngine.Builder.HTTP_CACHE_DISABLED, CronetEngine.Builder.HTTP_CACHE_IN_MEMORY,
-            CronetEngine.Builder.HTTP_CACHE_DISK_NO_HTTP, CronetEngine.Builder.HTTP_CACHE_DISK})
+    @IntDef({HttpEngine.Builder.HTTP_CACHE_DISABLED, HttpEngine.Builder.HTTP_CACHE_IN_MEMORY,
+            HttpEngine.Builder.HTTP_CACHE_DISK_NO_HTTP, HttpEngine.Builder.HTTP_CACHE_DISK})
     @Retention(RetentionPolicy.SOURCE)
     public @interface HttpCacheSetting {}
 
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetExceptionImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetExceptionImpl.java
index 0bce708f..318b4cfb 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetExceptionImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetExceptionImpl.java
@@ -4,12 +4,12 @@
 
 package org.chromium.net.impl;
 
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 
 /**
- * Implements {@link CronetException}.
+ * Implements {@link HttpException}.
  */
-public class CronetExceptionImpl extends CronetException {
+public class CronetExceptionImpl extends HttpException {
     public CronetExceptionImpl(String message, Throwable cause) {
         super(message, cause);
     }
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequest.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequest.java
index 103ded42..f5655d75 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequest.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequest.java
@@ -18,7 +18,7 @@ import org.chromium.base.annotations.JNINamespace;
 import org.chromium.base.annotations.NativeClassQualifiedName;
 import org.chromium.base.annotations.NativeMethods;
 import android.net.http.CallbackException;
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 import org.chromium.net.Idempotency;
 import android.net.http.InlineExecutionProhibitedException;
 import android.net.http.NetworkException;
@@ -109,7 +109,7 @@ public final class CronetUrlRequest extends UrlRequestBase {
     // UrlRequest.Callback's and RequestFinishedInfo.Listener's executors after the last update.
     @RequestFinishedInfoImpl.FinishedReason
     private int mFinishedReason;
-    private CronetException mException;
+    private HttpException mException;
     private CronetMetrics mMetrics;
     private boolean mQuicConnectionMigrationAttempted;
     private boolean mQuicConnectionMigrationSuccessful;
@@ -552,7 +552,7 @@ public final class CronetUrlRequest extends UrlRequestBase {
     /**
      * Fails the request with an exception on any thread.
      */
-    private void failWithException(final CronetException exception) {
+    private void failWithException(final HttpException exception) {
         synchronized (mUrlRequestAdapterLock) {
             if (isDoneLocked()) {
                 return;
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
index a9879198..2c4a1f7b 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
@@ -18,7 +18,7 @@ import org.chromium.base.annotations.NativeClassQualifiedName;
 import org.chromium.base.annotations.NativeMethods;
 import org.chromium.build.annotations.UsedByReflection;
 import android.net.http.BidirectionalStream;
-import android.net.http.CronetEngine;
+import android.net.http.HttpEngine;
 import org.chromium.net.EffectiveConnectionType;
 import android.net.http.ExperimentalBidirectionalStream;
 import android.net.http.NetworkQualityRttListener;
@@ -240,7 +240,7 @@ public class CronetUrlRequestContext extends CronetEngineBase {
     }
 
     static CronetSource getCronetSource() {
-        ClassLoader apiClassLoader = CronetEngine.class.getClassLoader();
+        ClassLoader apiClassLoader = HttpEngine.class.getClassLoader();
         ClassLoader implClassLoader = CronetUrlRequest.class.getClassLoader();
         return apiClassLoader.equals(implClassLoader) ? CronetSource.CRONET_SOURCE_STATICALLY_LINKED
                                                       : CronetSource.CRONET_SOURCE_PLAY_SERVICES;
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/NativeCronetEngineBuilderImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/NativeCronetEngineBuilderImpl.java
index 37a6845b..07888c91 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/NativeCronetEngineBuilderImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/NativeCronetEngineBuilderImpl.java
@@ -6,11 +6,11 @@ package org.chromium.net.impl;
 
 import android.content.Context;
 
-import android.net.http.ExperimentalCronetEngine;
-import android.net.http.ICronetEngineBuilder;
+import android.net.http.ExperimentalHttpEngine;
+import android.net.http.IHttpEngineBuilder;
 
 /**
- * Implementation of {@link ICronetEngineBuilder} that builds native Cronet engine.
+ * Implementation of {@link IHttpEngineBuilder} that builds native Cronet engine.
  */
 public class NativeCronetEngineBuilderImpl extends CronetEngineBuilderImpl {
     /**
@@ -24,12 +24,12 @@ public class NativeCronetEngineBuilderImpl extends CronetEngineBuilderImpl {
     }
 
     @Override
-    public ExperimentalCronetEngine build() {
+    public ExperimentalHttpEngine build() {
         if (getUserAgent() == null) {
             setUserAgent(getDefaultUserAgent());
         }
 
-        ExperimentalCronetEngine builder = new CronetUrlRequestContext(this);
+        ExperimentalHttpEngine builder = new CronetUrlRequestContext(this);
 
         // Clear MOCK_CERT_VERIFIER reference if there is any, since
         // the ownership has been transferred to the engine.
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/NetworkExceptionImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/NetworkExceptionImpl.java
index 2fa9a5e1..bf798d29 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/NetworkExceptionImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/NetworkExceptionImpl.java
@@ -38,7 +38,7 @@ public class NetworkExceptionImpl extends NetworkException {
     }
 
     @Override
-    public int getCronetInternalErrorCode() {
+    public int getInternalErrorCode() {
         return mCronetInternalErrorCode;
     }
 
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/QuicExceptionImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/QuicExceptionImpl.java
index 4b7cddc3..d1369b6a 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/QuicExceptionImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/QuicExceptionImpl.java
@@ -45,8 +45,8 @@ public class QuicExceptionImpl extends QuicException {
     }
 
     @Override
-    public int getCronetInternalErrorCode() {
-        return mNetworkException.getCronetInternalErrorCode();
+    public int getInternalErrorCode() {
+        return mNetworkException.getInternalErrorCode();
     }
 
     @Override
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/RequestFinishedInfoImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/RequestFinishedInfoImpl.java
index 0fcf182a..85512ad3 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/RequestFinishedInfoImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/RequestFinishedInfoImpl.java
@@ -7,7 +7,7 @@ package org.chromium.net.impl;
 import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 import android.net.http.RequestFinishedInfo;
 import android.net.http.UrlResponseInfo;
 
@@ -30,7 +30,7 @@ public class RequestFinishedInfoImpl extends RequestFinishedInfo {
     @Nullable
     private final UrlResponseInfo mResponseInfo;
     @Nullable
-    private final CronetException mException;
+    private final HttpException mException;
 
     @IntDef({SUCCEEDED, FAILED, CANCELED})
     @Retention(RetentionPolicy.SOURCE)
@@ -38,7 +38,7 @@ public class RequestFinishedInfoImpl extends RequestFinishedInfo {
 
     public RequestFinishedInfoImpl(String url, Collection<Object> annotations,
             RequestFinishedInfo.Metrics metrics, @FinishedReason int finishedReason,
-            @Nullable UrlResponseInfo responseInfo, @Nullable CronetException exception) {
+            @Nullable UrlResponseInfo responseInfo, @Nullable HttpException exception) {
         mUrl = url;
         mAnnotations = annotations;
         mMetrics = metrics;
@@ -79,7 +79,7 @@ public class RequestFinishedInfoImpl extends RequestFinishedInfo {
 
     @Override
     @Nullable
-    public CronetException getException() {
+    public HttpException getException() {
         return mException;
     }
 }
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBuilderImpl.java b/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBuilderImpl.java
index c7a2f54c..143ef190 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBuilderImpl.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/UrlRequestBuilderImpl.java
@@ -8,7 +8,7 @@ import android.os.Build;
 import android.util.Log;
 import android.util.Pair;
 
-import android.net.http.CronetEngine;
+import android.net.http.HttpEngine;
 import android.net.http.ExperimentalUrlRequest;
 import android.net.http.RequestFinishedInfo;
 import android.net.http.UploadDataProvider;
@@ -75,7 +75,7 @@ public class UrlRequestBuilderImpl extends ExperimentalUrlRequest.Builder {
      * @param url URL for the generated requests.
      * @param callback callback object that gets invoked on different events.
      * @param executor {@link Executor} on which all callbacks will be invoked.
-     * @param cronetEngine {@link CronetEngine} used to execute this request.
+     * @param cronetEngine {@link HttpEngine} used to execute this request.
      */
     UrlRequestBuilderImpl(String url, UrlRequest.Callback callback, Executor executor,
             CronetEngineBase cronetEngine) {
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java b/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java
index ee353ad7..2d9169de 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java
@@ -5,7 +5,7 @@
 package org.chromium.net.impl;
 
 import android.net.http.BidirectionalStream;
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 import android.net.http.NetworkQualityRttListener;
 import android.net.http.NetworkQualityThroughputListener;
 import android.net.http.RequestFinishedInfo;
@@ -63,7 +63,7 @@ public class VersionSafeCallbacks {
         }
 
         @Override
-        public void onFailed(UrlRequest request, UrlResponseInfo info, CronetException error) {
+        public void onFailed(UrlRequest request, UrlResponseInfo info, HttpException error) {
             mWrappedCallback.onFailed(request, info, error);
         }
 
@@ -134,7 +134,7 @@ public class VersionSafeCallbacks {
 
         @Override
         public void onFailed(
-                BidirectionalStream stream, UrlResponseInfo info, CronetException error) {
+                BidirectionalStream stream, UrlResponseInfo info, HttpException error) {
             mWrappedCallback.onFailed(stream, info, error);
         }
 
diff --git a/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetHttpURLConnection.java b/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetHttpURLConnection.java
index acd7dcdf..d692ebd4 100644
--- a/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetHttpURLConnection.java
+++ b/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetHttpURLConnection.java
@@ -9,8 +9,8 @@ import android.os.Build;
 import android.util.Log;
 import android.util.Pair;
 
-import android.net.http.CronetEngine;
-import android.net.http.CronetException;
+import android.net.http.HttpEngine;
+import android.net.http.HttpException;
 import android.net.http.ExperimentalUrlRequest;
 import android.net.http.UrlRequest;
 import android.net.http.UrlResponseInfo;
@@ -40,7 +40,7 @@ import java.util.TreeMap;
 public class CronetHttpURLConnection extends HttpURLConnection {
     private static final String TAG = CronetHttpURLConnection.class.getSimpleName();
     private static final String CONTENT_LENGTH = "Content-Length";
-    private final CronetEngine mCronetEngine;
+    private final HttpEngine mCronetEngine;
     private final MessageLoop mMessageLoop;
     private UrlRequest mRequest;
     private final List<Pair<String, String>> mRequestHeaders;
@@ -59,7 +59,7 @@ public class CronetHttpURLConnection extends HttpURLConnection {
     private List<Map.Entry<String, String>> mResponseHeadersList;
     private Map<String, List<String>> mResponseHeadersMap;
 
-    public CronetHttpURLConnection(URL url, CronetEngine cronetEngine) {
+    public CronetHttpURLConnection(URL url, HttpEngine cronetEngine) {
         super(url);
         mCronetEngine = cronetEngine;
         mMessageLoop = new MessageLoop();
@@ -572,7 +572,7 @@ public class CronetHttpURLConnection extends HttpURLConnection {
         }
 
         @Override
-        public void onFailed(UrlRequest request, UrlResponseInfo info, CronetException exception) {
+        public void onFailed(UrlRequest request, UrlResponseInfo info, HttpException exception) {
             if (exception == null) {
                 throw new IllegalStateException(
                         "Exception cannot be null in onFailed.");
diff --git a/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetHttpURLStreamHandler.java b/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetHttpURLStreamHandler.java
index 5f0c79c9..eff3dd79 100644
--- a/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetHttpURLStreamHandler.java
+++ b/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetHttpURLStreamHandler.java
@@ -4,7 +4,7 @@
 
 package org.chromium.net.urlconnection;
 
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.ExperimentalHttpEngine;
 
 import java.io.IOException;
 import java.net.Proxy;
@@ -23,9 +23,9 @@ import java.net.URLStreamHandler;
  * listed {@link CronetURLStreamHandlerFactory here}.
  */
 class CronetHttpURLStreamHandler extends URLStreamHandler {
-    private final ExperimentalCronetEngine mCronetEngine;
+    private final ExperimentalHttpEngine mCronetEngine;
 
-    public CronetHttpURLStreamHandler(ExperimentalCronetEngine cronetEngine) {
+    public CronetHttpURLStreamHandler(ExperimentalHttpEngine cronetEngine) {
         mCronetEngine = cronetEngine;
     }
 
diff --git a/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetURLStreamHandlerFactory.java b/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetURLStreamHandlerFactory.java
index af66d890..9545e804 100644
--- a/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetURLStreamHandlerFactory.java
+++ b/components/cronet/android/java/src/org/chromium/net/urlconnection/CronetURLStreamHandlerFactory.java
@@ -4,7 +4,7 @@
 
 package org.chromium.net.urlconnection;
 
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.ExperimentalHttpEngine;
 
 import java.net.URLStreamHandler;
 import java.net.URLStreamHandlerFactory;
@@ -40,7 +40,7 @@ import java.net.URLStreamHandlerFactory;
  * {@hide}
  */
 public class CronetURLStreamHandlerFactory implements URLStreamHandlerFactory {
-    private final ExperimentalCronetEngine mCronetEngine;
+    private final ExperimentalHttpEngine mCronetEngine;
 
     /**
      * Creates a {@link CronetURLStreamHandlerFactory} to handle HTTP and HTTPS
@@ -48,7 +48,7 @@ public class CronetURLStreamHandlerFactory implements URLStreamHandlerFactory {
      * @param cronetEngine the {@link CronetEngine} to be used.
      * @throws NullPointerException if config is null.
      */
-    public CronetURLStreamHandlerFactory(ExperimentalCronetEngine cronetEngine) {
+    public CronetURLStreamHandlerFactory(ExperimentalHttpEngine cronetEngine) {
         if (cronetEngine == null) {
             throw new NullPointerException("CronetEngine is null.");
         }
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamQuicTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamQuicTest.java
index 732e79f7..241e0d8c 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamQuicTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamQuicTest.java
@@ -13,7 +13,7 @@ import static org.chromium.base.CollectionUtil.newHashSet;
 import static org.chromium.net.CronetTestRule.getContext;
 
 import android.net.http.BidirectionalStream;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.NetworkException;
 import android.net.http.QuicException;
 import android.net.http.RequestFinishedInfo;
@@ -44,7 +44,7 @@ public class BidirectionalStreamQuicTest {
     @Rule
     public final CronetTestRule mTestRule = new CronetTestRule();
 
-    private ExperimentalCronetEngine mCronetEngine;
+    private ExperimentalHttpEngine mCronetEngine;
     private enum QuicBidirectionalStreams {
         ENABLED,
         DISABLED,
@@ -53,8 +53,8 @@ public class BidirectionalStreamQuicTest {
     private void setUp(QuicBidirectionalStreams enabled) throws Exception {
         // Load library first to create MockCertVerifier.
         System.loadLibrary("cronet_tests");
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
 
         QuicTestServer.startQuicTestServer(getContext());
 
@@ -362,9 +362,9 @@ public class BidirectionalStreamQuicTest {
         assertNotNull(callback.mError);
         assertTrue(callback.mError instanceof NetworkException);
         NetworkException networkError = (NetworkException) callback.mError;
-        assertTrue(NetError.ERR_QUIC_PROTOCOL_ERROR == networkError.getCronetInternalErrorCode()
-                || NetError.ERR_CONNECTION_REFUSED == networkError.getCronetInternalErrorCode());
-        if (NetError.ERR_CONNECTION_REFUSED == networkError.getCronetInternalErrorCode()) return;
+        assertTrue(NetError.ERR_QUIC_PROTOCOL_ERROR == networkError.getInternalErrorCode()
+                || NetError.ERR_CONNECTION_REFUSED == networkError.getInternalErrorCode());
+        if (NetError.ERR_CONNECTION_REFUSED == networkError.getInternalErrorCode()) return;
         assertTrue(callback.mError instanceof QuicException);
     }
 
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamTest.java
index f47cf115..2af36a7d 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamTest.java
@@ -18,10 +18,10 @@ import static org.chromium.net.CronetTestRule.assertContains;
 import static org.chromium.net.CronetTestRule.getContext;
 
 import android.net.http.BidirectionalStream;
-import android.net.http.CronetEngine;
-import android.net.http.CronetException;
+import android.net.http.HttpEngine;
+import android.net.http.HttpException;
 import android.net.http.ExperimentalBidirectionalStream;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.NetworkException;
 import android.net.http.RequestFinishedInfo;
 import android.net.http.UrlResponseInfo;
@@ -72,14 +72,14 @@ public class BidirectionalStreamTest {
     @Rule
     public final CronetTestRule mTestRule = new CronetTestRule();
 
-    private ExperimentalCronetEngine mCronetEngine;
+    private ExperimentalHttpEngine mCronetEngine;
 
     @Before
     public void setUp() throws Exception {
         // Load library first to create MockCertVerifier.
         System.loadLibrary("cronet_tests");
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         CronetTestUtil.setMockCertVerifierForTesting(
                 builder, QuicTestServer.createMockCertVerifier());
 
@@ -218,7 +218,7 @@ public class BidirectionalStreamTest {
         assertTrue(stream.isDone());
         assertContains("Exception in BidirectionalStream: net::ERR_DISALLOWED_URL_SCHEME",
                 callback.mError.getMessage());
-        assertEquals(-301, ((NetworkException) callback.mError).getCronetInternalErrorCode());
+        assertEquals(-301, ((NetworkException) callback.mError).getInternalErrorCode());
     }
 
     @Test
@@ -864,12 +864,12 @@ public class BidirectionalStreamTest {
     public void testCustomCronetEngineUserAgent() throws Exception {
         String userAgentName = "User-Agent";
         String userAgentValue = "User-Agent-Value";
-        ExperimentalCronetEngine.Builder engineBuilder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder engineBuilder =
+                new ExperimentalHttpEngine.Builder(getContext());
         engineBuilder.setUserAgent(userAgentValue);
         CronetTestUtil.setMockCertVerifierForTesting(
                 engineBuilder, QuicTestServer.createMockCertVerifier());
-        ExperimentalCronetEngine engine = engineBuilder.build();
+        ExperimentalHttpEngine engine = engineBuilder.build();
         TestBidirectionalStreamCallback callback = new TestBidirectionalStreamCallback();
         BidirectionalStream.Builder builder = engine.newBidirectionalStreamBuilder(
                 Http2TestServer.getEchoHeaderUrl(userAgentName), callback, callback.getExecutor());
@@ -893,7 +893,7 @@ public class BidirectionalStreamTest {
         builder.build().start();
         callback.blockForDone();
         assertEquals(200, callback.mResponseInfo.getHttpStatusCode());
-        assertEquals(new CronetEngine.Builder(getContext()).getDefaultUserAgent(),
+        assertEquals(new HttpEngine.Builder(getContext()).getDefaultUserAgent(),
                 callback.mResponseAsString);
     }
 
@@ -1288,8 +1288,8 @@ public class BidirectionalStreamTest {
     private void throwOrCancel(
             FailureType failureType, ResponseStep failureStep, boolean expectError) {
         // Use a fresh CronetEngine each time so Http2 session is not reused.
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         CronetTestUtil.setMockCertVerifierForTesting(
                 builder, QuicTestServer.createMockCertVerifier());
         mCronetEngine = builder.build();
@@ -1444,7 +1444,7 @@ public class BidirectionalStreamTest {
 
         @Override
         public void onFailed(
-                BidirectionalStream stream, UrlResponseInfo info, CronetException error) {
+                BidirectionalStream stream, UrlResponseInfo info, HttpException error) {
             mCronetEngine.shutdown();
             // Clear mCronetEngine so it doesn't get shut down second time in tearDown().
             mCronetEngine = null;
@@ -1605,7 +1605,7 @@ public class BidirectionalStreamTest {
         NetworkException exception =
                 new BidirectionalStreamNetworkException("", errorCode, netError);
         assertEquals(immediatelyRetryable, exception.immediatelyRetryable());
-        assertEquals(netError, exception.getCronetInternalErrorCode());
+        assertEquals(netError, exception.getInternalErrorCode());
         assertEquals(errorCode, exception.getErrorCode());
     }
 
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/BrotliTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/BrotliTest.java
index 33bf0ebe..1a81e10c 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/BrotliTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/BrotliTest.java
@@ -12,8 +12,8 @@ import static org.chromium.net.CronetTestRule.SERVER_CERT_PEM;
 import static org.chromium.net.CronetTestRule.SERVER_KEY_PKCS8_PEM;
 import static org.chromium.net.CronetTestRule.getContext;
 
-import android.net.http.CronetEngine;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.HttpEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.UrlRequest;
 import android.support.test.runner.AndroidJUnit4;
 
@@ -38,7 +38,7 @@ public class BrotliTest {
     @Rule
     public final CronetTestRule mTestRule = new CronetTestRule();
 
-    private CronetEngine mCronetEngine;
+    private HttpEngine mCronetEngine;
 
     @Before
     public void setUp() throws Exception {
@@ -60,8 +60,8 @@ public class BrotliTest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testBrotliAdvertised() throws Exception {
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         builder.enableBrotli(true);
         CronetTestUtil.setMockCertVerifierForTesting(
                 builder, QuicTestServer.createMockCertVerifier());
@@ -77,8 +77,8 @@ public class BrotliTest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testBrotliNotAdvertised() throws Exception {
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         CronetTestUtil.setMockCertVerifierForTesting(
                 builder, QuicTestServer.createMockCertVerifier());
         mCronetEngine = builder.build();
@@ -93,8 +93,8 @@ public class BrotliTest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testBrotliDecoded() throws Exception {
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         builder.enableBrotli(true);
         CronetTestUtil.setMockCertVerifierForTesting(
                 builder, QuicTestServer.createMockCertVerifier());
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/CronetTestRule.java b/components/cronet/android/test/javatests/src/org/chromium/net/CronetTestRule.java
index c689ebf1..5af7f00f 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/CronetTestRule.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/CronetTestRule.java
@@ -6,8 +6,8 @@ package org.chromium.net;
 
 import static org.junit.Assume.assumeTrue;
 
-import android.net.http.CronetEngine;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.HttpEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.UrlResponseInfo;
 import android.content.Context;
 import android.os.Build;
@@ -59,8 +59,8 @@ public class CronetTestRule implements TestRule {
      * Creates and holds pointer to CronetEngine.
      */
     public static class CronetTestFramework {
-        public ExperimentalCronetEngine mCronetEngine;
-        public ExperimentalCronetEngine.Builder mBuilder;
+        public ExperimentalHttpEngine mCronetEngine;
+        public ExperimentalHttpEngine.Builder mBuilder;
 
         private Context mContext;
 
@@ -73,7 +73,7 @@ public class CronetTestRule implements TestRule {
             return new CronetTestFramework(context);
         }
 
-        public ExperimentalCronetEngine startEngine() {
+        public ExperimentalHttpEngine startEngine() {
             assert mCronetEngine == null;
 
             mCronetEngine = mBuilder.build();
@@ -90,7 +90,7 @@ public class CronetTestRule implements TestRule {
             mCronetEngine = null;
         }
 
-        private ExperimentalCronetEngine.Builder createNativeEngineBuilder() {
+        private ExperimentalHttpEngine.Builder createNativeEngineBuilder() {
             return CronetTestRule.createNativeEngineBuilder(mContext).enableQuic(true);
         }
     }
@@ -268,13 +268,13 @@ public class CronetTestRule implements TestRule {
     }
 
     /**
-     * Creates and returns {@link ExperimentalCronetEngine.Builder} that creates
-     * Chromium (native) based {@link CronetEngine.Builder}.
+     * Creates and returns {@link ExperimentalHttpEngine.Builder} that creates
+     * Chromium (native) based {@link HttpEngine.Builder}.
      *
      * @return the {@code CronetEngine.Builder} that builds Chromium-based {@code Cronet engine}.
      */
-    public static ExperimentalCronetEngine.Builder createNativeEngineBuilder(Context context) {
-        return (ExperimentalCronetEngine.Builder) CronetEngine.builder(context);
+    public static ExperimentalHttpEngine.Builder createNativeEngineBuilder(Context context) {
+        return (ExperimentalHttpEngine.Builder) HttpEngine.builder(context);
     }
 
     public void assertResponseEquals(UrlResponseInfo expected, UrlResponseInfo actual) {
@@ -301,9 +301,9 @@ public class CronetTestRule implements TestRule {
         }
     }
 
-    public CronetEngine.Builder enableDiskCache(CronetEngine.Builder cronetEngineBuilder) {
+    public HttpEngine.Builder enableDiskCache(HttpEngine.Builder cronetEngineBuilder) {
         cronetEngineBuilder.setStoragePath(getTestStorage(getContext()));
-        cronetEngineBuilder.enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISK, 1000 * 1024);
+        cronetEngineBuilder.enableHttpCache(HttpEngine.Builder.HTTP_CACHE_DISK, 1000 * 1024);
         return cronetEngineBuilder;
     }
 
@@ -311,7 +311,7 @@ public class CronetTestRule implements TestRule {
      * Sets the {@link URLStreamHandlerFactory} from {@code cronetEngine}.  This should be called
      * during setUp() and is installed by {@link runTest()} as the default when Cronet is tested.
      */
-    public void setStreamHandlerFactory(CronetEngine cronetEngine) {
+    public void setStreamHandlerFactory(HttpEngine cronetEngine) {
         if (!testingSystemHttpURLConnection()) {
             URL.setURLStreamHandlerFactory(cronetEngine.createURLStreamHandlerFactory());
         }
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestContextTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestContextTest.java
index 615483ed..d670ad01 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestContextTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestContextTest.java
@@ -11,14 +11,14 @@ import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
-import static android.net.http.CronetEngine.Builder.HTTP_CACHE_IN_MEMORY;
+import static android.net.http.HttpEngine.Builder.HTTP_CACHE_IN_MEMORY;
 import static org.chromium.net.CronetTestRule.assertContains;
 import static org.chromium.net.CronetTestRule.getContext;
 import static org.chromium.net.CronetTestRule.getTestStorage;
 
-import android.net.http.CronetEngine;
-import android.net.http.CronetException;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.HttpEngine;
+import android.net.http.HttpException;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.ExperimentalUrlRequest;
 import android.net.http.UrlRequest;
 import android.net.http.UrlResponseInfo;
@@ -119,7 +119,7 @@ public class CronetUrlRequestContextTest {
         @Override
         public void run() {
             mRunBlocker.block();
-            CronetEngine cronetEngine = new CronetEngine.Builder(getContext()).build();
+            HttpEngine cronetEngine = new HttpEngine.Builder(getContext()).build();
             mCallback = new TestUrlRequestCallback();
             UrlRequest.Builder urlRequestBuilder =
                     cronetEngine.newUrlRequestBuilder(mUrl, mCallback, mCallback.getExecutor());
@@ -133,10 +133,10 @@ public class CronetUrlRequestContextTest {
      * or failed.
      */
     static class ShutdownTestUrlRequestCallback extends TestUrlRequestCallback {
-        private final CronetEngine mCronetEngine;
+        private final HttpEngine mCronetEngine;
         private final ConditionVariable mCallbackCompletionBlock = new ConditionVariable();
 
-        ShutdownTestUrlRequestCallback(CronetEngine cronetEngine) {
+        ShutdownTestUrlRequestCallback(HttpEngine cronetEngine) {
             mCronetEngine = cronetEngine;
         }
 
@@ -148,7 +148,7 @@ public class CronetUrlRequestContextTest {
         }
 
         @Override
-        public void onFailed(UrlRequest request, UrlResponseInfo info, CronetException error) {
+        public void onFailed(UrlRequest request, UrlResponseInfo info, HttpException error) {
             super.onFailed(request, info, error);
             mCronetEngine.shutdown();
             mCallbackCompletionBlock.open();
@@ -167,10 +167,10 @@ public class CronetUrlRequestContextTest {
     public void testConfigUserAgent() throws Exception {
         String userAgentName = "User-Agent";
         String userAgentValue = "User-Agent-Value";
-        ExperimentalCronetEngine.Builder cronetEngineBuilder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder cronetEngineBuilder =
+                new ExperimentalHttpEngine.Builder(getContext());
         cronetEngineBuilder.setUserAgent(userAgentValue);
-        final CronetEngine cronetEngine = cronetEngineBuilder.build();
+        final HttpEngine cronetEngine = cronetEngineBuilder.build();
         NativeTestServer.shutdownNativeTestServer(); // startNativeTestServer returns false if it's
         // already running
         assertTrue(NativeTestServer.startNativeTestServer(getContext()));
@@ -260,7 +260,7 @@ public class CronetUrlRequestContextTest {
         // Create new request context, but its initialization on the main thread
         // will be stuck behind blockingTask.
         final CronetUrlRequestContext cronetEngine =
-                (CronetUrlRequestContext) new CronetEngine.Builder(getContext()).build();
+                (CronetUrlRequestContext) new HttpEngine.Builder(getContext()).build();
         // Unblock the main thread, so context gets initialized and shutdown on
         // it.
         block.open();
@@ -288,7 +288,7 @@ public class CronetUrlRequestContextTest {
             public void run() {
                 // Create new request context, loading the library.
                 final CronetUrlRequestContext cronetEngine =
-                        (CronetUrlRequestContext) new CronetEngine.Builder(getContext()).build();
+                        (CronetUrlRequestContext) new HttpEngine.Builder(getContext()).build();
                 // Shutdown right after init.
                 cronetEngine.shutdown();
                 // Verify that context is shutdown.
@@ -496,7 +496,7 @@ public class CronetUrlRequestContextTest {
         Context context = getContext();
         File directory = new File(PathUtils.getDataDirectory());
         File file = File.createTempFile("cronet", "json", directory);
-        CronetEngine cronetEngine = new CronetEngine.Builder(context).build();
+        HttpEngine cronetEngine = new HttpEngine.Builder(context).build();
         // Start NetLog immediately after the request context is created to make
         // sure that the call won't crash the app even when the native request
         // context is not fully initialized. See crbug.com/470196.
@@ -527,8 +527,8 @@ public class CronetUrlRequestContextTest {
         assertFalse(netLogDir.exists());
         assertTrue(netLogDir.mkdir());
         File logFile = new File(netLogDir, "netlog.json");
-        ExperimentalCronetEngine cronetEngine =
-                new ExperimentalCronetEngine.Builder(context).build();
+        ExperimentalHttpEngine cronetEngine =
+                new ExperimentalHttpEngine.Builder(context).build();
         // Start NetLog immediately after the request context is created to make
         // sure that the call won't crash the app even when the native request
         // context is not fully initialized. See crbug.com/470196.
@@ -558,7 +558,7 @@ public class CronetUrlRequestContextTest {
         Context context = getContext();
         File directory = new File(PathUtils.getDataDirectory());
         File file = File.createTempFile("cronet", "json", directory);
-        CronetEngine cronetEngine = new CronetEngine.Builder(context).build();
+        HttpEngine cronetEngine = new HttpEngine.Builder(context).build();
         cronetEngine.startNetLogToFile(file.getPath(), false);
 
         // Start a request.
@@ -589,8 +589,8 @@ public class CronetUrlRequestContextTest {
         assertFalse(netLogDir.exists());
         assertTrue(netLogDir.mkdir());
         File logFile = new File(netLogDir, "netlog.json");
-        ExperimentalCronetEngine cronetEngine =
-                new ExperimentalCronetEngine.Builder(context).build();
+        ExperimentalHttpEngine cronetEngine =
+                new ExperimentalHttpEngine.Builder(context).build();
         cronetEngine.startNetLogToDisk(netLogDir.getPath(), false, MAX_FILE_SIZE);
 
         // Start a request.
@@ -618,8 +618,8 @@ public class CronetUrlRequestContextTest {
         File directory = new File(PathUtils.getDataDirectory());
         File file1 = File.createTempFile("cronet1", "json", directory);
         File file2 = File.createTempFile("cronet2", "json", directory);
-        CronetEngine cronetEngine1 = new CronetEngine.Builder(context).build();
-        CronetEngine cronetEngine2 = new CronetEngine.Builder(context).build();
+        HttpEngine cronetEngine1 = new HttpEngine.Builder(context).build();
+        HttpEngine cronetEngine2 = new HttpEngine.Builder(context).build();
 
         cronetEngine1.startNetLogToFile(file1.getPath(), false);
         cronetEngine2.startNetLogToFile(file2.getPath(), false);
@@ -666,10 +666,10 @@ public class CronetUrlRequestContextTest {
         File logFile1 = new File(netLogDir1, "netlog.json");
         File logFile2 = new File(netLogDir2, "netlog.json");
 
-        ExperimentalCronetEngine cronetEngine1 =
-                new ExperimentalCronetEngine.Builder(context).build();
-        ExperimentalCronetEngine cronetEngine2 =
-                new ExperimentalCronetEngine.Builder(context).build();
+        ExperimentalHttpEngine cronetEngine1 =
+                new ExperimentalHttpEngine.Builder(context).build();
+        ExperimentalHttpEngine cronetEngine2 =
+                new ExperimentalHttpEngine.Builder(context).build();
 
         cronetEngine1.startNetLogToDisk(netLogDir1.getPath(), false, MAX_FILE_SIZE);
         cronetEngine2.startNetLogToDisk(netLogDir2.getPath(), false, MAX_FILE_SIZE);
@@ -706,10 +706,10 @@ public class CronetUrlRequestContextTest {
         assertFalse(netLogDir2.exists());
     }
 
-    private CronetEngine createCronetEngineWithCache(int cacheType) {
-        CronetEngine.Builder builder = new CronetEngine.Builder(getContext());
-        if (cacheType == CronetEngine.Builder.HTTP_CACHE_DISK
-                || cacheType == CronetEngine.Builder.HTTP_CACHE_DISK_NO_HTTP) {
+    private HttpEngine createCronetEngineWithCache(int cacheType) {
+        HttpEngine.Builder builder = new HttpEngine.Builder(getContext());
+        if (cacheType == HttpEngine.Builder.HTTP_CACHE_DISK
+                || cacheType == HttpEngine.Builder.HTTP_CACHE_DISK_NO_HTTP) {
             builder.setStoragePath(getTestStorage(getContext()));
         }
         builder.enableHttpCache(cacheType, 100 * 1024);
@@ -727,8 +727,8 @@ public class CronetUrlRequestContextTest {
     // Tests that if CronetEngine is shut down on the network thread, an appropriate exception
     // is thrown.
     public void testShutDownEngineOnNetworkThread() throws Exception {
-        final CronetEngine cronetEngine =
-                createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_DISK);
+        final HttpEngine cronetEngine =
+                createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_DISK);
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         // Make a request to a cacheable resource.
         checkRequestCaching(cronetEngine, url, false);
@@ -757,7 +757,7 @@ public class CronetUrlRequestContextTest {
             }
 
             @Override
-            public void onFailed(UrlRequest request, UrlResponseInfo info, CronetException error) {
+            public void onFailed(UrlRequest request, UrlResponseInfo info, HttpException error) {
                 throw new RuntimeException("Unexpected");
             }
         }
@@ -785,8 +785,8 @@ public class CronetUrlRequestContextTest {
     // Tests that if CronetEngine is shut down when reading from disk cache,
     // there isn't a crash. See crbug.com/486120.
     public void testShutDownEngineWhenReadingFromDiskCache() throws Exception {
-        final CronetEngine cronetEngine =
-                createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_DISK);
+        final HttpEngine cronetEngine =
+                createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_DISK);
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         // Make a request to a cacheable resource.
         checkRequestCaching(cronetEngine, url, false);
@@ -810,7 +810,7 @@ public class CronetUrlRequestContextTest {
             }
 
             @Override
-            public void onFailed(UrlRequest request, UrlResponseInfo info, CronetException error) {
+            public void onFailed(UrlRequest request, UrlResponseInfo info, HttpException error) {
                 throw new RuntimeException("Unexpected");
             }
         }
@@ -1006,7 +1006,7 @@ public class CronetUrlRequestContextTest {
         Context context = getContext();
         File directory = new File(PathUtils.getDataDirectory());
         File file = File.createTempFile("cronet", "json", directory);
-        CronetEngine cronetEngine = new CronetEngine.Builder(context).build();
+        HttpEngine cronetEngine = new HttpEngine.Builder(context).build();
         // Start NetLog with logAll as true.
         cronetEngine.startNetLogToFile(file.getPath(), true);
         // Start a request.
@@ -1034,8 +1034,8 @@ public class CronetUrlRequestContextTest {
         assertFalse(netLogDir.exists());
         assertTrue(netLogDir.mkdir());
         File logFile = new File(netLogDir, "netlog.json");
-        ExperimentalCronetEngine cronetEngine =
-                new ExperimentalCronetEngine.Builder(context).build();
+        ExperimentalHttpEngine cronetEngine =
+                new ExperimentalHttpEngine.Builder(context).build();
         // Start NetLog with logAll as true.
         cronetEngine.startNetLogToDisk(netLogDir.getPath(), true, MAX_FILE_SIZE);
         // Start a request.
@@ -1077,7 +1077,7 @@ public class CronetUrlRequestContextTest {
      * complete, and check that the status code is the same as {@code expectedStatusCode}.
      */
     private void makeRequestAndCheckStatus(
-            CronetEngine engine, String url, int expectedStatusCode) {
+            HttpEngine engine, String url, int expectedStatusCode) {
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         UrlRequest request =
                 engine.newUrlRequestBuilder(url, callback, callback.getExecutor()).build();
@@ -1086,12 +1086,12 @@ public class CronetUrlRequestContextTest {
         assertEquals(expectedStatusCode, callback.mResponseInfo.getHttpStatusCode());
     }
 
-    private void checkRequestCaching(CronetEngine engine, String url, boolean expectCached) {
+    private void checkRequestCaching(HttpEngine engine, String url, boolean expectCached) {
         checkRequestCaching(engine, url, expectCached, false);
     }
 
     private void checkRequestCaching(
-            CronetEngine engine, String url, boolean expectCached, boolean disableCache) {
+            HttpEngine engine, String url, boolean expectCached, boolean disableCache) {
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         UrlRequest.Builder urlRequestBuilder =
                 engine.newUrlRequestBuilder(url, callback, callback.getExecutor());
@@ -1109,8 +1109,8 @@ public class CronetUrlRequestContextTest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testEnableHttpCacheDisabled() throws Exception {
-        CronetEngine cronetEngine =
-                createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_DISABLED);
+        HttpEngine cronetEngine =
+                createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_DISABLED);
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         checkRequestCaching(cronetEngine, url, false);
         checkRequestCaching(cronetEngine, url, false);
@@ -1122,8 +1122,8 @@ public class CronetUrlRequestContextTest {
     @SmallTest
     @Feature({"Cronet"})
     public void testEnableHttpCacheInMemory() throws Exception {
-        CronetEngine cronetEngine =
-                createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_IN_MEMORY);
+        HttpEngine cronetEngine =
+                createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_IN_MEMORY);
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         checkRequestCaching(cronetEngine, url, false);
         checkRequestCaching(cronetEngine, url, true);
@@ -1136,8 +1136,8 @@ public class CronetUrlRequestContextTest {
     @SmallTest
     @Feature({"Cronet"})
     public void testEnableHttpCacheDisk() throws Exception {
-        CronetEngine cronetEngine =
-                createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_DISK);
+        HttpEngine cronetEngine =
+                createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_DISK);
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         checkRequestCaching(cronetEngine, url, false);
         checkRequestCaching(cronetEngine, url, true);
@@ -1151,10 +1151,10 @@ public class CronetUrlRequestContextTest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testNoConcurrentDiskUsage() throws Exception {
-        CronetEngine cronetEngine =
-                createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_DISK);
+        HttpEngine cronetEngine =
+                createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_DISK);
         try {
-            createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_DISK);
+            createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_DISK);
             fail();
         } catch (IllegalStateException e) {
             assertEquals("Disk cache storage path already in use", e.getMessage());
@@ -1172,8 +1172,8 @@ public class CronetUrlRequestContextTest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testEnableHttpCacheDiskNoHttp() throws Exception {
-        CronetEngine cronetEngine =
-                createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_DISK_NO_HTTP);
+        HttpEngine cronetEngine =
+                createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_DISK_NO_HTTP);
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         checkRequestCaching(cronetEngine, url, false);
         checkRequestCaching(cronetEngine, url, false);
@@ -1182,7 +1182,7 @@ public class CronetUrlRequestContextTest {
         // Make a new CronetEngine and try again to make sure the response didn't get cached on the
         // first request. See https://crbug.com/743232.
         cronetEngine.shutdown();
-        cronetEngine = createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_DISK_NO_HTTP);
+        cronetEngine = createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_DISK_NO_HTTP);
         checkRequestCaching(cronetEngine, url, false);
         checkRequestCaching(cronetEngine, url, false);
         checkRequestCaching(cronetEngine, url, false);
@@ -1193,8 +1193,8 @@ public class CronetUrlRequestContextTest {
     @SmallTest
     @Feature({"Cronet"})
     public void testDisableCache() throws Exception {
-        CronetEngine cronetEngine =
-                createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_DISK);
+        HttpEngine cronetEngine =
+                createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_DISK);
         String url = NativeTestServer.getFileURL("/cacheable.txt");
 
         // When cache is disabled, making a request does not write to the cache.
@@ -1226,8 +1226,8 @@ public class CronetUrlRequestContextTest {
     @SmallTest
     @Feature({"Cronet"})
     public void testEnableHttpCacheDiskNewEngine() throws Exception {
-        CronetEngine cronetEngine =
-                createCronetEngineWithCache(CronetEngine.Builder.HTTP_CACHE_DISK);
+        HttpEngine cronetEngine =
+                createCronetEngineWithCache(HttpEngine.Builder.HTTP_CACHE_DISK);
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         checkRequestCaching(cronetEngine, url, false);
         checkRequestCaching(cronetEngine, url, true);
@@ -1237,7 +1237,7 @@ public class CronetUrlRequestContextTest {
         // Shutdown original context and create another that uses the same cache.
         cronetEngine.shutdown();
         cronetEngine =
-                mTestRule.enableDiskCache(new CronetEngine.Builder(getContext())).build();
+                mTestRule.enableDiskCache(new HttpEngine.Builder(getContext())).build();
         checkRequestCaching(cronetEngine, url, true);
         cronetEngine.shutdown();
     }
@@ -1247,7 +1247,7 @@ public class CronetUrlRequestContextTest {
     @Feature({"Cronet"})
     public void testInitEngineAndStartRequest() {
         // Immediately make a request after initializing the engine.
-        CronetEngine cronetEngine = new CronetEngine.Builder(getContext()).build();
+        HttpEngine cronetEngine = new HttpEngine.Builder(getContext()).build();
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         UrlRequest.Builder urlRequestBuilder =
                 cronetEngine.newUrlRequestBuilder(mUrl, callback, callback.getExecutor());
@@ -1262,7 +1262,7 @@ public class CronetUrlRequestContextTest {
     @Feature({"Cronet"})
     public void testInitEngineStartTwoRequests() throws Exception {
         // Make two requests after initializing the context.
-        CronetEngine cronetEngine = new CronetEngine.Builder(getContext()).build();
+        HttpEngine cronetEngine = new HttpEngine.Builder(getContext()).build();
         int[] statusCodes = {0, 0};
         String[] urls = {mUrl, mUrl404};
         for (int i = 0; i < 2; i++) {
@@ -1319,11 +1319,11 @@ public class CronetUrlRequestContextTest {
         // Test that concurrently instantiating Cronet context's upon various
         // different versions of the same Android Context does not cause crashes
         // like crbug.com/453845
-        CronetEngine firstEngine = new CronetEngine.Builder(getContext()).build();
-        CronetEngine secondEngine =
-                new CronetEngine.Builder(getContext().getApplicationContext()).build();
-        CronetEngine thirdEngine =
-                new CronetEngine.Builder(new ContextWrapper(getContext())).build();
+        HttpEngine firstEngine = new HttpEngine.Builder(getContext()).build();
+        HttpEngine secondEngine =
+                new HttpEngine.Builder(getContext().getApplicationContext()).build();
+        HttpEngine thirdEngine =
+                new HttpEngine.Builder(new ContextWrapper(getContext())).build();
         firstEngine.shutdown();
         secondEngine.shutdown();
         thirdEngine.shutdown();
@@ -1364,8 +1364,8 @@ public class CronetUrlRequestContextTest {
         // This is to prompt load of native library.
         mTestRule.startCronetTestFramework();
         // Verify CronetEngine.Builder config is passed down accurately to native code.
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         builder.enableHttp2(false);
         builder.enableQuic(true);
         builder.addQuicHint("example.com", 12, 34);
@@ -1391,8 +1391,8 @@ public class CronetUrlRequestContextTest {
         // This is to prompt load of native library.
         mTestRule.startCronetTestFramework();
         // Verify CronetEngine.Builder config is passed down accurately to native code.
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         builder.enableHttp2(false);
         // QUIC is on by default. Disabling it here to make sure the built config can correctly
         // reflect the change.
@@ -1413,7 +1413,7 @@ public class CronetUrlRequestContextTest {
     private static native void nativeVerifyUrlRequestContextQuicOffConfig(
             long config, String storagePath);
 
-    private static class TestBadLibraryLoader extends CronetEngine.Builder.LibraryLoader {
+    private static class TestBadLibraryLoader extends HttpEngine.Builder.LibraryLoader {
         private boolean mWasCalled;
 
         @Override
@@ -1438,12 +1438,12 @@ public class CronetUrlRequestContextTest {
         new Handler(Looper.getMainLooper()).post(new Runnable() {
             @Override
             public void run() {
-                final ExperimentalCronetEngine.Builder builder =
-                        new ExperimentalCronetEngine.Builder(getContext());
+                final ExperimentalHttpEngine.Builder builder =
+                        new ExperimentalHttpEngine.Builder(getContext());
                 new Thread() {
                     @Override
                     public void run() {
-                        CronetEngine cronetEngine = builder.build();
+                        HttpEngine cronetEngine = builder.build();
                         otherThreadDone.open();
                         cronetEngine.shutdown();
                     }
@@ -1463,15 +1463,15 @@ public class CronetUrlRequestContextTest {
     public void testHostResolverRules() throws Exception {
         String resolverTestHostname = "some-weird-hostname";
         URL testUrl = new URL(mUrl);
-        ExperimentalCronetEngine.Builder cronetEngineBuilder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder cronetEngineBuilder =
+                new ExperimentalHttpEngine.Builder(getContext());
         JSONObject hostResolverRules = new JSONObject().put(
                 "host_resolver_rules", "MAP " + resolverTestHostname + " " + testUrl.getHost());
         JSONObject experimentalOptions =
                 new JSONObject().put("HostResolverRules", hostResolverRules);
         cronetEngineBuilder.setExperimentalOptions(experimentalOptions.toString());
 
-        final CronetEngine cronetEngine = cronetEngineBuilder.build();
+        final HttpEngine cronetEngine = cronetEngineBuilder.build();
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         URL requestUrl =
                 new URL("http", resolverTestHostname, testUrl.getPort(), testUrl.getFile());
@@ -1485,7 +1485,7 @@ public class CronetUrlRequestContextTest {
     /**
      * Runs {@code r} on {@code engine}'s network thread.
      */
-    private static void postToNetworkThread(final CronetEngine engine, final Runnable r) {
+    private static void postToNetworkThread(final HttpEngine engine, final Runnable r) {
         // Works by requesting an invalid URL which results in onFailed() being called, which is
         // done through a direct executor which causes onFailed to be run on the network thread.
         Executor directExecutor = new Executor() {
@@ -1508,7 +1508,7 @@ public class CronetUrlRequestContextTest {
 
             @Override
             public void onFailed(
-                    UrlRequest request, UrlResponseInfo responseInfo, CronetException error) {
+                    UrlRequest request, UrlResponseInfo responseInfo, HttpException error) {
                 r.run();
             }
         };
@@ -1519,7 +1519,7 @@ public class CronetUrlRequestContextTest {
      * @returns the thread priority of {@code engine}'s network thread.
      */
     private static class ApiHelper {
-        public static boolean doesContextExistForNetwork(CronetEngine engine, Network network)
+        public static boolean doesContextExistForNetwork(HttpEngine engine, Network network)
                 throws Exception {
             FutureTask<Boolean> task = new FutureTask<Boolean>(new Callable<Boolean>() {
                 @Override
@@ -1535,7 +1535,7 @@ public class CronetUrlRequestContextTest {
     /**
      * @returns the thread priority of {@code engine}'s network thread.
      */
-    private int getThreadPriority(CronetEngine engine) throws Exception {
+    private int getThreadPriority(HttpEngine engine) throws Exception {
         FutureTask<Integer> task = new FutureTask<Integer>(new Callable<Integer>() {
             @Override
             public Integer call() {
@@ -1551,8 +1551,8 @@ public class CronetUrlRequestContextTest {
     @Feature({"Cronet"})
     @RequiresMinApi(6) // setThreadPriority added in API 6: crrev.com/472449
     public void testCronetEngineThreadPriority() throws Exception {
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         // Try out of bounds thread priorities.
         try {
             builder.setThreadPriority(-21);
@@ -1569,7 +1569,7 @@ public class CronetUrlRequestContextTest {
         // Test that valid thread priority range (-20..19) is working.
         for (int threadPriority = -20; threadPriority < 20; threadPriority++) {
             builder.setThreadPriority(threadPriority);
-            CronetEngine engine = builder.build();
+            HttpEngine engine = builder.build();
             assertEquals(threadPriority, getThreadPriority(engine));
             engine.shutdown();
         }
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestTest.java
index 6d117565..3012894f 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestTest.java
@@ -14,7 +14,7 @@ import static org.junit.Assert.fail;
 import static org.chromium.net.CronetTestRule.assertContains;
 import static org.chromium.net.CronetTestRule.getContext;
 
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 import android.net.http.ExperimentalUrlRequest;
 import android.net.http.NetworkException;
 import android.net.http.QuicException;
@@ -385,7 +385,7 @@ public class CronetUrlRequestTest {
             }
 
             @Override
-            public void onFailed(UrlRequest request, UrlResponseInfo info, CronetException error) {
+            public void onFailed(UrlRequest request, UrlResponseInfo info, HttpException error) {
                 failedExpectation.set(true);
                 fail();
             }
@@ -762,7 +762,7 @@ public class CronetUrlRequestTest {
         assertNull(callback.mResponseInfo);
         assertNotNull(callback.mError);
         assertEquals(arbitraryNetError,
-                ((NetworkException) callback.mError).getCronetInternalErrorCode());
+                ((NetworkException) callback.mError).getInternalErrorCode());
         assertEquals(0, callback.mRedirectCount);
         assertTrue(callback.mOnErrorCalled);
         assertEquals(ResponseStep.ON_FAILED, callback.mResponseStep);
@@ -781,7 +781,7 @@ public class CronetUrlRequestTest {
         assertEquals(15, callback.mResponseInfo.getReceivedByteCount());
         assertNotNull(callback.mError);
         assertEquals(arbitraryNetError,
-                ((NetworkException) callback.mError).getCronetInternalErrorCode());
+                ((NetworkException) callback.mError).getInternalErrorCode());
         assertEquals(0, callback.mRedirectCount);
         assertTrue(callback.mOnErrorCalled);
         assertEquals(ResponseStep.ON_FAILED, callback.mResponseStep);
@@ -801,7 +801,7 @@ public class CronetUrlRequestTest {
         assertEquals(15, callback.mResponseInfo.getReceivedByteCount());
         assertNotNull(callback.mError);
         assertEquals(arbitraryNetError,
-                ((NetworkException) callback.mError).getCronetInternalErrorCode());
+                ((NetworkException) callback.mError).getInternalErrorCode());
         assertEquals(0, callback.mRedirectCount);
         assertTrue(callback.mOnErrorCalled);
         assertEquals(ResponseStep.ON_FAILED, callback.mResponseStep);
@@ -838,7 +838,7 @@ public class CronetUrlRequestTest {
         assertNull(callback.mResponseInfo);
         assertNotNull(callback.mError);
         assertTrue(callback.mOnErrorCalled);
-        assertEquals(-201, ((NetworkException) callback.mError).getCronetInternalErrorCode());
+        assertEquals(-201, ((NetworkException) callback.mError).getInternalErrorCode());
         assertContains("Exception in CronetUrlRequest: net::ERR_CERT_DATE_INVALID",
                 callback.mError.getMessage());
         assertEquals(ResponseStep.ON_FAILED, callback.mResponseStep);
@@ -872,7 +872,7 @@ public class CronetUrlRequestTest {
         assertNull(callback.mResponseInfo);
         assertNotNull(callback.mError);
         assertTrue(callback.mOnErrorCalled);
-        assertEquals(-201, ((NetworkException) callback.mError).getCronetInternalErrorCode());
+        assertEquals(-201, ((NetworkException) callback.mError).getInternalErrorCode());
         assertContains("Exception in CronetUrlRequest: net::ERR_CERT_DATE_INVALID",
                 callback.mError.getMessage());
         assertEquals(ResponseStep.ON_FAILED, callback.mResponseStep);
@@ -2276,11 +2276,11 @@ public class CronetUrlRequestTest {
             }
 
             @Override
-            public void onFailed(UrlRequest request, UrlResponseInfo info, CronetException error) {
+            public void onFailed(UrlRequest request, UrlResponseInfo info, HttpException error) {
                 assertTrue(error instanceof NetworkException);
-                assertEquals(netError, ((NetworkException) error).getCronetInternalErrorCode());
+                assertEquals(netError, ((NetworkException) error).getInternalErrorCode());
                 failedExpectation.set(
-                        ((NetworkException) error).getCronetInternalErrorCode() != netError);
+                        ((NetworkException) error).getInternalErrorCode() != netError);
                 done.open();
             }
 
@@ -2307,7 +2307,7 @@ public class CronetUrlRequestTest {
                 MockUrlRequestJobFactory.getMockUrlWithFailure(FailurePhase.START, netError));
         assertNull(callback.mResponseInfo);
         assertNotNull(callback.mError);
-        assertEquals(netError, ((NetworkException) callback.mError).getCronetInternalErrorCode());
+        assertEquals(netError, ((NetworkException) callback.mError).getInternalErrorCode());
         assertEquals(errorCode, ((NetworkException) callback.mError).getErrorCode());
         assertEquals(
                 immediatelyRetryable, ((NetworkException) callback.mError).immediatelyRetryable());
@@ -2355,7 +2355,7 @@ public class CronetUrlRequestTest {
         assertNull(callback.mResponseInfo);
         assertNotNull(callback.mError);
         assertEquals(cleartextNotPermitted,
-                ((NetworkException) callback.mError).getCronetInternalErrorCode());
+                ((NetworkException) callback.mError).getInternalErrorCode());
     }
 
     @Test
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/DiskStorageTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/DiskStorageTest.java
index c79ebd54..2caf67e6 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/DiskStorageTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/DiskStorageTest.java
@@ -12,8 +12,8 @@ import static org.junit.Assert.fail;
 import static org.chromium.net.CronetTestRule.getContext;
 import static org.chromium.net.CronetTestRule.getTestStorage;
 
-import android.net.http.CronetEngine;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.HttpEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.UrlRequest;
 import android.support.test.runner.AndroidJUnit4;
 
@@ -72,12 +72,12 @@ public class DiskStorageTest {
         assertTrue(readOnlyStorage.mkdir());
         // Setting the storage directory as readonly has no effect.
         assertTrue(readOnlyStorage.setReadOnly());
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         builder.setStoragePath(mReadOnlyStoragePath);
-        builder.enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISK, 1024 * 1024);
+        builder.enableHttpCache(HttpEngine.Builder.HTTP_CACHE_DISK, 1024 * 1024);
 
-        CronetEngine cronetEngine = builder.build();
+        HttpEngine cronetEngine = builder.build();
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         UrlRequest.Builder requestBuilder =
@@ -136,12 +136,12 @@ public class DiskStorageTest {
             }
         }
 
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         builder.setStoragePath(getTestStorage(getContext()));
-        builder.enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISK, 1024 * 1024);
+        builder.enableHttpCache(HttpEngine.Builder.HTTP_CACHE_DISK, 1024 * 1024);
 
-        CronetEngine cronetEngine = builder.build();
+        HttpEngine cronetEngine = builder.build();
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         UrlRequest.Builder requestBuilder =
@@ -178,12 +178,12 @@ public class DiskStorageTest {
     // Tests that if cache version is current, Cronet does not purge the directory.
     public void testCacheVersionCurrent() throws Exception {
         // Initialize a CronetEngine and shut it down.
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         builder.setStoragePath(getTestStorage(getContext()));
-        builder.enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISK, 1024 * 1024);
+        builder.enableHttpCache(HttpEngine.Builder.HTTP_CACHE_DISK, 1024 * 1024);
 
-        CronetEngine cronetEngine = builder.build();
+        HttpEngine cronetEngine = builder.build();
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         UrlRequest.Builder requestBuilder =
@@ -209,7 +209,7 @@ public class DiskStorageTest {
         }
 
         // Creates a new CronetEngine and make a request.
-        CronetEngine engine = builder.build();
+        HttpEngine engine = builder.build();
         TestUrlRequestCallback callback2 = new TestUrlRequestCallback();
         String url2 = NativeTestServer.getFileURL("/cacheable.txt");
         UrlRequest.Builder requestBuilder2 =
@@ -241,16 +241,16 @@ public class DiskStorageTest {
     // Tests that enableHttpCache throws if storage path not set
     public void testEnableHttpCacheThrowsIfStoragePathNotSet() throws Exception {
         // Initialize a CronetEngine and shut it down.
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         try {
-            builder.enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISK, 1024 * 1024);
+            builder.enableHttpCache(HttpEngine.Builder.HTTP_CACHE_DISK, 1024 * 1024);
             fail("Enabling http cache without a storage path should throw an exception");
         } catch (IllegalArgumentException e) {
             // Expected
         }
 
-        CronetEngine cronetEngine = builder.build();
+        HttpEngine cronetEngine = builder.build();
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         UrlRequest.Builder requestBuilder =
@@ -276,11 +276,11 @@ public class DiskStorageTest {
     public void testPrefsFileCreatedWithoutHttpCache() throws Exception {
         // Initialize a CronetEngine and shut it down.
         String testStorage = getTestStorage(getContext());
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         builder.setStoragePath(testStorage);
 
-        CronetEngine cronetEngine = builder.build();
+        HttpEngine cronetEngine = builder.build();
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         String url = NativeTestServer.getFileURL("/cacheable.txt");
         UrlRequest.Builder requestBuilder =
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/ExperimentalOptionsTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/ExperimentalOptionsTest.java
index 3852ba71..1da41043 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/ExperimentalOptionsTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/ExperimentalOptionsTest.java
@@ -16,9 +16,9 @@ import static org.chromium.net.CronetTestRule.getContext;
 import static org.chromium.net.CronetTestRule.getTestStorage;
 
 import android.net.http.BidirectionalStream;
-import android.net.http.CronetEngine;
+import android.net.http.HttpEngine;
 import android.net.http.ExperimentalBidirectionalStream;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.NetworkException;
 import android.net.http.UrlRequest;
 import android.support.test.runner.AndroidJUnit4;
@@ -63,12 +63,12 @@ public class ExperimentalOptionsTest {
     public ExpectedException expectedException = ExpectedException.none();
 
     private static final String TAG = ExperimentalOptionsTest.class.getSimpleName();
-    private ExperimentalCronetEngine.Builder mBuilder;
+    private ExperimentalHttpEngine.Builder mBuilder;
     private CountDownLatch mHangingUrlLatch;
 
     @Before
     public void setUp() throws Exception {
-        mBuilder = new ExperimentalCronetEngine.Builder(getContext());
+        mBuilder = new ExperimentalHttpEngine.Builder(getContext());
         mHangingUrlLatch = new CountDownLatch(1);
         CronetTestUtil.setMockCertVerifierForTesting(
                 mBuilder, QuicTestServer.createMockCertVerifier());
@@ -95,7 +95,7 @@ public class ExperimentalOptionsTest {
                 new JSONObject().put("HostResolverRules", hostResolverParams);
         mBuilder.setExperimentalOptions(experimentalOptions.toString());
 
-        CronetEngine cronetEngine = mBuilder.build();
+        HttpEngine cronetEngine = mBuilder.build();
         cronetEngine.startNetLogToFile(logfile.getPath(), false);
         String url = Http2TestServer.getEchoMethodUrl();
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
@@ -125,7 +125,7 @@ public class ExperimentalOptionsTest {
 
         JSONObject experimentalOptions = new JSONObject().put("ssl_key_log_file", file.getPath());
         mBuilder.setExperimentalOptions(experimentalOptions.toString());
-        CronetEngine cronetEngine = mBuilder.build();
+        HttpEngine cronetEngine = mBuilder.build();
 
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         UrlRequest.Builder builder =
@@ -198,7 +198,7 @@ public class ExperimentalOptionsTest {
         String testUrl = new URL("http", testHost, realPort, javaUrl.getPath()).toString();
 
         mBuilder.setStoragePath(getTestStorage(getContext()))
-                .enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISK, 0);
+                .enableHttpCache(HttpEngine.Builder.HTTP_CACHE_DISK, 0);
 
         // Set a short delay so the pref gets written quickly.
         JSONObject staleDns = new JSONObject()
@@ -252,7 +252,7 @@ public class ExperimentalOptionsTest {
             expectedException.expectMessage("Experimental options parsing failed");
         }
         mBuilder.setExperimentalOptions("Not a serialized JSON object");
-        CronetEngine cronetEngine = mBuilder.build();
+        HttpEngine cronetEngine = mBuilder.build();
     }
 
     @Test
@@ -265,7 +265,7 @@ public class ExperimentalOptionsTest {
         JSONObject experimentalOptions =
                 new JSONObject().put("bidi_stream_detect_broken_connection", heartbeatIntervalSecs);
         mBuilder.setExperimentalOptions(experimentalOptions.toString());
-        ExperimentalCronetEngine cronetEngine = (ExperimentalCronetEngine) mBuilder.build();
+        ExperimentalHttpEngine cronetEngine = (ExperimentalHttpEngine) mBuilder.build();
 
         TestBidirectionalStreamCallback callback = new TestBidirectionalStreamCallback();
         ExperimentalBidirectionalStream.Builder builder =
@@ -294,7 +294,7 @@ public class ExperimentalOptionsTest {
         JSONObject experimentalOptions =
                 new JSONObject().put("bidi_stream_detect_broken_connection", heartbeatIntervalSecs);
         mBuilder.setExperimentalOptions(experimentalOptions.toString());
-        ExperimentalCronetEngine cronetEngine = (ExperimentalCronetEngine) mBuilder.build();
+        ExperimentalHttpEngine cronetEngine = (ExperimentalHttpEngine) mBuilder.build();
         cronetEngine.addRequestFinishedListener(requestFinishedListener);
         ExperimentalBidirectionalStream.Builder builder =
                 cronetEngine
@@ -308,7 +308,7 @@ public class ExperimentalOptionsTest {
         assertContains("Exception in BidirectionalStream: net::ERR_HTTP2_PING_FAILED",
                 callback.mError.getMessage());
         assertEquals(NetError.ERR_HTTP2_PING_FAILED,
-                ((NetworkException) callback.mError).getCronetInternalErrorCode());
+                ((NetworkException) callback.mError).getInternalErrorCode());
         cronetEngine.shutdown();
     }
 
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/MockCertVerifierTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/MockCertVerifierTest.java
index 72333e8d..bf67a4d0 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/MockCertVerifierTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/MockCertVerifierTest.java
@@ -10,7 +10,7 @@ import static org.chromium.net.CronetTestRule.SERVER_CERT_PEM;
 import static org.chromium.net.CronetTestRule.SERVER_KEY_PKCS8_PEM;
 import static org.chromium.net.CronetTestRule.getContext;
 
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.UrlRequest;
 import android.support.test.runner.AndroidJUnit4;
 
@@ -34,7 +34,7 @@ public class MockCertVerifierTest {
     @Rule
     public final CronetTestRule mTestRule = new CronetTestRule();
 
-    private ExperimentalCronetEngine mCronetEngine;
+    private ExperimentalHttpEngine mCronetEngine;
 
     @Before
     public void setUp() throws Exception {
@@ -57,8 +57,8 @@ public class MockCertVerifierTest {
     @SmallTest
     @Feature({"Cronet"})
     public void testRequest_failsWithoutMockVerifier() {
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         mCronetEngine = builder.build();
 
         String url = Http2TestServer.getEchoAllHeadersUrl();
@@ -71,8 +71,8 @@ public class MockCertVerifierTest {
     @SmallTest
     @Feature({"Cronet"})
     public void testRequest_passesWithMockVerifier() {
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
 
         CronetTestUtil.setMockCertVerifierForTesting(
                 builder, MockCertVerifier.createFreeForAllMockCertVerifier());
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/NQETest.java b/components/cronet/android/test/javatests/src/org/chromium/net/NQETest.java
index 3f5821bb..b10fded6 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/NQETest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/NQETest.java
@@ -11,7 +11,7 @@ import static org.junit.Assert.fail;
 import static org.chromium.net.CronetTestRule.getContext;
 import static org.chromium.net.CronetTestRule.getTestStorage;
 
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.UrlRequest;
 import android.os.StrictMode;
 import android.support.test.runner.AndroidJUnit4;
@@ -97,9 +97,9 @@ public class NQETest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testNotEnabled() throws Exception {
-        ExperimentalCronetEngine.Builder cronetEngineBuilder =
-                new ExperimentalCronetEngine.Builder(getContext());
-        final ExperimentalCronetEngine cronetEngine = cronetEngineBuilder.build();
+        ExperimentalHttpEngine.Builder cronetEngineBuilder =
+                new ExperimentalHttpEngine.Builder(getContext());
+        final ExperimentalHttpEngine cronetEngine = cronetEngineBuilder.build();
         Executor networkQualityExecutor = Executors.newSingleThreadExecutor();
         TestNetworkQualityRttListener rttListener =
                 new TestNetworkQualityRttListener(networkQualityExecutor);
@@ -132,13 +132,13 @@ public class NQETest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testListenerRemoved() throws Exception {
-        ExperimentalCronetEngine.Builder cronetEngineBuilder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder cronetEngineBuilder =
+                new ExperimentalHttpEngine.Builder(getContext());
         TestExecutor networkQualityExecutor = new TestExecutor();
         TestNetworkQualityRttListener rttListener =
                 new TestNetworkQualityRttListener(networkQualityExecutor);
         cronetEngineBuilder.enableNetworkQualityEstimator(true);
-        final ExperimentalCronetEngine cronetEngine = cronetEngineBuilder.build();
+        final ExperimentalHttpEngine cronetEngine = cronetEngineBuilder.build();
         cronetEngine.configureNetworkQualityEstimatorForTesting(true, true, false);
 
         cronetEngine.addRttListener(rttListener);
@@ -170,8 +170,8 @@ public class NQETest {
     @OnlyRunNativeCronet
     @DisabledTest(message = "crbug.com/796260")
     public void testQuicDisabled() throws Exception {
-        ExperimentalCronetEngine.Builder cronetEngineBuilder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder cronetEngineBuilder =
+                new ExperimentalHttpEngine.Builder(getContext());
         assertTrue(RttThroughputValues.INVALID_RTT_THROUGHPUT < 0);
         Executor listenersExecutor = Executors.newSingleThreadExecutor(new ExecutorThreadFactory());
         TestNetworkQualityRttListener rttListener =
@@ -190,7 +190,7 @@ public class NQETest {
         cronetEngineBuilder.setExperimentalOptions(experimentalOptions.toString());
 
         cronetEngineBuilder.setStoragePath(getTestStorage(getContext()));
-        final ExperimentalCronetEngine cronetEngine = cronetEngineBuilder.build();
+        final ExperimentalHttpEngine cronetEngine = cronetEngineBuilder.build();
         cronetEngine.configureNetworkQualityEstimatorForTesting(true, true, true);
 
         cronetEngine.addRttListener(rttListener);
@@ -279,8 +279,8 @@ public class NQETest {
         // When the loop is run for the first time, network quality is written to the disk. The
         // test verifies that in the next loop, the network quality is read back.
         for (int i = 0; i <= 1; ++i) {
-            ExperimentalCronetEngine.Builder cronetEngineBuilder =
-                    new ExperimentalCronetEngine.Builder(getContext());
+            ExperimentalHttpEngine.Builder cronetEngineBuilder =
+                    new ExperimentalHttpEngine.Builder(getContext());
             assertTrue(RttThroughputValues.INVALID_RTT_THROUGHPUT < 0);
             Executor listenersExecutor =
                     Executors.newSingleThreadExecutor(new ExecutorThreadFactory());
@@ -302,7 +302,7 @@ public class NQETest {
 
             cronetEngineBuilder.setStoragePath(getTestStorage(getContext()));
 
-            final ExperimentalCronetEngine cronetEngine = cronetEngineBuilder.build();
+            final ExperimentalHttpEngine cronetEngine = cronetEngineBuilder.build();
             cronetEngine.configureNetworkQualityEstimatorForTesting(true, true, true);
             cronetEngine.addRttListener(rttListener);
 
@@ -365,8 +365,8 @@ public class NQETest {
     @OnlyRunNativeCronet
     @DisabledTest(message = "crbug.com/796260")
     public void testQuicDisabledWithParams() throws Exception {
-        ExperimentalCronetEngine.Builder cronetEngineBuilder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder cronetEngineBuilder =
+                new ExperimentalHttpEngine.Builder(getContext());
         Executor listenersExecutor = Executors.newSingleThreadExecutor(new ExecutorThreadFactory());
         TestNetworkQualityRttListener rttListener =
                 new TestNetworkQualityRttListener(listenersExecutor);
@@ -384,7 +384,7 @@ public class NQETest {
 
         cronetEngineBuilder.enableNetworkQualityEstimator(true).enableHttp2(true).enableQuic(false);
         cronetEngineBuilder.setExperimentalOptions(experimentalOptions.toString());
-        final ExperimentalCronetEngine cronetEngine = cronetEngineBuilder.build();
+        final ExperimentalHttpEngine cronetEngine = cronetEngineBuilder.build();
         cronetEngine.configureNetworkQualityEstimatorForTesting(true, true, false);
 
         cronetEngine.addRttListener(rttListener);
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/NetworkChangeNotifierTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/NetworkChangeNotifierTest.java
index 880473f8..401a9881 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/NetworkChangeNotifierTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/NetworkChangeNotifierTest.java
@@ -107,7 +107,7 @@ public class NetworkChangeNotifierTest {
         assertNotNull(callback.mError);
         assertTrue(callback.mOnErrorCalled);
         assertEquals(NetError.ERR_NETWORK_CHANGED,
-                ((NetworkException) callback.mError).getCronetInternalErrorCode());
+                ((NetworkException) callback.mError).getInternalErrorCode());
         assertContains("Exception in CronetUrlRequest: net::ERR_NETWORK_CHANGED",
                 callback.mError.getMessage());
     }
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/NetworkErrorLoggingTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/NetworkErrorLoggingTest.java
index 5bf94ba7..80188f09 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/NetworkErrorLoggingTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/NetworkErrorLoggingTest.java
@@ -11,8 +11,8 @@ import static org.chromium.net.CronetTestRule.SERVER_CERT_PEM;
 import static org.chromium.net.CronetTestRule.SERVER_KEY_PKCS8_PEM;
 import static org.chromium.net.CronetTestRule.getContext;
 
-import android.net.http.CronetEngine;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.HttpEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.UrlRequest;
 import android.support.test.runner.AndroidJUnit4;
 
@@ -35,7 +35,7 @@ public class NetworkErrorLoggingTest {
     @Rule
     public final CronetTestRule mTestRule = new CronetTestRule();
 
-    private CronetEngine mCronetEngine;
+    private HttpEngine mCronetEngine;
 
     @Before
     public void setUp() throws Exception {
@@ -57,8 +57,8 @@ public class NetworkErrorLoggingTest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testManualReportUpload() throws Exception {
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         CronetTestUtil.setMockCertVerifierForTesting(
                 builder, QuicTestServer.createMockCertVerifier());
         mCronetEngine = builder.build();
@@ -84,8 +84,8 @@ public class NetworkErrorLoggingTest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testUploadNELReportsFromHeaders() throws Exception {
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         builder.setExperimentalOptions("{\"NetworkErrorLogging\": {\"enable\": true}}");
         CronetTestUtil.setMockCertVerifierForTesting(
                 builder, QuicTestServer.createMockCertVerifier());
@@ -120,8 +120,8 @@ public class NetworkErrorLoggingTest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testUploadNELReportsFromPreloadedPolicy() throws Exception {
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         String serverOrigin = Http2TestServer.getServerUrl();
         String collectorUrl = Http2TestServer.getReportingCollectorUrl();
         builder.setExperimentalOptions(""
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/PkpTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/PkpTest.java
index 005849cc..351fad9f 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/PkpTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/PkpTest.java
@@ -14,8 +14,8 @@ import static org.chromium.net.CronetTestRule.SERVER_KEY_PKCS8_PEM;
 import static org.chromium.net.CronetTestRule.getContext;
 import static org.chromium.net.CronetTestRule.getTestStorage;
 
-import android.net.http.CronetEngine;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.HttpEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.NetworkException;
 import android.net.http.UrlRequest;
 import android.support.test.runner.AndroidJUnit4;
@@ -58,8 +58,8 @@ public class PkpTest {
     @Rule
     public final CronetTestRule mTestRule = new CronetTestRule();
 
-    private CronetEngine mCronetEngine;
-    private ExperimentalCronetEngine.Builder mBuilder;
+    private HttpEngine mCronetEngine;
+    private ExperimentalHttpEngine.Builder mBuilder;
     private TestUrlRequestCallback mListener;
     private String mServerUrl; // https://test.example.com:8443
     private String mServerHost; // test.example.com
@@ -401,7 +401,7 @@ public class PkpTest {
      */
     private void assertErrorResponse() {
         assertNotNull("Expected an error", mListener.mError);
-        int errorCode = ((NetworkException) mListener.mError).getCronetInternalErrorCode();
+        int errorCode = ((NetworkException) mListener.mError).getInternalErrorCode();
         Set<Integer> expectedErrors = new HashSet<>();
         expectedErrors.add(NetError.ERR_CONNECTION_REFUSED);
         expectedErrors.add(NetError.ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN);
@@ -416,7 +416,7 @@ public class PkpTest {
     private void assertSuccessfulResponse() {
         if (mListener.mError != null) {
             fail("Did not expect an error but got error code "
-                    + ((NetworkException) mListener.mError).getCronetInternalErrorCode());
+                    + ((NetworkException) mListener.mError).getInternalErrorCode());
         }
         assertNotNull("Expected non-null response from the server", mListener.mResponseInfo);
         assertEquals(200, mListener.mResponseInfo.getHttpStatusCode());
@@ -425,14 +425,14 @@ public class PkpTest {
     private void createCronetEngineBuilder(boolean bypassPinningForLocalAnchors, boolean knownRoot)
             throws Exception {
         // Set common CronetEngine parameters
-        mBuilder = new ExperimentalCronetEngine.Builder(getContext());
+        mBuilder = new ExperimentalHttpEngine.Builder(getContext());
         mBuilder.enablePublicKeyPinningBypassForLocalTrustAnchors(bypassPinningForLocalAnchors);
         JSONObject hostResolverParams = CronetTestUtil.generateHostResolverRules();
         JSONObject experimentalOptions = new JSONObject()
                                                  .put("HostResolverRules", hostResolverParams);
         mBuilder.setExperimentalOptions(experimentalOptions.toString());
         mBuilder.setStoragePath(getTestStorage(getContext()));
-        mBuilder.enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISK_NO_HTTP, 1000 * 1024);
+        mBuilder.enableHttpCache(HttpEngine.Builder.HTTP_CACHE_DISK_NO_HTTP, 1000 * 1024);
         final String[] server_certs = {SERVER_CERT_PEM};
         CronetTestUtil.setMockCertVerifierForTesting(
                 mBuilder, MockCertVerifier.createMockCertVerifier(server_certs, knownRoot));
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/QuicTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/QuicTest.java
index 19da352e..6a28e6bf 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/QuicTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/QuicTest.java
@@ -10,8 +10,8 @@ import static org.junit.Assert.assertTrue;
 import static org.chromium.net.CronetTestRule.getContext;
 import static org.chromium.net.CronetTestRule.getTestStorage;
 
-import android.net.http.CronetEngine;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.HttpEngine;
+import android.net.http.ExperimentalHttpEngine;
 import android.net.http.RequestFinishedInfo;
 import android.net.http.UrlRequest;
 import android.net.http.UrlResponseInfo;
@@ -48,7 +48,7 @@ public class QuicTest {
     public final CronetTestRule mTestRule = new CronetTestRule();
 
     private static final String TAG = QuicTest.class.getSimpleName();
-    private ExperimentalCronetEngine.Builder mBuilder;
+    private ExperimentalHttpEngine.Builder mBuilder;
 
     @Before
     public void setUp() throws Exception {
@@ -56,7 +56,7 @@ public class QuicTest {
         System.loadLibrary("cronet_tests");
         QuicTestServer.startQuicTestServer(getContext());
 
-        mBuilder = new ExperimentalCronetEngine.Builder(getContext());
+        mBuilder = new ExperimentalHttpEngine.Builder(getContext());
         mBuilder.enableNetworkQualityEstimator(true).enableQuic(true);
         mBuilder.addQuicHint(QuicTestServer.getServerHost(), QuicTestServer.getServerPort(),
                 QuicTestServer.getServerPort());
@@ -81,7 +81,7 @@ public class QuicTest {
                                                  .put("NetworkQualityEstimator", nqeParams);
         mBuilder.setExperimentalOptions(experimentalOptions.toString());
         mBuilder.setStoragePath(getTestStorage(getContext()));
-        mBuilder.enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISK_NO_HTTP, 1000 * 1024);
+        mBuilder.enableHttpCache(HttpEngine.Builder.HTTP_CACHE_DISK_NO_HTTP, 1000 * 1024);
         CronetTestUtil.setMockCertVerifierForTesting(
                 mBuilder, QuicTestServer.createMockCertVerifier());
     }
@@ -96,7 +96,7 @@ public class QuicTest {
     @Feature({"Cronet"})
     @OnlyRunNativeCronet
     public void testQuicLoadUrl() throws Exception {
-        ExperimentalCronetEngine cronetEngine = mBuilder.build();
+        ExperimentalHttpEngine cronetEngine = mBuilder.build();
         String quicURL = QuicTestServer.getServerURL() + "/simple.txt";
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
 
@@ -134,10 +134,10 @@ public class QuicTest {
         cronetEngine.shutdown();
 
         // Make another request using a new context but with no QUIC hints.
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
         builder.setStoragePath(getTestStorage(getContext()));
-        builder.enableHttpCache(CronetEngine.Builder.HTTP_CACHE_DISK, 1000 * 1024);
+        builder.enableHttpCache(HttpEngine.Builder.HTTP_CACHE_DISK, 1000 * 1024);
         builder.enableQuic(true);
         JSONObject hostResolverParams = CronetTestUtil.generateHostResolverRules();
         JSONObject experimentalOptions = new JSONObject()
@@ -179,7 +179,7 @@ public class QuicTest {
     @OnlyRunNativeCronet
     @SuppressWarnings("deprecation")
     public void testNQEWithQuic() throws Exception {
-        ExperimentalCronetEngine cronetEngine = mBuilder.build();
+        ExperimentalHttpEngine cronetEngine = mBuilder.build();
         String quicURL = QuicTestServer.getServerURL() + "/simple.txt";
 
         TestNetworkQualityRttListener rttListener =
@@ -258,7 +258,7 @@ public class QuicTest {
     @OnlyRunNativeCronet
     @Feature({"Cronet"})
     public void testMetricsWithQuic() throws Exception {
-        ExperimentalCronetEngine cronetEngine = mBuilder.build();
+        ExperimentalHttpEngine cronetEngine = mBuilder.build();
         TestRequestFinishedListener requestFinishedListener = new TestRequestFinishedListener();
         cronetEngine.addRequestFinishedListener(requestFinishedListener);
 
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/TestBidirectionalStreamCallback.java b/components/cronet/android/test/javatests/src/org/chromium/net/TestBidirectionalStreamCallback.java
index 7a671927..efb3b8c6 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/TestBidirectionalStreamCallback.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/TestBidirectionalStreamCallback.java
@@ -5,7 +5,7 @@
 package org.chromium.net;
 
 import android.net.http.BidirectionalStream;
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 import android.net.http.UrlResponseInfo;
 import android.os.ConditionVariable;
 
@@ -29,7 +29,7 @@ import java.util.concurrent.ThreadFactory;
  */
 public class TestBidirectionalStreamCallback extends BidirectionalStream.Callback {
     public UrlResponseInfo mResponseInfo;
-    public CronetException mError;
+    public HttpException mError;
 
     public ResponseStep mResponseStep = ResponseStep.NOTHING;
 
@@ -298,7 +298,7 @@ public class TestBidirectionalStreamCallback extends BidirectionalStream.Callbac
     }
 
     @Override
-    public void onFailed(BidirectionalStream stream, UrlResponseInfo info, CronetException error) {
+    public void onFailed(BidirectionalStream stream, UrlResponseInfo info, HttpException error) {
         checkOnValidThread();
         assertTrue(stream.isDone());
         // Shouldn't happen after success.
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/TestUrlRequestCallback.java b/components/cronet/android/test/javatests/src/org/chromium/net/TestUrlRequestCallback.java
index c5d830d2..4b8d6102 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/TestUrlRequestCallback.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/TestUrlRequestCallback.java
@@ -13,7 +13,7 @@ import static junit.framework.Assert.assertTrue;
 import static org.chromium.net.CronetTestRule.assertContains;
 
 import android.net.http.CallbackException;
-import android.net.http.CronetException;
+import android.net.http.HttpException;
 import android.net.http.InlineExecutionProhibitedException;
 import android.net.http.UrlRequest;
 import android.net.http.UrlResponseInfo;
@@ -36,7 +36,7 @@ public class TestUrlRequestCallback extends UrlRequest.Callback {
     public ArrayList<UrlResponseInfo> mRedirectResponseInfoList = new ArrayList<UrlResponseInfo>();
     public ArrayList<String> mRedirectUrlList = new ArrayList<String>();
     public UrlResponseInfo mResponseInfo;
-    public CronetException mError;
+    public HttpException mError;
 
     public ResponseStep mResponseStep = ResponseStep.NOTHING;
 
@@ -269,7 +269,7 @@ public class TestUrlRequestCallback extends UrlRequest.Callback {
     }
 
     @Override
-    public void onFailed(UrlRequest request, UrlResponseInfo info, CronetException error) {
+    public void onFailed(UrlRequest request, UrlResponseInfo info, HttpException error) {
         // If the failure is because of prohibited direct execution, the test shouldn't fail
         // since the request already did.
         if (error.getCause() instanceof InlineExecutionProhibitedException) {
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/impl/CronetLoggerTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/impl/CronetLoggerTest.java
index dbbe05ad..04f63209 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/impl/CronetLoggerTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/impl/CronetLoggerTest.java
@@ -13,7 +13,7 @@ import static org.junit.Assert.assertNotEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
-import static android.net.http.CronetEngine.Builder.HTTP_CACHE_DISK_NO_HTTP;
+import static android.net.http.HttpEngine.Builder.HTTP_CACHE_DISK_NO_HTTP;
 
 import android.content.Context;
 import android.os.Build;
@@ -32,13 +32,13 @@ import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 import org.chromium.base.test.util.Feature;
-import android.net.http.CronetEngine;
+import android.net.http.HttpEngine;
 import org.chromium.net.CronetLoggerTestRule;
 import org.chromium.net.CronetTestRule;
 import org.chromium.net.CronetTestRule.CronetTestFramework;
 import org.chromium.net.CronetTestRule.OnlyRunNativeCronet;
 import org.chromium.net.CronetTestRule.RequiresMinAndroidApi;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.ExperimentalHttpEngine;
 import org.chromium.net.NativeTestServer;
 import org.chromium.net.TestUrlRequestCallback;
 import android.net.http.UrlRequest;
@@ -202,9 +202,9 @@ public final class CronetLoggerTest {
     @SmallTest
     @Feature({"Cronet"})
     public void testHttpCacheModeEnum() {
-        final int publicBuilderHttpCacheModes[] = {CronetEngine.Builder.HTTP_CACHE_DISABLED,
-                CronetEngine.Builder.HTTP_CACHE_IN_MEMORY,
-                CronetEngine.Builder.HTTP_CACHE_DISK_NO_HTTP, CronetEngine.Builder.HTTP_CACHE_DISK};
+        final int publicBuilderHttpCacheModes[] = {HttpEngine.Builder.HTTP_CACHE_DISABLED,
+                HttpEngine.Builder.HTTP_CACHE_IN_MEMORY,
+                HttpEngine.Builder.HTTP_CACHE_DISK_NO_HTTP, HttpEngine.Builder.HTTP_CACHE_DISK};
         for (int publicBuilderHttpCacheMode : publicBuilderHttpCacheModes) {
             HttpCacheMode cacheModeEnum =
                     HttpCacheMode.fromPublicBuilderCacheMode(publicBuilderHttpCacheMode);
@@ -237,10 +237,10 @@ public final class CronetLoggerTest {
         final String url = NativeTestServer.getEchoBodyURL();
         JSONObject jsonExperimentalOptions = new JSONObject().put("skip_logging", true);
         final String experimentalOptions = jsonExperimentalOptions.toString();
-        ExperimentalCronetEngine.Builder builder =
-                (ExperimentalCronetEngine.Builder) mTestFramework.mBuilder;
+        ExperimentalHttpEngine.Builder builder =
+                (ExperimentalHttpEngine.Builder) mTestFramework.mBuilder;
         builder.setExperimentalOptions(experimentalOptions);
-        CronetEngine engine = builder.build();
+        HttpEngine engine = builder.build();
 
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         UrlRequest.Builder requestBuilder =
@@ -276,8 +276,8 @@ public final class CronetLoggerTest {
         final boolean isNetworkQualityEstimatorEnabled = true;
         final int threadPriority = THREAD_PRIORITY_DEFAULT;
 
-        ExperimentalCronetEngine.Builder builder =
-                (ExperimentalCronetEngine.Builder) mTestFramework.mBuilder;
+        ExperimentalHttpEngine.Builder builder =
+                (ExperimentalHttpEngine.Builder) mTestFramework.mBuilder;
 
         builder.setExperimentalOptions(experimentalOptions);
         builder.enablePublicKeyPinningBypassForLocalTrustAnchors(
@@ -291,7 +291,7 @@ public final class CronetLoggerTest {
         builder.enableNetworkQualityEstimator(isNetworkQualityEstimatorEnabled);
         builder.setThreadPriority(threadPriority);
 
-        CronetEngine engine = builder.build();
+        HttpEngine engine = builder.build();
         final CronetEngineBuilderInfo builderInfo = mTestLogger.getLastCronetEngineBuilderInfo();
         final CronetVersion version = mTestLogger.getLastCronetVersion();
         final CronetSource source = mTestLogger.getLastCronetSource();
@@ -324,7 +324,7 @@ public final class CronetLoggerTest {
     @Feature({"Cronet"})
     public void testEngineCreationAndTrafficInfoEngineId() {
         final String url = "www.example.com";
-        CronetEngine engine = mTestFramework.startEngine();
+        HttpEngine engine = mTestFramework.startEngine();
         final int engineId = mTestLogger.getLastCronetEngineId();
 
         TestUrlRequestCallback callback1 = new TestUrlRequestCallback();
@@ -358,11 +358,11 @@ public final class CronetLoggerTest {
     @Feature({"Cronet"})
     public void testMultipleEngineCreationAndTrafficInfoEngineId() {
         final String url = "www.example.com";
-        final CronetEngine.Builder engineBuilder = mTestFramework.mBuilder;
+        final HttpEngine.Builder engineBuilder = mTestFramework.mBuilder;
 
-        CronetEngine engine1 = engineBuilder.build();
+        HttpEngine engine1 = engineBuilder.build();
         final int engine1Id = mTestLogger.getLastCronetEngineId();
-        CronetEngine engine2 = engineBuilder.build();
+        HttpEngine engine2 = engineBuilder.build();
         final int engine2Id = mTestLogger.getLastCronetEngineId();
 
         TestUrlRequestCallback callback1 = new TestUrlRequestCallback();
@@ -397,7 +397,7 @@ public final class CronetLoggerTest {
     @OnlyRunNativeCronet
     public void testSuccessfulRequestNative() {
         final String url = NativeTestServer.getEchoBodyURL();
-        CronetEngine engine = mTestFramework.startEngine();
+        HttpEngine engine = mTestFramework.startEngine();
 
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         UrlRequest.Builder requestBuilder =
@@ -431,7 +431,7 @@ public final class CronetLoggerTest {
     @OnlyRunNativeCronet
     public void testFailedRequestNative() {
         final String url = "www.unreachable-url.com";
-        CronetEngine engine = mTestFramework.startEngine();
+        HttpEngine engine = mTestFramework.startEngine();
 
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         UrlRequest.Builder requestBuilder =
@@ -466,7 +466,7 @@ public final class CronetLoggerTest {
     @OnlyRunNativeCronet
     public void testCanceledRequestNative() {
         final String url = NativeTestServer.getEchoBodyURL();
-        CronetEngine engine = mTestFramework.startEngine();
+        HttpEngine engine = mTestFramework.startEngine();
 
         TestUrlRequestCallback callback = new TestUrlRequestCallback();
         callback.setAutoAdvance(false);
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetBufferedOutputStreamTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetBufferedOutputStreamTest.java
index a25d62b7..633b6add 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetBufferedOutputStreamTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetBufferedOutputStreamTest.java
@@ -21,7 +21,7 @@ import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import org.chromium.base.test.util.Feature;
-import android.net.http.CronetEngine;
+import android.net.http.HttpEngine;
 import org.chromium.net.CronetTestRule;
 import org.chromium.net.CronetTestRule.CompareDefaultWithCronet;
 import org.chromium.net.CronetTestRule.OnlyRunCronetHttpURLConnection;
@@ -42,7 +42,7 @@ public class CronetBufferedOutputStreamTest {
 
     @Before
     public void setUp() throws Exception {
-        mTestRule.setStreamHandlerFactory(new CronetEngine.Builder(getContext()).build());
+        mTestRule.setStreamHandlerFactory(new HttpEngine.Builder(getContext()).build());
         assertTrue(NativeTestServer.startNativeTestServer(getContext()));
     }
 
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetChunkedOutputStreamTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetChunkedOutputStreamTest.java
index b2e36476..6b60b90c 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetChunkedOutputStreamTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetChunkedOutputStreamTest.java
@@ -21,7 +21,7 @@ import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import org.chromium.base.test.util.Feature;
-import android.net.http.CronetEngine;
+import android.net.http.HttpEngine;
 import org.chromium.net.CronetTestRule;
 import org.chromium.net.CronetTestRule.CompareDefaultWithCronet;
 import org.chromium.net.CronetTestRule.OnlyRunCronetHttpURLConnection;
@@ -53,7 +53,7 @@ public class CronetChunkedOutputStreamTest {
 
     @Before
     public void setUp() throws Exception {
-        mTestRule.setStreamHandlerFactory(new CronetEngine.Builder(getContext()).build());
+        mTestRule.setStreamHandlerFactory(new HttpEngine.Builder(getContext()).build());
         assertTrue(NativeTestServer.startNativeTestServer(getContext()));
     }
 
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetFixedModeOutputStreamTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetFixedModeOutputStreamTest.java
index 8bb23988..d0c1a600 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetFixedModeOutputStreamTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetFixedModeOutputStreamTest.java
@@ -26,7 +26,7 @@ import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 
 import org.chromium.base.test.util.Feature;
-import android.net.http.CronetEngine;
+import android.net.http.HttpEngine;
 import org.chromium.net.CronetTestRule;
 import org.chromium.net.CronetTestRule.CompareDefaultWithCronet;
 import org.chromium.net.CronetTestRule.OnlyRunCronetHttpURLConnection;
@@ -59,7 +59,7 @@ public class CronetFixedModeOutputStreamTest {
 
     @Before
     public void setUp() throws Exception {
-        mTestRule.setStreamHandlerFactory(new CronetEngine.Builder(getContext()).build());
+        mTestRule.setStreamHandlerFactory(new HttpEngine.Builder(getContext()).build());
         assertTrue(NativeTestServer.startNativeTestServer(getContext()));
     }
 
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetHttpURLConnectionTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetHttpURLConnectionTest.java
index 6481b590..574d2dac 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetHttpURLConnectionTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/CronetHttpURLConnectionTest.java
@@ -27,8 +27,8 @@ import org.junit.runner.RunWith;
 
 import org.chromium.base.Log;
 import org.chromium.base.test.util.Feature;
-import android.net.http.CronetEngine;
-import android.net.http.CronetException;
+import android.net.http.HttpEngine;
+import android.net.http.HttpException;
 import org.chromium.net.CronetTestRule;
 import org.chromium.net.CronetTestRule.CompareDefaultWithCronet;
 import org.chromium.net.CronetTestRule.OnlyRunCronetHttpURLConnection;
@@ -75,11 +75,11 @@ public class CronetHttpURLConnectionTest {
     @Rule
     public final CronetTestRule mTestRule = new CronetTestRule();
 
-    private CronetEngine mCronetEngine;
+    private HttpEngine mCronetEngine;
 
     @Before
     public void setUp() throws Exception {
-        mCronetEngine = mTestRule.enableDiskCache(new CronetEngine.Builder(getContext())).build();
+        mCronetEngine = mTestRule.enableDiskCache(new HttpEngine.Builder(getContext())).build();
         mTestRule.setStreamHandlerFactory(mCronetEngine);
         assertTrue(NativeTestServer.startNativeTestServer(getContext()));
     }
@@ -321,7 +321,7 @@ public class CronetHttpURLConnectionTest {
             secondConnection.getResponseCode();
             fail();
         } catch (IOException e) {
-            assertTrue(e instanceof java.net.ConnectException || e instanceof CronetException);
+            assertTrue(e instanceof java.net.ConnectException || e instanceof HttpException);
             assertTrue(e.getMessage().contains("ECONNREFUSED")
                     || e.getMessage().contains("Connection refused")
                     || e.getMessage().contains("net::ERR_CONNECTION_REFUSED")
@@ -349,7 +349,7 @@ public class CronetHttpURLConnectionTest {
             urlConnection.getResponseCode();
             fail();
         } catch (IOException e) {
-            assertTrue(e instanceof java.net.ConnectException || e instanceof CronetException);
+            assertTrue(e instanceof java.net.ConnectException || e instanceof HttpException);
             assertTrue(e.getMessage().contains("ECONNREFUSED")
                     || e.getMessage().contains("Connection refused")
                     || e.getMessage().contains("net::ERR_CONNECTION_REFUSED")
@@ -375,7 +375,7 @@ public class CronetHttpURLConnectionTest {
             fail();
         } catch (java.net.UnknownHostException e) {
             // Expected.
-        } catch (CronetException e) {
+        } catch (HttpException e) {
             // Expected.
         }
         checkExceptionsAreThrown(urlConnection);
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/QuicUploadTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/QuicUploadTest.java
index 9fbceb94..7f944bff 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/QuicUploadTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/urlconnection/QuicUploadTest.java
@@ -19,11 +19,11 @@ import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import org.chromium.base.test.util.Feature;
-import android.net.http.CronetEngine;
+import android.net.http.HttpEngine;
 import org.chromium.net.CronetTestRule;
 import org.chromium.net.CronetTestRule.OnlyRunNativeCronet;
 import org.chromium.net.CronetTestUtil;
-import android.net.http.ExperimentalCronetEngine;
+import android.net.http.ExperimentalHttpEngine;
 import org.chromium.net.QuicTestServer;
 
 import java.io.OutputStream;
@@ -39,14 +39,14 @@ public class QuicUploadTest {
     @Rule
     public final CronetTestRule mTestRule = new CronetTestRule();
 
-    private CronetEngine mCronetEngine;
+    private HttpEngine mCronetEngine;
 
     @Before
     public void setUp() throws Exception {
         // Load library first to create MockCertVerifier.
         System.loadLibrary("cronet_tests");
-        ExperimentalCronetEngine.Builder builder =
-                new ExperimentalCronetEngine.Builder(getContext());
+        ExperimentalHttpEngine.Builder builder =
+                new ExperimentalHttpEngine.Builder(getContext());
 
         QuicTestServer.startQuicTestServer(getContext());
 
-- 
2.39.0.314.g84b9a713c41-goog

