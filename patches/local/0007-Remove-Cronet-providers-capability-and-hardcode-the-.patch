From 5bbcbb9ccb2ca9343543d43d65e5734a071daaae Mon Sep 17 00:00:00 2001
From: Dan Stahr <danstahr@google.com>
Date: Tue, 3 Jan 2023 16:23:10 +0000
Subject: [PATCH] Remove Cronet providers capability and hardcode the Android
 platform to always use the native implementation.

Test: m

Change-Id: I51deb9056ed066c4eaad831ab8143ddc6bdae79c
---
 components/cronet/android/BUILD.gn            |   4 -
 components/cronet/android/api.txt             |  12 -
 .../src/org/chromium/net/CronetEngine.java    | 125 ++-------
 .../src/org/chromium/net/CronetProvider.java  | 248 ------------------
 .../net/ExperimentalCronetEngine.java         |   6 -
 .../android/cronet_impl_native_proguard.cfg   |   5 -
 .../android/cronet_impl_platform_proguard.cfg |   5 -
 .../chromium/net/test/FakeCronetProvider.java |   1 -
 .../chromium/net/impl/JavaCronetProvider.java |  62 -----
 .../net/impl/NativeCronetProvider.java        |  64 -----
 .../chromium/net/BidirectionalStreamTest.java |  22 --
 .../chromium/net/CronetEngineBuilderTest.java | 163 ------------
 .../src/org/chromium/net/CronetTestRule.java  |  37 +--
 .../net/CronetUrlRequestContextTest.java      |  34 ---
 .../net/smoke/MissingNativeLibraryTest.java   |   1 -
 15 files changed, 22 insertions(+), 767 deletions(-)
 delete mode 100644 components/cronet/android/api/src/org/chromium/net/CronetProvider.java
 delete mode 100644 components/cronet/android/java/src/org/chromium/net/impl/JavaCronetProvider.java
 delete mode 100644 components/cronet/android/java/src/org/chromium/net/impl/NativeCronetProvider.java
 delete mode 100644 components/cronet/android/test/javatests/src/org/chromium/net/CronetEngineBuilderTest.java

diff --git a/components/cronet/android/BUILD.gn b/components/cronet/android/BUILD.gn
index c9b2031f51cdf..22da64aad913b 100644
--- a/components/cronet/android/BUILD.gn
+++ b/components/cronet/android/BUILD.gn
@@ -234,7 +234,6 @@ android_library("cronet_api_java") {
     "api/src/org/chromium/net/CronetEngine.java",
     "api/src/org/chromium/net/CronetException.java",
     "api/src/org/chromium/net/DnsOptions.java",
-    "api/src/org/chromium/net/CronetProvider.java",
     "api/src/org/chromium/net/ExperimentalBidirectionalStream.java",
     "api/src/org/chromium/net/ExperimentalCronetEngine.java",
     "api/src/org/chromium/net/ExperimentalUrlRequest.java",
@@ -338,7 +337,6 @@ android_library("cronet_impl_platform_base_java") {
     "java/src/org/chromium/net/impl/InputStreamChannel.java",
     "java/src/org/chromium/net/impl/JavaCronetEngine.java",
     "java/src/org/chromium/net/impl/JavaCronetEngineBuilderImpl.java",
-    "java/src/org/chromium/net/impl/JavaCronetProvider.java",
     "java/src/org/chromium/net/impl/JavaUrlRequest.java",
   ]
 
@@ -357,7 +355,6 @@ android_library("cronet_impl_fake_base_java") {
   sources = [
     "fake/java/org/chromium/net/test/FakeCronetController.java",
     "fake/java/org/chromium/net/test/FakeCronetEngine.java",
-    "fake/java/org/chromium/net/test/FakeCronetProvider.java",
     "fake/java/org/chromium/net/test/FakeUrlRequest.java",
     "fake/java/org/chromium/net/test/FakeUrlResponse.java",
     "fake/java/org/chromium/net/test/ResponseMatcher.java",
@@ -419,7 +416,6 @@ android_library("cronet_impl_native_base_java") {
     "java/src/org/chromium/net/impl/CronetUrlRequestContext.java",
     "java/src/org/chromium/net/impl/NativeCronetEngineBuilderImpl.java",
     "java/src/org/chromium/net/impl/NativeCronetEngineBuilderWithLibraryLoaderImpl.java",
-    "java/src/org/chromium/net/impl/NativeCronetProvider.java",
   ]
 
   # Adding deps here won't include those deps in the cronet_impl_native_java.jar.
diff --git a/components/cronet/android/api.txt b/components/cronet/android/api.txt
index 20187639346eb..77a7659ccd28b 100644
--- a/components/cronet/android/api.txt
+++ b/components/cronet/android/api.txt
@@ -83,18 +83,6 @@ public abstract class org.chromium.net.CronetEngine {
 public abstract class org.chromium.net.CronetException extends java.io.IOException {
   protected org.chromium.net.CronetException(java.lang.String, java.lang.Throwable);
 }
-public abstract class org.chromium.net.CronetProvider {
-  public static final java.lang.String PROVIDER_NAME_APP_PACKAGED;
-  public static final java.lang.String PROVIDER_NAME_FALLBACK;
-  protected final android.content.Context mContext;
-  protected org.chromium.net.CronetProvider(android.content.Context);
-  public abstract org.chromium.net.CronetEngine$Builder createBuilder();
-  public abstract java.lang.String getName();
-  public abstract java.lang.String getVersion();
-  public abstract boolean isEnabled();
-  public java.lang.String toString();
-  public static java.util.List<org.chromium.net.CronetProvider> getAllProviders(android.content.Context);
-}
 public abstract class org.chromium.net.ExperimentalBidirectionalStream$Builder extends org.chromium.net.BidirectionalStream$Builder {
   public org.chromium.net.ExperimentalBidirectionalStream$Builder();
   public org.chromium.net.ExperimentalBidirectionalStream$Builder addRequestAnnotation(java.lang.Object);
diff --git a/components/cronet/android/api/src/org/chromium/net/CronetEngine.java b/components/cronet/android/api/src/org/chromium/net/CronetEngine.java
index 5808f3f465695..c0408552d90e3 100644
--- a/components/cronet/android/api/src/org/chromium/net/CronetEngine.java
+++ b/components/cronet/android/api/src/org/chromium/net/CronetEngine.java
@@ -6,20 +6,13 @@ package org.chromium.net;
 
 import android.content.Context;
 import android.net.http.HttpResponseCache;
-import android.util.Log;
-
-import androidx.annotation.VisibleForTesting;
 
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
 import java.net.URL;
 import java.net.URLConnection;
 import java.net.URLStreamHandlerFactory;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
 import java.util.Date;
-import java.util.Iterator;
-import java.util.List;
 import java.util.Set;
 import java.util.concurrent.Executor;
 
@@ -30,7 +23,10 @@ import javax.net.ssl.HttpsURLConnection;
  * using {@link Builder}.
  */
 public abstract class CronetEngine {
-    private static final String TAG = CronetEngine.class.getSimpleName();
+
+    public static Builder builder(Context context) {
+        return new Builder(context);
+    }
 
     /**
      * A builder for {@link CronetEngine}s, which allows runtime configuration of
@@ -40,6 +36,7 @@ public abstract class CronetEngine {
     // NOTE(kapishnikov): In order to avoid breaking the existing API clients, all future methods
     // added to this class and other API classes must have default implementation.
     public static class Builder {
+
         /**
          * A class which provides a method for loading the cronet native library. Apps needing to
          * implement custom library loading logic can inherit from this class and pass an instance
@@ -72,7 +69,7 @@ public abstract class CronetEngine {
          *                context will be kept, so as to avoid extending
          *                the lifetime of {@code context} unnecessarily.
          */
-        public Builder(Context context) {
+        Builder(Context context) {
             this(createBuilderDelegate(context));
         }
 
@@ -85,7 +82,7 @@ public abstract class CronetEngine {
          *
          * {@hide}
          */
-        public Builder(ICronetEngineBuilder builderDelegate) {
+        Builder(ICronetEngineBuilder builderDelegate) {
             mBuilderDelegate = builderDelegate;
         }
 
@@ -385,108 +382,22 @@ public abstract class CronetEngine {
 
         /**
          * Creates an implementation of {@link ICronetEngineBuilder} that can be used
-         * to delegate the builder calls to. The method uses {@link CronetProvider}
-         * to obtain the list of available providers.
+         * to delegate the builder calls to.
          *
          * @param context Android Context to use.
          * @return the created {@code ICronetEngineBuilder}.
          */
         private static ICronetEngineBuilder createBuilderDelegate(Context context) {
-            List<CronetProvider> providers =
-                    new ArrayList<>(CronetProvider.getAllProviders(context));
-            CronetProvider provider = getEnabledCronetProviders(context, providers).get(0);
-            if (Log.isLoggable(TAG, Log.DEBUG)) {
-                Log.d(TAG,
-                        String.format("Using '%s' provider for creating CronetEngine.Builder.",
-                                provider));
-            }
-            return provider.createBuilder().mBuilderDelegate;
-        }
-
-        /**
-         * Returns the list of available and enabled {@link CronetProvider}. The returned list
-         * is sorted based on the provider versions and types.
-         *
-         * @param context Android Context to use.
-         * @param providers the list of enabled and disabled providers to filter out and sort.
-         * @return the sorted list of enabled providers. The list contains at least one provider.
-         * @throws RuntimeException is the list of providers is empty or all of the providers
-         *                          are disabled.
-         */
-        @VisibleForTesting
-        static List<CronetProvider> getEnabledCronetProviders(
-                Context context, List<CronetProvider> providers) {
-            // Check that there is at least one available provider.
-            if (providers.size() == 0) {
-                throw new RuntimeException("Unable to find any Cronet provider."
-                        + " Have you included all necessary jars?");
-            }
-
-            // Exclude disabled providers from the list.
-            for (Iterator<CronetProvider> i = providers.iterator(); i.hasNext();) {
-                CronetProvider provider = i.next();
-                if (!provider.isEnabled()) {
-                    i.remove();
-                }
-            }
-
-            // Check that there is at least one enabled provider.
-            if (providers.size() == 0) {
-                throw new RuntimeException("All available Cronet providers are disabled."
-                        + " A provider should be enabled before it can be used.");
-            }
-
-            // Sort providers based on version and type.
-            Collections.sort(providers, new Comparator<CronetProvider>() {
-                @Override
-                public int compare(CronetProvider p1, CronetProvider p2) {
-                    // The fallback provider should always be at the end of the list.
-                    if (CronetProvider.PROVIDER_NAME_FALLBACK.equals(p1.getName())) {
-                        return 1;
-                    }
-                    if (CronetProvider.PROVIDER_NAME_FALLBACK.equals(p2.getName())) {
-                        return -1;
-                    }
-                    // A provider with higher version should go first.
-                    return -compareVersions(p1.getVersion(), p2.getVersion());
-                }
-            });
-            return providers;
-        }
-
-        /**
-         * Compares two strings that contain versions. The string should only contain
-         * dot-separated segments that contain an arbitrary number of digits digits [0-9].
-         *
-         * @param s1 the first string.
-         * @param s2 the second string.
-         * @return -1 if s1<s2, +1 if s1>s2 and 0 if s1=s2. If two versions are equal, the
-         *         version with the higher number of segments is considered to be higher.
-         *
-         * @throws IllegalArgumentException if any of the strings contains an illegal
-         * version number.
-         */
-        @VisibleForTesting
-        static int compareVersions(String s1, String s2) {
-            if (s1 == null || s2 == null) {
-                throw new IllegalArgumentException("The input values cannot be null");
-            }
-            String[] s1segments = s1.split("\\.");
-            String[] s2segments = s2.split("\\.");
-            for (int i = 0; i < s1segments.length && i < s2segments.length; i++) {
-                try {
-                    int s1segment = Integer.parseInt(s1segments[i]);
-                    int s2segment = Integer.parseInt(s2segments[i]);
-                    if (s1segment != s2segment) {
-                        return Integer.signum(s1segment - s2segment);
-                    }
-                } catch (NumberFormatException e) {
-                    throw new IllegalArgumentException("Unable to convert version segments into"
-                                    + " integers: " + s1segments[i] + " & " + s2segments[i],
-                            e);
-                }
+            // TODO class name
+            try {
+                Class<?> clazz = context.getClassLoader().loadClass(
+                        "org.chromium.net.impl.NativeCronetEngineBuilderImpl");
+
+                return (ICronetEngineBuilder) clazz.getConstructor(Context.class).newInstance(
+                        context);
+            } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
+                throw new IllegalArgumentException(e);
             }
-            return Integer.signum(s1segments.length - s2segments.length);
         }
     }
 
diff --git a/components/cronet/android/api/src/org/chromium/net/CronetProvider.java b/components/cronet/android/api/src/org/chromium/net/CronetProvider.java
deleted file mode 100644
index 233af5663c8d5..0000000000000
--- a/components/cronet/android/api/src/org/chromium/net/CronetProvider.java
+++ /dev/null
@@ -1,248 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-package org.chromium.net;
-
-import android.content.Context;
-import android.util.Log;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Set;
-
-/**
- * Provides a factory method to create {@link CronetEngine.Builder} instances.
- * A {@code CronetEngine.Builder} instance can be used to create a specific {@link CronetEngine}
- * implementation. To get the list of available {@link CronetProvider}s call
- * {@link #getAllProviders(Context)}.
- * <p/>
- * <b>NOTE:</b> This class is for advanced users that want to select a particular
- * Cronet implementation. Most users should simply use {@code new} {@link
- * CronetEngine.Builder#CronetEngine.Builder(android.content.Context)}.
- *
- * {@hide}
- */
-public abstract class CronetProvider {
-    /**
-     * String returned by {@link CronetProvider#getName} for {@link CronetProvider}
-     * that provides native Cronet implementation packaged inside an application.
-     * This implementation offers significantly higher performance relative to the
-     * fallback Cronet implementations (see {@link #PROVIDER_NAME_FALLBACK}).
-     */
-    public static final String PROVIDER_NAME_APP_PACKAGED = "App-Packaged-Cronet-Provider";
-
-    /**
-     * String returned by {@link CronetProvider#getName} for {@link CronetProvider}
-     * that provides Cronet implementation based on the system's
-     * {@link java.net.HttpURLConnection} implementation. This implementation
-     * offers significantly degraded performance relative to native Cronet
-     * implementations (see {@link #PROVIDER_NAME_APP_PACKAGED}).
-     */
-    public static final String PROVIDER_NAME_FALLBACK = "Fallback-Cronet-Provider";
-
-    /**
-     * The name of an optional key in the app string resource file that contains the class name of
-     * an alternative {@code CronetProvider} implementation.
-     */
-    private static final String RES_KEY_CRONET_IMPL_CLASS = "CronetProviderClassName";
-
-    private static final String TAG = CronetProvider.class.getSimpleName();
-
-    protected final Context mContext;
-
-    protected CronetProvider(Context context) {
-        if (context == null) {
-            throw new IllegalArgumentException("Context must not be null");
-        }
-        mContext = context;
-    }
-
-    /**
-     * Creates and returns an instance of {@link CronetEngine.Builder}.
-     * <p/>
-     * <b>NOTE:</b> This class is for advanced users that want to select a particular
-     * Cronet implementation. Most users should simply use {@code new} {@link
-     * CronetEngine.Builder#CronetEngine.Builder(android.content.Context)}.
-     *
-     * @return {@code CronetEngine.Builder}.
-     * @throws IllegalStateException if the provider is not enabled (see {@link #isEnabled}.
-     */
-    public abstract CronetEngine.Builder createBuilder();
-
-    /**
-     * Returns the provider name. The well-know provider names include:
-     * <ul>
-     *     <li>{@link #PROVIDER_NAME_APP_PACKAGED}</li>
-     *     <li>{@link #PROVIDER_NAME_FALLBACK}</li>
-     * </ul>
-     *
-     * @return provider name.
-     */
-    public abstract String getName();
-
-    /**
-     * Returns the provider version. The version can be used to select the newest
-     * available provider if multiple providers are available.
-     *
-     * @return provider version.
-     */
-    public abstract String getVersion();
-
-    /**
-     * Returns whether the provider is enabled and can be used to instantiate the Cronet engine.
-     * A provider being out-of-date (older than the API) and needing updating is one potential
-     * reason it could be disabled. Please read the provider documentation for
-     * enablement procedure.
-     *
-     * @return {@code true} if the provider is enabled.
-     */
-    public abstract boolean isEnabled();
-
-    @Override
-    public String toString() {
-        return "["
-                + "class=" + getClass().getName() + ", "
-                + "name=" + getName() + ", "
-                + "version=" + getVersion() + ", "
-                + "enabled=" + isEnabled() + "]";
-    }
-
-    /**
-     * Name of the Java {@link CronetProvider} class.
-     */
-    private static final String JAVA_CRONET_PROVIDER_CLASS =
-            "org.chromium.net.impl.JavaCronetProvider";
-
-    /**
-     * Name of the native {@link CronetProvider} class.
-     */
-    private static final String NATIVE_CRONET_PROVIDER_CLASS =
-            "org.chromium.net.impl.NativeCronetProvider";
-
-    /**
-     * {@link CronetProvider} class that is packaged with Google Play Services.
-     */
-    private static final String PLAY_SERVICES_CRONET_PROVIDER_CLASS =
-            "com.google.android.gms.net.PlayServicesCronetProvider";
-
-    /**
-     * {@link CronetProvider} a deprecated class that may be packaged with
-     * some old versions of Google Play Services.
-     */
-    private static final String GMS_CORE_CRONET_PROVIDER_CLASS =
-            "com.google.android.gms.net.GmsCoreCronetProvider";
-
-    /**
-     * Returns an unmodifiable list of all available {@link CronetProvider}s.
-     * The providers are returned in no particular order. Some of the returned
-     * providers may be in a disabled state and should be enabled by the invoker.
-     * See {@link CronetProvider#isEnabled()}.
-     *
-     * @return the list of available providers.
-     */
-    public static List<CronetProvider> getAllProviders(Context context) {
-        // Use LinkedHashSet to preserve the order and eliminate duplicate providers.
-        Set<CronetProvider> providers = new LinkedHashSet<>();
-        addCronetProviderFromResourceFile(context, providers);
-        addCronetProviderImplByClassName(
-                context, PLAY_SERVICES_CRONET_PROVIDER_CLASS, providers, false);
-        addCronetProviderImplByClassName(context, GMS_CORE_CRONET_PROVIDER_CLASS, providers, false);
-        addCronetProviderImplByClassName(context, NATIVE_CRONET_PROVIDER_CLASS, providers, false);
-        addCronetProviderImplByClassName(context, JAVA_CRONET_PROVIDER_CLASS, providers, false);
-        return Collections.unmodifiableList(new ArrayList<>(providers));
-    }
-
-    /**
-     * Attempts to add a new provider referenced by the class name to a set.
-     *
-     * @param className the class name of the provider that should be instantiated.
-     * @param providers the set of providers to add the new provider to.
-     * @return {@code true} if the provider was added to the set; {@code false}
-     *         if the provider couldn't be instantiated.
-     */
-    private static boolean addCronetProviderImplByClassName(
-            Context context, String className, Set<CronetProvider> providers, boolean logError) {
-        ClassLoader loader = context.getClassLoader();
-        try {
-            Class<? extends CronetProvider> providerClass =
-                    loader.loadClass(className).asSubclass(CronetProvider.class);
-            Constructor<? extends CronetProvider> ctor =
-                    providerClass.getConstructor(Context.class);
-            providers.add(ctor.newInstance(context));
-            return true;
-        } catch (InstantiationException e) {
-            logReflectiveOperationException(className, logError, e);
-        } catch (InvocationTargetException e) {
-            logReflectiveOperationException(className, logError, e);
-        } catch (NoSuchMethodException e) {
-            logReflectiveOperationException(className, logError, e);
-        } catch (IllegalAccessException e) {
-            logReflectiveOperationException(className, logError, e);
-        } catch (ClassNotFoundException e) {
-            logReflectiveOperationException(className, logError, e);
-        }
-        return false;
-    }
-
-    /**
-     * De-duplicates exception handling logic in {@link #addCronetProviderImplByClassName}.
-     * It should be removed when support of API Levels lower than 19 is deprecated.
-     */
-    private static void logReflectiveOperationException(
-            String className, boolean logError, Exception e) {
-        if (logError) {
-            Log.e(TAG, "Unable to load provider class: " + className, e);
-        } else {
-            if (Log.isLoggable(TAG, Log.DEBUG)) {
-                Log.d(TAG,
-                        "Tried to load " + className + " provider class but it wasn't"
-                                + " included in the app classpath");
-            }
-        }
-    }
-
-    /**
-     * Attempts to add a provider specified in the app resource file to a set.
-     *
-     * @param providers the set of providers to add the new provider to.
-     * @return {@code true} if the provider was added to the set; {@code false}
-     *         if the app resources do not include the string with
-     *         {@link #RES_KEY_CRONET_IMPL_CLASS} key.
-     * @throws RuntimeException if the provider cannot be found or instantiated.
-     */
-    // looking up resources from other apps requires the use of getIdentifier()
-    @SuppressWarnings("DiscouragedApi")
-    private static boolean addCronetProviderFromResourceFile(
-            Context context, Set<CronetProvider> providers) {
-        int resId = context.getResources().getIdentifier(
-                RES_KEY_CRONET_IMPL_CLASS, "string", context.getPackageName());
-        // Resource not found
-        if (resId == 0) {
-            // The resource wasn't included in the app; therefore, there is nothing to add.
-            return false;
-        }
-        String className = context.getResources().getString(resId);
-
-        // If the resource specifies a well known provider, don't load it because
-        // there will be an attempt to load it anyways.
-        if (className == null || className.equals(PLAY_SERVICES_CRONET_PROVIDER_CLASS)
-                || className.equals(GMS_CORE_CRONET_PROVIDER_CLASS)
-                || className.equals(JAVA_CRONET_PROVIDER_CLASS)
-                || className.equals(NATIVE_CRONET_PROVIDER_CLASS)) {
-            return false;
-        }
-
-        if (!addCronetProviderImplByClassName(context, className, providers, true)) {
-            Log.e(TAG,
-                    "Unable to instantiate Cronet implementation class " + className
-                            + " that is listed as in the app string resource file under "
-                            + RES_KEY_CRONET_IMPL_CLASS + " key");
-        }
-        return true;
-    }
-}
diff --git a/components/cronet/android/api/src/org/chromium/net/ExperimentalCronetEngine.java b/components/cronet/android/api/src/org/chromium/net/ExperimentalCronetEngine.java
index 278658ff4a295..85f20c08579a6 100644
--- a/components/cronet/android/api/src/org/chromium/net/ExperimentalCronetEngine.java
+++ b/components/cronet/android/api/src/org/chromium/net/ExperimentalCronetEngine.java
@@ -202,12 +202,6 @@ public abstract class ExperimentalCronetEngine extends CronetEngine {
             return this;
         }
 
-        @Override
-        public Builder setLibraryLoader(LibraryLoader loader) {
-            super.setLibraryLoader(loader);
-            return this;
-        }
-
         @Override
         public Builder enableQuic(boolean value) {
             super.enableQuic(value);
diff --git a/components/cronet/android/cronet_impl_native_proguard.cfg b/components/cronet/android/cronet_impl_native_proguard.cfg
index cb368e7675574..49187704db4e9 100644
--- a/components/cronet/android/cronet_impl_native_proguard.cfg
+++ b/components/cronet/android/cronet_impl_native_proguard.cfg
@@ -1,10 +1,5 @@
 # Proguard config for apps that depend on cronet_impl_native_java.jar.
 
-# This constructor is called using the reflection from Cronet API (cronet_api.jar).
--keep class org.chromium.net.impl.NativeCronetProvider {
-    public <init>(android.content.Context);
-}
-
 # Suppress unnecessary warnings.
 -dontnote org.chromium.net.ProxyChangeListener$ProxyReceiver
 -dontnote org.chromium.net.AndroidKeyStore
diff --git a/components/cronet/android/cronet_impl_platform_proguard.cfg b/components/cronet/android/cronet_impl_platform_proguard.cfg
index 8f9a61abf6d45..8ead1ea011bd4 100644
--- a/components/cronet/android/cronet_impl_platform_proguard.cfg
+++ b/components/cronet/android/cronet_impl_platform_proguard.cfg
@@ -1,6 +1 @@
 # Proguard config for apps that depend on cronet_impl_platform_java.jar.
-
-# This constructor is called using the reflection from Cronet API (cronet_api.jar).
--keep class org.chromium.net.impl.JavaCronetProvider {
-    public <init>(android.content.Context);
-}
diff --git a/components/cronet/android/fake/java/org/chromium/net/test/FakeCronetProvider.java b/components/cronet/android/fake/java/org/chromium/net/test/FakeCronetProvider.java
index 74d0cedf64c5b..da16d245e5abd 100644
--- a/components/cronet/android/fake/java/org/chromium/net/test/FakeCronetProvider.java
+++ b/components/cronet/android/fake/java/org/chromium/net/test/FakeCronetProvider.java
@@ -7,7 +7,6 @@ package org.chromium.net.test;
 import android.content.Context;
 
 import org.chromium.net.CronetEngine;
-import org.chromium.net.CronetProvider;
 import org.chromium.net.ExperimentalCronetEngine;
 import org.chromium.net.ICronetEngineBuilder;
 import org.chromium.net.impl.ImplVersion;
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/JavaCronetProvider.java b/components/cronet/android/java/src/org/chromium/net/impl/JavaCronetProvider.java
deleted file mode 100644
index 775ab88c0e6e9..0000000000000
--- a/components/cronet/android/java/src/org/chromium/net/impl/JavaCronetProvider.java
+++ /dev/null
@@ -1,62 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-package org.chromium.net.impl;
-
-import android.content.Context;
-
-import org.chromium.net.CronetEngine;
-import org.chromium.net.CronetProvider;
-import org.chromium.net.ExperimentalCronetEngine;
-import org.chromium.net.ICronetEngineBuilder;
-
-import java.util.Arrays;
-
-/**
- * Implementation of {@link CronetProvider} that creates {@link CronetEngine.Builder}
- * for building the Java-based implementation of {@link CronetEngine}.
- */
-public class JavaCronetProvider extends CronetProvider {
-    /**
-     * Constructor.
-     *
-     * @param context Android context to use.
-     */
-    public JavaCronetProvider(Context context) {
-        super(context);
-    }
-
-    @Override
-    public CronetEngine.Builder createBuilder() {
-        ICronetEngineBuilder impl = new JavaCronetEngineBuilderImpl(mContext);
-        return new ExperimentalCronetEngine.Builder(impl);
-    }
-
-    @Override
-    public String getName() {
-        return CronetProvider.PROVIDER_NAME_FALLBACK;
-    }
-
-    @Override
-    public String getVersion() {
-        return ImplVersion.getCronetVersion();
-    }
-
-    @Override
-    public boolean isEnabled() {
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        return Arrays.hashCode(new Object[] {JavaCronetProvider.class, mContext});
-    }
-
-    @Override
-    public boolean equals(Object other) {
-        return other == this
-                || (other instanceof JavaCronetProvider
-                           && this.mContext.equals(((JavaCronetProvider) other).mContext));
-    }
-}
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/NativeCronetProvider.java b/components/cronet/android/java/src/org/chromium/net/impl/NativeCronetProvider.java
deleted file mode 100644
index b06d968c199cd..0000000000000
--- a/components/cronet/android/java/src/org/chromium/net/impl/NativeCronetProvider.java
+++ /dev/null
@@ -1,64 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-package org.chromium.net.impl;
-
-import android.content.Context;
-
-import org.chromium.build.annotations.UsedByReflection;
-import org.chromium.net.CronetEngine;
-import org.chromium.net.CronetProvider;
-import org.chromium.net.ExperimentalCronetEngine;
-import org.chromium.net.ICronetEngineBuilder;
-
-import java.util.Arrays;
-
-/**
- * Implementation of {@link CronetProvider} that creates {@link CronetEngine.Builder}
- * for building the native implementation of {@link CronetEngine}.
- */
-public class NativeCronetProvider extends CronetProvider {
-    /**
-     * Constructor.
-     *
-     * @param context Android context to use.
-     */
-    @UsedByReflection("CronetProvider.java")
-    public NativeCronetProvider(Context context) {
-        super(context);
-    }
-
-    @Override
-    public CronetEngine.Builder createBuilder() {
-        ICronetEngineBuilder impl = new NativeCronetEngineBuilderWithLibraryLoaderImpl(mContext);
-        return new ExperimentalCronetEngine.Builder(impl);
-    }
-
-    @Override
-    public String getName() {
-        return CronetProvider.PROVIDER_NAME_APP_PACKAGED;
-    }
-
-    @Override
-    public String getVersion() {
-        return ImplVersion.getCronetVersion();
-    }
-
-    @Override
-    public boolean isEnabled() {
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        return Arrays.hashCode(new Object[] {NativeCronetProvider.class, mContext});
-    }
-
-    @Override
-    public boolean equals(Object other) {
-        return other == this
-                || (other instanceof NativeCronetProvider
-                           && this.mContext.equals(((NativeCronetProvider) other).mContext));
-    }
-}
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamTest.java
index fdf8c852be6b3..28659027b436f 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/BidirectionalStreamTest.java
@@ -150,14 +150,6 @@ public class BidirectionalStreamTest {
     @SmallTest
     @Feature({"Cronet"})
     public void testBuilderCheck() throws Exception {
-        if (mTestRule.testingJavaImpl()) {
-            runBuilderCheckJavaImpl();
-        } else {
-            runBuilderCheckNativeImpl();
-        }
-    }
-
-    private void runBuilderCheckNativeImpl() throws Exception {
         TestBidirectionalStreamCallback callback = new TestBidirectionalStreamCallback();
         try {
             mCronetEngine.newBidirectionalStreamBuilder(null, callback, callback.getExecutor());
@@ -202,20 +194,6 @@ public class BidirectionalStreamTest {
         }
     }
 
-    private void runBuilderCheckJavaImpl() {
-        try {
-            TestBidirectionalStreamCallback callback = new TestBidirectionalStreamCallback();
-            CronetTestRule.createJavaEngineBuilder(CronetTestRule.getContext())
-                    .build()
-                    .newBidirectionalStreamBuilder(
-                            Http2TestServer.getServerUrl(), callback, callback.getExecutor());
-            fail("JavaCronetEngine doesn't support BidirectionalStream."
-                    + " Expected UnsupportedOperationException");
-        } catch (UnsupportedOperationException e) {
-            // Expected.
-        }
-    }
-
     @Test
     @SmallTest
     @Feature({"Cronet"})
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/CronetEngineBuilderTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/CronetEngineBuilderTest.java
deleted file mode 100644
index e7ad576f7df1d..0000000000000
--- a/components/cronet/android/test/javatests/src/org/chromium/net/CronetEngineBuilderTest.java
+++ /dev/null
@@ -1,163 +0,0 @@
-// Copyright 2017 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-package org.chromium.net;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
-import static org.chromium.net.CronetProvider.PROVIDER_NAME_APP_PACKAGED;
-import static org.chromium.net.CronetProvider.PROVIDER_NAME_FALLBACK;
-import static org.chromium.net.CronetTestRule.getContext;
-
-import android.content.Context;
-import android.support.test.runner.AndroidJUnit4;
-
-import androidx.test.filters.SmallTest;
-
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import org.chromium.base.test.util.Feature;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Tests {@link CronetEngine.Builder}.
- */
-@RunWith(AndroidJUnit4.class)
-public class CronetEngineBuilderTest {
-    @Rule
-    public final CronetTestRule mTestRule = new CronetTestRule();
-
-    /**
-     * Tests the comparison of two strings that contain versions.
-     */
-    @Test
-    @SmallTest
-    @Feature({"Cronet"})
-    @CronetTestRule.OnlyRunNativeCronet
-    public void testVersionComparison() {
-        assertVersionIsHigher("22.44", "22.43.12");
-        assertVersionIsLower("22.43.12", "022.124");
-        assertVersionIsLower("22.99", "22.100");
-        assertVersionIsHigher("22.100", "22.99");
-        assertVersionIsEqual("11.2.33", "11.2.33");
-        assertIllegalArgumentException(null, "1.2.3");
-        assertIllegalArgumentException("1.2.3", null);
-        assertIllegalArgumentException("1.2.3", "1.2.3x");
-    }
-
-    /**
-     * Tests the correct ordering of the providers. The platform provider should be
-     * the last in the list. Other providers should be ordered by placing providers
-     * with the higher version first.
-     */
-    @Test
-    @SmallTest
-    @Feature({"Cronet"})
-    public void testProviderOrdering() {
-        final CronetProvider[] availableProviders = new CronetProvider[] {
-                new FakeProvider(getContext(), PROVIDER_NAME_APP_PACKAGED, "99.77", true),
-                new FakeProvider(getContext(), PROVIDER_NAME_FALLBACK, "99.99", true),
-                new FakeProvider(getContext(), "Some other provider", "99.88", true),
-        };
-
-        ArrayList<CronetProvider> providers = new ArrayList<>(Arrays.asList(availableProviders));
-        List<CronetProvider> orderedProviders =
-                CronetEngine.Builder.getEnabledCronetProviders(getContext(), providers);
-
-        // Check the result
-        assertEquals(availableProviders[2], orderedProviders.get(0));
-        assertEquals(availableProviders[0], orderedProviders.get(1));
-        assertEquals(availableProviders[1], orderedProviders.get(2));
-    }
-
-    /**
-     * Tests that the providers that are disabled are not included in the list of available
-     * providers when the provider is selected by the default selection logic.
-     */
-    @Test
-    @SmallTest
-    @Feature({"Cronet"})
-    public void testThatDisabledProvidersAreExcluded() {
-        final CronetProvider[] availableProviders = new CronetProvider[] {
-                new FakeProvider(getContext(), PROVIDER_NAME_FALLBACK, "99.99", true),
-                new FakeProvider(getContext(), PROVIDER_NAME_APP_PACKAGED, "99.77", true),
-                new FakeProvider(getContext(), "Some other provider", "99.88", false),
-        };
-
-        ArrayList<CronetProvider> providers = new ArrayList<>(Arrays.asList(availableProviders));
-        List<CronetProvider> orderedProviders =
-                CronetEngine.Builder.getEnabledCronetProviders(getContext(), providers);
-
-        assertEquals("Unexpected number of providers in the list", 2, orderedProviders.size());
-        assertEquals(PROVIDER_NAME_APP_PACKAGED, orderedProviders.get(0).getName());
-        assertEquals(PROVIDER_NAME_FALLBACK, orderedProviders.get(1).getName());
-    }
-
-    private void assertVersionIsHigher(String s1, String s2) {
-        assertEquals(1, CronetEngine.Builder.compareVersions(s1, s2));
-    }
-
-    private void assertVersionIsLower(String s1, String s2) {
-        assertEquals(-1, CronetEngine.Builder.compareVersions(s1, s2));
-    }
-
-    private void assertVersionIsEqual(String s1, String s2) {
-        assertEquals(0, CronetEngine.Builder.compareVersions(s1, s2));
-    }
-
-    private void assertIllegalArgumentException(String s1, String s2) {
-        try {
-            CronetEngine.Builder.compareVersions(s1, s2);
-        } catch (IllegalArgumentException e) {
-            // Do nothing. It is expected.
-            return;
-        }
-        fail("Expected IllegalArgumentException");
-    }
-
-    // TODO(kapishnikov): Replace with a mock when mockito is supported.
-    private static class FakeProvider extends CronetProvider {
-        private final String mName;
-        private final String mVersion;
-        private final boolean mEnabled;
-
-        protected FakeProvider(Context context, String name, String version, boolean enabled) {
-            super(context);
-            mName = name;
-            mVersion = version;
-            mEnabled = enabled;
-        }
-
-        @Override
-        public CronetEngine.Builder createBuilder() {
-            return new CronetEngine.Builder((ICronetEngineBuilder) null);
-        }
-
-        @Override
-        public String getName() {
-            return mName;
-        }
-
-        @Override
-        public String getVersion() {
-            return mVersion;
-        }
-
-        @Override
-        public boolean isEnabled() {
-            return mEnabled;
-        }
-
-        @Override
-        public String toString() {
-            return mName;
-        }
-    }
-}
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/CronetTestRule.java b/components/cronet/android/test/javatests/src/org/chromium/net/CronetTestRule.java
index dc15a53c70032..890ce2bf545e3 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/CronetTestRule.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/CronetTestRule.java
@@ -19,9 +19,6 @@ import org.junit.runners.model.Statement;
 import org.chromium.base.ContextUtils;
 import org.chromium.base.Log;
 import org.chromium.base.PathUtils;
-import org.chromium.net.impl.JavaCronetEngine;
-import org.chromium.net.impl.JavaCronetProvider;
-import org.chromium.net.impl.NativeCronetProvider;
 import org.chromium.net.impl.UserAgent;
 
 import java.io.File;
@@ -65,30 +62,20 @@ public class CronetTestRule implements TestRule {
         public ExperimentalCronetEngine.Builder mBuilder;
 
         private Context mContext;
-        private boolean mIsTestingJavaImpl;
 
-        private CronetTestFramework(Context context, boolean isTestingJavaImpl) {
+        private CronetTestFramework(Context context) {
             mContext = context;
-            mIsTestingJavaImpl = isTestingJavaImpl;
-            mBuilder = mIsTestingJavaImpl ? createJavaEngineBuilder() : createNativeEngineBuilder();
-        }
-
-        private static CronetTestFramework createUsingJavaImpl(Context context) {
-            return new CronetTestFramework(context, true /* isTestingJavaImpl */);
+            mBuilder = createNativeEngineBuilder();
         }
 
         private static CronetTestFramework createUsingNativeImpl(Context context) {
-            return new CronetTestFramework(context, false /* isTestingJavaImpl */);
+            return new CronetTestFramework(context);
         }
 
         public ExperimentalCronetEngine startEngine() {
             assert mCronetEngine == null;
 
             mCronetEngine = mBuilder.build();
-            if (mIsTestingJavaImpl) {
-                // Make sure that the instantiated engine is JavaCronetEngine.
-                assert mCronetEngine.getClass() == JavaCronetEngine.class;
-            }
 
             // Start collecting metrics.
             mCronetEngine.getGlobalMetricsDeltas();
@@ -102,12 +89,6 @@ public class CronetTestRule implements TestRule {
             mCronetEngine = null;
         }
 
-        private ExperimentalCronetEngine.Builder createJavaEngineBuilder() {
-            return CronetTestRule.createJavaEngineBuilder(mContext)
-                    .setUserAgent(UserAgent.getDefault())
-                    .enableQuic(true);
-        }
-
         private ExperimentalCronetEngine.Builder createNativeEngineBuilder() {
             return CronetTestRule.createNativeEngineBuilder(mContext).enableQuic(true);
         }
@@ -292,16 +273,6 @@ public class CronetTestRule implements TestRule {
         return createCronetTestFramework();
     }
 
-    /**
-     * Creates and returns {@link ExperimentalCronetEngine.Builder} that creates
-     * Java (platform) based {@link CronetEngine.Builder}.
-     *
-     * @return the {@code CronetEngine.Builder} that builds Java-based {@code Cronet engine}.
-     */
-    public static ExperimentalCronetEngine.Builder createJavaEngineBuilder(Context context) {
-        return (ExperimentalCronetEngine.Builder) new JavaCronetProvider(context).createBuilder();
-    }
-
     /**
      * Creates and returns {@link ExperimentalCronetEngine.Builder} that creates
      * Chromium (native) based {@link CronetEngine.Builder}.
@@ -309,7 +280,7 @@ public class CronetTestRule implements TestRule {
      * @return the {@code CronetEngine.Builder} that builds Chromium-based {@code Cronet engine}.
      */
     public static ExperimentalCronetEngine.Builder createNativeEngineBuilder(Context context) {
-        return (ExperimentalCronetEngine.Builder) new NativeCronetProvider(context).createBuilder();
+        return (ExperimentalCronetEngine.Builder) CronetEngine.builder(context);
     }
 
     public void assertResponseEquals(UrlResponseInfo expected, UrlResponseInfo actual) {
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestContextTest.java b/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestContextTest.java
index a4364ab55634e..e1c22821af38d 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestContextTest.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/CronetUrlRequestContextTest.java
@@ -164,10 +164,6 @@ public class CronetUrlRequestContextTest {
         String userAgentValue = "User-Agent-Value";
         ExperimentalCronetEngine.Builder cronetEngineBuilder =
                 new ExperimentalCronetEngine.Builder(getContext());
-        if (mTestRule.testingJavaImpl()) {
-            cronetEngineBuilder =
-                    CronetTestRule.createJavaEngineBuilder(CronetTestRule.getContext());
-        }
         cronetEngineBuilder.setUserAgent(userAgentValue);
         final CronetEngine cronetEngine = cronetEngineBuilder.build();
         NativeTestServer.shutdownNativeTestServer(); // startNativeTestServer returns false if it's
@@ -1426,36 +1422,6 @@ public class CronetUrlRequestContextTest {
         }
     }
 
-    @Test
-    @SmallTest
-    @Feature({"Cronet"})
-    @OnlyRunNativeCronet
-    public void testSetLibraryLoaderIsEnforcedByDefaultEmbeddedProvider() throws Exception {
-        CronetEngine.Builder builder = new CronetEngine.Builder(getContext());
-        TestBadLibraryLoader loader = new TestBadLibraryLoader();
-        builder.setLibraryLoader(loader);
-        try {
-            builder.build();
-            fail("Native library should not be loaded");
-        } catch (UnsatisfiedLinkError e) {
-            assertTrue(loader.wasCalled());
-        }
-    }
-
-    @Test
-    @SmallTest
-    @Feature({"Cronet"})
-    @OnlyRunNativeCronet
-    public void testSetLibraryLoaderIsIgnoredInNativeCronetEngineBuilderImpl() throws Exception {
-        CronetEngine.Builder builder =
-                new CronetEngine.Builder(new NativeCronetEngineBuilderImpl(getContext()));
-        TestBadLibraryLoader loader = new TestBadLibraryLoader();
-        builder.setLibraryLoader(loader);
-        CronetEngine engine = builder.build();
-        assertNotNull(engine);
-        assertFalse(loader.wasCalled());
-    }
-
     // Creates a CronetEngine on another thread and then one on the main thread.  This shouldn't
     // crash.
     @Test
diff --git a/components/cronet/android/test/smoketests/src/org/chromium/net/smoke/MissingNativeLibraryTest.java b/components/cronet/android/test/smoketests/src/org/chromium/net/smoke/MissingNativeLibraryTest.java
index 1b041e3dd0081..69cc226a6ff0e 100644
--- a/components/cronet/android/test/smoketests/src/org/chromium/net/smoke/MissingNativeLibraryTest.java
+++ b/components/cronet/android/test/smoketests/src/org/chromium/net/smoke/MissingNativeLibraryTest.java
@@ -18,7 +18,6 @@ import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 
 import org.chromium.net.CronetEngine;
-import org.chromium.net.CronetProvider;
 import org.chromium.net.ExperimentalCronetEngine;
 
 import java.util.List;
-- 
2.39.1.405.gd4c25cc71f-goog

