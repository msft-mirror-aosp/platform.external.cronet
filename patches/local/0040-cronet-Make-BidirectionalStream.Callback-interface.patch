From 8c1a55c66f5b08b79bde1fc3926486cb8c940ea6 Mon Sep 17 00:00:00 2001
From: Motomu Utsumi <motomuman@google.com>
Date: Tue, 7 Mar 2023 19:01:53 +0900
Subject: [PATCH 1/1] cronet: Make BidirectionalStream.Callback interface

Bug: 271423645
Bug: 265674359
Test: TH
Change-Id: I728ba1f6daaa49ed6c04f137414a33fb63c8cec5
---
 .../android/net/http/BidirectionalStream.java | 32 +++++++++----------
 .../net/impl/VersionSafeCallbacks.java        |  2 +-
 .../net/TestBidirectionalStreamCallback.java  |  2 +-
 3 files changed, 17 insertions(+), 19 deletions(-)

diff --git a/components/cronet/android/api/src/android/net/http/BidirectionalStream.java b/components/cronet/android/api/src/android/net/http/BidirectionalStream.java
index 6b5b318cc..0542365c3 100644
--- a/components/cronet/android/api/src/android/net/http/BidirectionalStream.java
+++ b/components/cronet/android/api/src/android/net/http/BidirectionalStream.java
@@ -161,9 +161,9 @@ public abstract class BidirectionalStream {
     }
 
     /**
-     * Callback class used to receive callbacks from a {@link BidirectionalStream}.
+     * Callback interface used to receive callbacks from a {@link BidirectionalStream}.
      */
-    public abstract static class Callback {
+    public interface Callback {
         /**
          * Invoked when the stream is ready for reading and writing.
          * Consumer may call {@link BidirectionalStream#read read()} to start reading data.
@@ -171,7 +171,7 @@ public abstract class BidirectionalStream {
          *
          * @param stream the stream that is ready.
          */
-        public abstract void onStreamReady(@NonNull BidirectionalStream stream);
+        void onStreamReady(@NonNull BidirectionalStream stream);
 
         /**
          * Invoked when initial response headers are received. Headers are available from
@@ -183,8 +183,8 @@ public abstract class BidirectionalStream {
          * @param stream the stream on which response headers were received.
          * @param info the response information.
          */
-        public abstract void onResponseHeadersReceived(
-                @NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info);
+        void onResponseHeadersReceived(@NonNull BidirectionalStream stream,
+                @NonNull UrlResponseInfo info);
 
         /**
          * Invoked when data is read into the buffer passed to {@link BidirectionalStream#read
@@ -203,8 +203,8 @@ public abstract class BidirectionalStream {
          *     and the read side is closed.
          *
          */
-        public abstract void onReadCompleted(@NonNull BidirectionalStream stream,
-                @NonNull UrlResponseInfo info, @NonNull ByteBuffer buffer, boolean endOfStream);
+        void onReadCompleted(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info,
+                @NonNull ByteBuffer buffer, boolean endOfStream);
 
         /**
          * Invoked when the entire ByteBuffer passed to {@link BidirectionalStream#write write()}
@@ -220,8 +220,8 @@ public abstract class BidirectionalStream {
          * @param endOfStream the endOfStream flag that was passed to the corresponding
          *     {@link BidirectionalStream#write write()}. If true, the write side is closed.
          */
-        public abstract void onWriteCompleted(@NonNull BidirectionalStream stream,
-                @NonNull UrlResponseInfo info, @NonNull ByteBuffer buffer, boolean endOfStream);
+        void onWriteCompleted(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info,
+                @NonNull ByteBuffer buffer, boolean endOfStream);
 
         /**
          * Invoked when trailers are received before closing the stream. Only invoked
@@ -234,8 +234,8 @@ public abstract class BidirectionalStream {
          * @param info the response information
          * @param trailers the trailers received
          */
-        public void onResponseTrailersReceived(@NonNull BidirectionalStream stream,
-                @NonNull UrlResponseInfo info, @NonNull HeaderBlock trailers) {}
+        void onResponseTrailersReceived(@NonNull BidirectionalStream stream,
+                @NonNull UrlResponseInfo info, @NonNull HeaderBlock trailers);
 
         /**
          * Invoked when there is no data to be read or written and the stream is closed successfully
@@ -245,8 +245,7 @@ public abstract class BidirectionalStream {
          * @param stream the stream which is closed successfully
          * @param info the response information
          */
-        public abstract void onSucceeded(@NonNull BidirectionalStream stream,
-                @NonNull UrlResponseInfo info);
+        void onSucceeded(@NonNull BidirectionalStream stream, @NonNull UrlResponseInfo info);
 
         /**
          * Invoked if the stream failed for any reason after {@link BidirectionalStream#start}.
@@ -259,8 +258,8 @@ public abstract class BidirectionalStream {
          *     received.
          * @param error information about the failure
          */
-        public abstract void onFailed(@NonNull BidirectionalStream stream,
-                @Nullable UrlResponseInfo info, @NonNull HttpException error);
+        void onFailed(@NonNull BidirectionalStream stream, @Nullable UrlResponseInfo info,
+                @NonNull HttpException error);
 
         /**
          * Invoked if the stream was canceled via {@link BidirectionalStream#cancel}. Once
@@ -271,8 +270,7 @@ public abstract class BidirectionalStream {
          * @param info the response information. May be {@code null} if no response was
          *     received.
          */
-        public void onCanceled(@NonNull BidirectionalStream stream,
-                @Nullable UrlResponseInfo info) {}
+        void onCanceled(@NonNull BidirectionalStream stream, @Nullable UrlResponseInfo info);
     }
 
     /**
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java b/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java
index 8e0c2ce9c..c79f47bab 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/VersionSafeCallbacks.java
@@ -93,7 +93,7 @@ public class VersionSafeCallbacks {
     /**
      * Wrap a {@link BidirectionalStream.Callback} in a version safe manner.
      */
-    public static final class BidirectionalStreamCallback extends BidirectionalStream.Callback {
+    public static final class BidirectionalStreamCallback implements BidirectionalStream.Callback {
         private final BidirectionalStream.Callback mWrappedCallback;
 
         public BidirectionalStreamCallback(BidirectionalStream.Callback callback) {
diff --git a/components/cronet/android/test/javatests/src/org/chromium/net/TestBidirectionalStreamCallback.java b/components/cronet/android/test/javatests/src/org/chromium/net/TestBidirectionalStreamCallback.java
index efb3b8c63..8b5a6d66b 100644
--- a/components/cronet/android/test/javatests/src/org/chromium/net/TestBidirectionalStreamCallback.java
+++ b/components/cronet/android/test/javatests/src/org/chromium/net/TestBidirectionalStreamCallback.java
@@ -27,7 +27,7 @@ import java.util.concurrent.ThreadFactory;
  * method to block thread until the stream completes on another thread.
  * Allows to cancel, block stream or throw an exception from an arbitrary step.
  */
-public class TestBidirectionalStreamCallback extends BidirectionalStream.Callback {
+public class TestBidirectionalStreamCallback implements BidirectionalStream.Callback {
     public UrlResponseInfo mResponseInfo;
     public HttpException mError;
 
-- 
2.40.0.rc1.284.g88254d51c5-goog

